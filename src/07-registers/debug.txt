
registers:	file format elf32-littlearm

Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	0x8001514 <__pre_init>  @ imm = #0x1378
 800019c:      	b	0x800019e <Reset+0xa>   @ imm = #-0x2
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019e:      	movw	r0, #0x0
 80001a2:      	movt	r0, #0x2000
 80001a6:      	movw	r1, #0x4
 80001aa:      	movt	r1, #0x2000
 80001ae:      	bl	0x8001516 <r0::zero_bss::h0ef497cc6f05d0f8> @ imm = #0x1364
 80001b2:      	b	0x80001b4 <Reset+0x20>  @ imm = #-0x2
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b4:      	movw	r0, #0x0
 80001b8:      	movt	r0, #0x2000
 80001bc:      	movw	r1, #0x0
 80001c0:      	movt	r1, #0x2000
 80001c4:      	movw	r2, #0x3768
 80001c8:      	movt	r2, #0x800
 80001cc:      	bl	0x8001566 <r0::init_data::he7faf1d919bf2ba2> @ imm = #0x1396
 80001d0:      	b	0x80001d2 <Reset+0x3e>  @ imm = #-0x2
 80001d2:      	movw	r0, #0xed88
 80001d6:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001da:      	ldr	r1, [r0]
 80001dc:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001e0:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x1476
 80001e4:      	b	0x80001e6 <Reset+0x52>  @ imm = #-0x2
;             trampoline()
 80001e6:      	bl	0x80014f2 <ResetTrampoline> @ imm = #0x1308
 80001ea:      	trap

080001ec <main>:
; #[entry]
 80001ec:      	push	{r7, lr}
 80001ee:      	mov	r7, sp
 80001f0:      	bl	0x80001f6 <registers::__cortex_m_rt_main::haf2427a34d2c217b> @ imm = #0x2
 80001f4:      	trap

080001f6 <registers::__cortex_m_rt_main::haf2427a34d2c217b>:
; fn main() -> ! {
 80001f6:      	push	{r7, lr}
 80001f8:      	mov	r7, sp
; 	aux7::init();
 80001fa:      	bl	0x800024a <aux7::init::hca4a51cf902199b1> @ imm = #0x4c
 80001fe:      	b	0x8000200 <registers::__cortex_m_rt_main::haf2427a34d2c217b+0xa> @ imm = #-0x2
 8000200:      	movw	r0, #0x1018
 8000204:      	movt	r0, #0x4800
 8000208:      	mov.w	r1, #0x200
; 		ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << 9);
 800020c:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x144a
 8000210:      	b	0x8000212 <registers::__cortex_m_rt_main::haf2427a34d2c217b+0x1c> @ imm = #-0x2
 8000212:      	movw	r0, #0x1018
 8000216:      	movt	r0, #0x4800
 800021a:      	mov.w	r1, #0x800
; 		ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << 11);
 800021e:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x1438
 8000222:      	b	0x8000224 <registers::__cortex_m_rt_main::haf2427a34d2c217b+0x2e> @ imm = #-0x2
 8000224:      	movw	r0, #0x1018
 8000228:      	movt	r0, #0x4800
 800022c:      	mov.w	r1, #0x2000000
; 		ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (9 + 16));
 8000230:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x1426
 8000234:      	b	0x8000236 <registers::__cortex_m_rt_main::haf2427a34d2c217b+0x40> @ imm = #-0x2
 8000236:      	movw	r0, #0x1018
 800023a:      	movt	r0, #0x4800
 800023e:      	mov.w	r1, #0x8000000
; 		ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (11 + 16));
 8000242:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x1414
 8000246:      	b	0x8000248 <registers::__cortex_m_rt_main::haf2427a34d2c217b+0x52> @ imm = #-0x2
; 	loop {}
 8000248:      	b	0x8000248 <registers::__cortex_m_rt_main::haf2427a34d2c217b+0x52> @ imm = #-0x4

0800024a <aux7::init::hca4a51cf902199b1>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 800024a:      	push	{r7, lr}
 800024c:      	mov	r7, sp
 800024e:      	sub	sp, #0x58
;     let device_periphs = stm32::Peripherals::take().unwrap();
 8000250:      	bl	0x8001258 <stm32f3::stm32f303::Peripherals::take::ha1cd80b3e5ef710e> @ imm = #0x1004
 8000254:      	str	r0, [sp, #0x8]
 8000256:      	b	0x8000258 <aux7::init::hca4a51cf902199b1+0xe> @ imm = #-0x2
 8000258:      	ldr	r0, [sp, #0x8]
 800025a:      	and	r0, r0, #0x1
 800025e:      	movw	r1, #0x3154
 8000262:      	movt	r1, #0x800
 8000266:      	bl	0x80002f0 <core::option::Option<T>::unwrap::hed5df34b750ea28c> @ imm = #0x86
 800026a:      	b	0x800026c <aux7::init::hca4a51cf902199b1+0x22> @ imm = #-0x2
 800026c:      	add	r0, sp, #0x10
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 800026e:      	bl	0x8001404 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h78eeab239fe13315> @ imm = #0x1192
 8000272:      	b	0x8000274 <aux7::init::hca4a51cf902199b1+0x2a> @ imm = #-0x2
 8000274:      	add	r0, sp, #0x10
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 8000276:      	bl	0x800142c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E> @ imm = #0x11b2
 800027a:      	b	0x800027c <aux7::init::hca4a51cf902199b1+0x32> @ imm = #-0x2
 800027c:      	add	r1, sp, #0x3c
;     let _leds = Leds::new(
 800027e:      	mov	r0, r1
 8000280:      	bl	0x8000320 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00> @ imm = #0x9c
 8000284:      	str	r1, [sp, #0x54]
 8000286:      	str	r0, [sp, #0x50]
 8000288:      	ldr	r0, [sp, #0x50]
 800028a:      	ldr	r1, [sp, #0x54]
 800028c:      	str	r1, [sp, #0x44]
 800028e:      	str	r0, [sp, #0x40]
 8000290:      	b	0x8000292 <aux7::init::hca4a51cf902199b1+0x48> @ imm = #-0x2
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 8000292:      	bl	0x80004c4 <cortex_m::peripheral::Peripherals::take::h45f9ccd59bea33a6> @ imm = #0x22e
 8000296:      	str	r0, [sp, #0x4]
 8000298:      	b	0x800029a <aux7::init::hca4a51cf902199b1+0x50> @ imm = #-0x2
 800029a:      	ldr	r0, [sp, #0x4]
 800029c:      	and	r0, r0, #0x1
 80002a0:      	movw	r1, #0x3164
 80002a4:      	movt	r1, #0x800
 80002a8:      	bl	0x80002c0 <core::option::Option<T>::unwrap::h1ab31949882ab24a> @ imm = #0x14
 80002ac:      	b	0x80002ae <aux7::init::hca4a51cf902199b1+0x64> @ imm = #-0x2
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002ae:      	b	0x80002b0 <aux7::init::hca4a51cf902199b1+0x66> @ imm = #-0x2
 80002b0:      	movw	r0, #0x1000
 80002b4:      	movt	r0, #0x4800
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002b8:      	str	r0, [sp, #0xc]
; }
 80002ba:      	ldr	r0, [sp, #0xc]
 80002bc:      	add	sp, #0x58
 80002be:      	pop	{r7, pc}

080002c0 <core::option::Option<T>::unwrap::h1ab31949882ab24a>:
 80002c0:      	push	{r7, lr}
 80002c2:      	mov	r7, sp
 80002c4:      	sub	sp, #0x10
 80002c6:      	str	r1, [sp, #0x4]
 80002c8:      	strb	r0, [r7, #-5]
 80002cc:      	ldrb	r1, [r7, #-5]
 80002d0:      	lsls	r0, r1, #0x1f
 80002d2:      	cbz	r0, 0x80002da <core::option::Option<T>::unwrap::h1ab31949882ab24a+0x1a> @ imm = #0x4
 80002d4:      	b	0x80002d6 <core::option::Option<T>::unwrap::h1ab31949882ab24a+0x16> @ imm = #-0x2
 80002d6:      	b	0x80002ec <core::option::Option<T>::unwrap::h1ab31949882ab24a+0x2c> @ imm = #0x12
 80002d8:      	trap
 80002da:      	ldr	r2, [sp, #0x4]
 80002dc:      	movw	r0, #0x3174
 80002e0:      	movt	r0, #0x800
 80002e4:      	movs	r1, #0x2b
 80002e6:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #0x170e
 80002ea:      	trap
 80002ec:      	add	sp, #0x10
 80002ee:      	pop	{r7, pc}

080002f0 <core::option::Option<T>::unwrap::hed5df34b750ea28c>:
 80002f0:      	push	{r7, lr}
 80002f2:      	mov	r7, sp
 80002f4:      	sub	sp, #0x10
 80002f6:      	str	r1, [sp, #0x4]
 80002f8:      	strb	r0, [r7, #-5]
 80002fc:      	ldrb	r1, [r7, #-5]
 8000300:      	lsls	r0, r1, #0x1f
 8000302:      	cbz	r0, 0x800030a <core::option::Option<T>::unwrap::hed5df34b750ea28c+0x1a> @ imm = #0x4
 8000304:      	b	0x8000306 <core::option::Option<T>::unwrap::hed5df34b750ea28c+0x16> @ imm = #-0x2
 8000306:      	b	0x800031c <core::option::Option<T>::unwrap::hed5df34b750ea28c+0x2c> @ imm = #0x12
 8000308:      	trap
 800030a:      	ldr	r2, [sp, #0x4]
 800030c:      	movw	r0, #0x3174
 8000310:      	movt	r0, #0x800
 8000314:      	movs	r1, #0x2b
 8000316:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #0x16de
 800031a:      	trap
 800031c:      	add	sp, #0x10
 800031e:      	pop	{r7, pc}

08000320 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 8000320:      	push	{r4, r5, r7, lr}
 8000322:      	add	r7, sp, #0x8
 8000324:      	sub	sp, #0x78
 8000326:      	str	r1, [sp, #0x40]
 8000328:      	str	r0, [sp, #0x44]
 800032a:      	str	r0, [sp, #0x70]
 800032c:      	str	r1, [sp, #0x74]
;             ld3: pe9
 800032e:      	bl	0x8000958 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17hdf4e61e1ea6d238cE> @ imm = #0x626
 8000332:      	b	0x8000334 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x14> @ imm = #-0x2
 8000334:      	bl	0x8001152 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h55445eae12c5c62dE> @ imm = #0xe1a
 8000338:      	str	r0, [sp, #0x3c]
 800033a:      	b	0x800033c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x1c> @ imm = #-0x2
 800033c:      	ldr	r0, [sp, #0x3c]
 800033e:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x424
 8000342:      	str	r0, [sp, #0x38]
 8000344:      	b	0x8000346 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x26> @ imm = #-0x2
;             ld4: pe8
 8000346:      	ldr	r1, [sp, #0x40]
 8000348:      	ldr	r0, [sp, #0x44]
 800034a:      	bl	0x8000836 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h4faee8cf3dbdf582E> @ imm = #0x4e8
 800034e:      	b	0x8000350 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x30> @ imm = #-0x2
 8000350:      	bl	0x8001142 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h1807be337a503f98E> @ imm = #0xdee
 8000354:      	str	r0, [sp, #0x34]
 8000356:      	b	0x8000358 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x38> @ imm = #-0x2
 8000358:      	ldr	r0, [sp, #0x34]
 800035a:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x408
 800035e:      	str	r0, [sp, #0x30]
 8000360:      	b	0x8000362 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x42> @ imm = #-0x2
;             ld5: pe10
 8000362:      	ldr	r1, [sp, #0x40]
 8000364:      	ldr	r0, [sp, #0x44]
 8000366:      	bl	0x8000a7a <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h4dc6d48ca731ea6cE> @ imm = #0x710
 800036a:      	b	0x800036c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x4c> @ imm = #-0x2
 800036c:      	bl	0x8001162 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hbe87d27d60adeecdE> @ imm = #0xdf2
 8000370:      	str	r0, [sp, #0x2c]
 8000372:      	b	0x8000374 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x54> @ imm = #-0x2
 8000374:      	ldr	r0, [sp, #0x2c]
 8000376:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x3ec
 800037a:      	str	r0, [sp, #0x28]
 800037c:      	b	0x800037e <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x5e> @ imm = #-0x2
;             ld6: pe15
 800037e:      	ldr	r1, [sp, #0x40]
 8000380:      	ldr	r0, [sp, #0x44]
 8000382:      	bl	0x8001024 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hc3b754879bec4780E> @ imm = #0xc9e
 8000386:      	b	0x8000388 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x68> @ imm = #-0x2
 8000388:      	bl	0x80011b2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hd5430db353d43c8fE> @ imm = #0xe26
 800038c:      	str	r0, [sp, #0x24]
 800038e:      	b	0x8000390 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x70> @ imm = #-0x2
 8000390:      	ldr	r0, [sp, #0x24]
 8000392:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x3d0
 8000396:      	str	r0, [sp, #0x20]
 8000398:      	b	0x800039a <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x7a> @ imm = #-0x2
;             ld7: pe11
 800039a:      	ldr	r1, [sp, #0x40]
 800039c:      	ldr	r0, [sp, #0x44]
 800039e:      	bl	0x8000b9c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h64d7ef50ea7fe302E> @ imm = #0x7fa
 80003a2:      	b	0x80003a4 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x84> @ imm = #-0x2
 80003a4:      	bl	0x8001172 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf01514d6de2b4297E> @ imm = #0xdca
 80003a8:      	str	r0, [sp, #0x1c]
 80003aa:      	b	0x80003ac <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x8c> @ imm = #-0x2
 80003ac:      	ldr	r0, [sp, #0x1c]
 80003ae:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x3b4
 80003b2:      	str	r0, [sp, #0x18]
 80003b4:      	b	0x80003b6 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x96> @ imm = #-0x2
;             ld8: pe14
 80003b6:      	ldr	r1, [sp, #0x40]
 80003b8:      	ldr	r0, [sp, #0x44]
 80003ba:      	bl	0x8000f02 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h5fecdc26899401c9E> @ imm = #0xb44
 80003be:      	b	0x80003c0 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xa0> @ imm = #-0x2
 80003c0:      	bl	0x80011a2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf94b225bee08e152E> @ imm = #0xdde
 80003c4:      	str	r0, [sp, #0x14]
 80003c6:      	b	0x80003c8 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xa8> @ imm = #-0x2
 80003c8:      	ldr	r0, [sp, #0x14]
 80003ca:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x398
 80003ce:      	str	r0, [sp, #0x10]
 80003d0:      	b	0x80003d2 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xb2> @ imm = #-0x2
;             ld9: pe12
 80003d2:      	ldr	r1, [sp, #0x40]
 80003d4:      	ldr	r0, [sp, #0x44]
 80003d6:      	bl	0x8000cbe <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hfd175aaf275437feE> @ imm = #0x8e4
 80003da:      	b	0x80003dc <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xbc> @ imm = #-0x2
 80003dc:      	bl	0x8001182 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h9f42b85b8213c990E> @ imm = #0xda2
 80003e0:      	str	r0, [sp, #0xc]
 80003e2:      	b	0x80003e4 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xc4> @ imm = #-0x2
 80003e4:      	ldr	r0, [sp, #0xc]
 80003e6:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x37c
 80003ea:      	str	r0, [sp, #0x8]
 80003ec:      	b	0x80003ee <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xce> @ imm = #-0x2
;             ld10: pe13
 80003ee:      	ldr	r1, [sp, #0x40]
 80003f0:      	ldr	r0, [sp, #0x44]
 80003f2:      	bl	0x8000de0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h84e6f3ab087febc3E> @ imm = #0x9ea
 80003f6:      	b	0x80003f8 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xd8> @ imm = #-0x2
 80003f8:      	bl	0x8001192 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h67bc4cab0477840bE> @ imm = #0xd96
 80003fc:      	str	r0, [sp, #0x4]
 80003fe:      	b	0x8000400 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xe0> @ imm = #-0x2
 8000400:      	ldr	r0, [sp, #0x4]
 8000402:      	bl	0x8000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b> @ imm = #0x360
 8000406:      	str	r0, [sp]
 8000408:      	b	0x800040a <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0xea> @ imm = #-0x2
;         let mut leds = Leds {
 800040a:      	ldr	r0, [sp]
 800040c:      	ldr	r1, [sp, #0x8]
 800040e:      	ldr	r2, [sp, #0x10]
 8000410:      	ldr	r3, [sp, #0x18]
 8000412:      	ldr.w	r12, [sp, #0x20]
 8000416:      	ldr.w	lr, [sp, #0x28]
 800041a:      	ldr	r4, [sp, #0x30]
 800041c:      	ldr	r5, [sp, #0x38]
 800041e:      	strb.w	r5, [sp, #0x48]
 8000422:      	strb.w	r4, [sp, #0x49]
 8000426:      	strb.w	lr, [sp, #0x4a]
 800042a:      	strb.w	r12, [sp, #0x4b]
 800042e:      	strb.w	r3, [sp, #0x4c]
 8000432:      	strb.w	r2, [sp, #0x4d]
 8000436:      	strb.w	r1, [sp, #0x4e]
 800043a:      	strb.w	r0, [sp, #0x4f]
 800043e:      	add	r0, sp, #0x48
;         leds.ld3.off().ok();
 8000440:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x2e4
 8000444:      	b	0x8000446 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x126> @ imm = #-0x2
 8000446:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x2f0
 800044a:      	b	0x800044c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x12c> @ imm = #-0x2
 800044c:      	add	r0, sp, #0x48
;         leds.ld4.off().ok();
 800044e:      	adds	r0, #0x1
 8000450:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x2d4
 8000454:      	b	0x8000456 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x136> @ imm = #-0x2
 8000456:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x2e0
 800045a:      	b	0x800045c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x13c> @ imm = #-0x2
 800045c:      	add	r0, sp, #0x48
;         leds.ld5.off().ok();
 800045e:      	adds	r0, #0x2
 8000460:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x2c4
 8000464:      	b	0x8000466 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x146> @ imm = #-0x2
 8000466:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x2d0
 800046a:      	b	0x800046c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x14c> @ imm = #-0x2
 800046c:      	add	r0, sp, #0x48
;         leds.ld6.off().ok();
 800046e:      	adds	r0, #0x3
 8000470:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x2b4
 8000474:      	b	0x8000476 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x156> @ imm = #-0x2
 8000476:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x2c0
 800047a:      	b	0x800047c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x15c> @ imm = #-0x2
 800047c:      	add	r0, sp, #0x48
;         leds.ld7.off().ok();
 800047e:      	adds	r0, #0x4
 8000480:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x2a4
 8000484:      	b	0x8000486 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x166> @ imm = #-0x2
 8000486:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x2b0
 800048a:      	b	0x800048c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x16c> @ imm = #-0x2
 800048c:      	add	r0, sp, #0x48
;         leds.ld8.off().ok();
 800048e:      	adds	r0, #0x5
 8000490:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x294
 8000494:      	b	0x8000496 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x176> @ imm = #-0x2
 8000496:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x2a0
 800049a:      	b	0x800049c <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x17c> @ imm = #-0x2
 800049c:      	add	r0, sp, #0x48
;         leds.ld9.off().ok();
 800049e:      	adds	r0, #0x6
 80004a0:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x284
 80004a4:      	b	0x80004a6 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x186> @ imm = #-0x2
 80004a6:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x290
 80004aa:      	b	0x80004ac <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x18c> @ imm = #-0x2
 80004ac:      	add	r0, sp, #0x48
;         leds.ld10.off().ok();
 80004ae:      	adds	r0, #0x7
 80004b0:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41> @ imm = #0x274
 80004b4:      	b	0x80004b6 <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x196> @ imm = #-0x2
 80004b6:      	bl	0x800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E> @ imm = #0x280
 80004ba:      	b	0x80004bc <stm32f3_discovery::leds::Leds::new::h584f685c12f84e00+0x19c> @ imm = #-0x2
;     }
 80004bc:      	ldr	r0, [sp, #0x48]
 80004be:      	ldr	r1, [sp, #0x4c]
 80004c0:      	add	sp, #0x78
 80004c2:      	pop	{r4, r5, r7, pc}

080004c4 <cortex_m::peripheral::Peripherals::take::h45f9ccd59bea33a6>:
;     pub fn take() -> Option<Self> {
 80004c4:      	push	{r7, lr}
 80004c6:      	mov	r7, sp
 80004c8:      	sub	sp, #0x8
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80004ca:      	bl	0x800056a <cortex_m::interrupt::free::hcbd4981a0335767f> @ imm = #0x9c
 80004ce:      	str	r0, [sp, #0x4]
 80004d0:      	b	0x80004d2 <cortex_m::peripheral::Peripherals::take::h45f9ccd59bea33a6+0xe> @ imm = #-0x2
;     }
 80004d2:      	ldr	r0, [sp, #0x4]
 80004d4:      	and	r0, r0, #0x1
 80004d8:      	add	sp, #0x8
 80004da:      	pop	{r7, pc}

080004dc <cortex_m::peripheral::Peripherals::take::he0914824fa018d26>:
;     pub fn take() -> Option<Self> {
 80004dc:      	push	{r7, lr}
 80004de:      	mov	r7, sp
 80004e0:      	sub	sp, #0x8
;         interrupt::free(|_| {
 80004e2:      	bl	0x80005c4 <cortex_m::interrupt::free::hdb289ccee104a09a> @ imm = #0xde
 80004e6:      	str	r0, [sp, #0x4]
 80004e8:      	b	0x80004ea <cortex_m::peripheral::Peripherals::take::he0914824fa018d26+0xe> @ imm = #-0x2
;     }
 80004ea:      	ldr	r0, [sp, #0x4]
 80004ec:      	and	r0, r0, #0x1
 80004f0:      	add	sp, #0x8
 80004f2:      	pop	{r7, pc}

080004f4 <cortex_m::peripheral::Peripherals::steal::h3067dd92c9b9e572>:
;     pub unsafe fn steal() -> Self {
 80004f4:      	push	{r7, lr}
 80004f6:      	mov	r7, sp
;         cortex_m_0_7::peripheral::Peripherals::steal();
 80004f8:      	bl	0x8000502 <cortex_m::peripheral::Peripherals::steal::h9262c3cf6e86dd55> @ imm = #0x6
 80004fc:      	b	0x80004fe <cortex_m::peripheral::Peripherals::steal::h3067dd92c9b9e572+0xa> @ imm = #-0x2
;         core::mem::transmute(())
 80004fe:      	b	0x8000500 <cortex_m::peripheral::Peripherals::steal::h3067dd92c9b9e572+0xc> @ imm = #-0x2
;     }
 8000500:      	pop	{r7, pc}

08000502 <cortex_m::peripheral::Peripherals::steal::h9262c3cf6e86dd55>:
;         TAKEN = true;
 8000502:      	movw	r1, #0x1
 8000506:      	movt	r1, #0x2000
 800050a:      	movs	r0, #0x1
 800050c:      	strb	r0, [r1]
;     }
 800050e:      	bx	lr

08000510 <cortex_m::interrupt::free::h547b8d4a7a18769c>:
; pub fn free<F, R>(f: F) -> R
 8000510:      	push	{r7, lr}
 8000512:      	mov	r7, sp
 8000514:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8000516:      	bl	0x800064a <cortex_m::register::primask::read::h13d40aafadb887bf> @ imm = #0x130
 800051a:      	mov	r1, r0
 800051c:      	str	r1, [sp, #0x8]
 800051e:      	strb	r0, [r7, #-2]
 8000522:      	b	0x8000524 <cortex_m::interrupt::free::h547b8d4a7a18769c+0x14> @ imm = #-0x2
;     disable();
 8000524:      	bl	0x800124c <cortex_m::interrupt::disable::h6ee0b8dbef8a1aa0> @ imm = #0xd24
 8000528:      	b	0x800052a <cortex_m::interrupt::free::h547b8d4a7a18769c+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 800052a:      	bl	0x80018ea <bare_metal::CriticalSection::new::h874bb208077575eb> @ imm = #0x13bc
 800052e:      	b	0x8000530 <cortex_m::interrupt::free::h547b8d4a7a18769c+0x20> @ imm = #-0x2
 8000530:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 8000532:      	str	r0, [sp, #0xc]
 8000534:      	ldr	r0, [sp, #0xc]
 8000536:      	bl	0x800120a <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c> @ imm = #0xcd0
 800053a:      	mov	r1, r0
 800053c:      	str	r1, [sp, #0x4]
 800053e:      	strb	r0, [r7, #-1]
 8000542:      	b	0x8000544 <cortex_m::interrupt::free::h547b8d4a7a18769c+0x34> @ imm = #-0x2
;     if primask.is_active() {
 8000544:      	ldr	r0, [sp, #0x8]
 8000546:      	and	r0, r0, #0x1
 800054a:      	bl	0x800067c <cortex_m::register::primask::Primask::is_active::hf4649fa48c572fa3> @ imm = #0x12e
 800054e:      	str	r0, [sp]
 8000550:      	b	0x8000552 <cortex_m::interrupt::free::h547b8d4a7a18769c+0x42> @ imm = #-0x2
 8000552:      	ldr	r0, [sp]
 8000554:      	lsls	r0, r0, #0x1f
 8000556:      	cbnz	r0, 0x8000564 <cortex_m::interrupt::free::h547b8d4a7a18769c+0x54> @ imm = #0xa
 8000558:      	b	0x800055a <cortex_m::interrupt::free::h547b8d4a7a18769c+0x4a> @ imm = #-0x2
; }
 800055a:      	ldr	r0, [sp, #0x4]
 800055c:      	and	r0, r0, #0x1
 8000560:      	add	sp, #0x18
 8000562:      	pop	{r7, pc}
;         unsafe { enable() }
 8000564:      	bl	0x8001240 <cortex_m::interrupt::enable::h5ebb9e31e79abd7f> @ imm = #0xcd8
 8000568:      	b	0x800055a <cortex_m::interrupt::free::h547b8d4a7a18769c+0x4a> @ imm = #-0x12

0800056a <cortex_m::interrupt::free::hcbd4981a0335767f>:
; pub fn free<F, R>(f: F) -> R
 800056a:      	push	{r7, lr}
 800056c:      	mov	r7, sp
 800056e:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8000570:      	bl	0x800064a <cortex_m::register::primask::read::h13d40aafadb887bf> @ imm = #0xd6
 8000574:      	mov	r1, r0
 8000576:      	str	r1, [sp, #0x8]
 8000578:      	strb	r0, [r7, #-2]
 800057c:      	b	0x800057e <cortex_m::interrupt::free::hcbd4981a0335767f+0x14> @ imm = #-0x2
;     disable();
 800057e:      	bl	0x800124c <cortex_m::interrupt::disable::h6ee0b8dbef8a1aa0> @ imm = #0xcca
 8000582:      	b	0x8000584 <cortex_m::interrupt::free::hcbd4981a0335767f+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 8000584:      	bl	0x80018ea <bare_metal::CriticalSection::new::h874bb208077575eb> @ imm = #0x1362
 8000588:      	b	0x800058a <cortex_m::interrupt::free::hcbd4981a0335767f+0x20> @ imm = #-0x2
 800058a:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 800058c:      	str	r0, [sp, #0xc]
 800058e:      	ldr	r0, [sp, #0xc]
 8000590:      	bl	0x80006d8 <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810> @ imm = #0x144
 8000594:      	mov	r1, r0
 8000596:      	str	r1, [sp, #0x4]
 8000598:      	strb	r0, [r7, #-1]
 800059c:      	b	0x800059e <cortex_m::interrupt::free::hcbd4981a0335767f+0x34> @ imm = #-0x2
;     if primask.is_active() {
 800059e:      	ldr	r0, [sp, #0x8]
 80005a0:      	and	r0, r0, #0x1
 80005a4:      	bl	0x800067c <cortex_m::register::primask::Primask::is_active::hf4649fa48c572fa3> @ imm = #0xd4
 80005a8:      	str	r0, [sp]
 80005aa:      	b	0x80005ac <cortex_m::interrupt::free::hcbd4981a0335767f+0x42> @ imm = #-0x2
 80005ac:      	ldr	r0, [sp]
 80005ae:      	lsls	r0, r0, #0x1f
 80005b0:      	cbnz	r0, 0x80005be <cortex_m::interrupt::free::hcbd4981a0335767f+0x54> @ imm = #0xa
 80005b2:      	b	0x80005b4 <cortex_m::interrupt::free::hcbd4981a0335767f+0x4a> @ imm = #-0x2
; }
 80005b4:      	ldr	r0, [sp, #0x4]
 80005b6:      	and	r0, r0, #0x1
 80005ba:      	add	sp, #0x18
 80005bc:      	pop	{r7, pc}
;         unsafe { enable() }
 80005be:      	bl	0x8001240 <cortex_m::interrupt::enable::h5ebb9e31e79abd7f> @ imm = #0xc7e
 80005c2:      	b	0x80005b4 <cortex_m::interrupt::free::hcbd4981a0335767f+0x4a> @ imm = #-0x12

080005c4 <cortex_m::interrupt::free::hdb289ccee104a09a>:
; pub fn free<F, R>(f: F) -> R
 80005c4:      	push	{r7, lr}
 80005c6:      	mov	r7, sp
 80005c8:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 80005ca:      	bl	0x800064a <cortex_m::register::primask::read::h13d40aafadb887bf> @ imm = #0x7c
 80005ce:      	mov	r1, r0
 80005d0:      	str	r1, [sp, #0x8]
 80005d2:      	strb	r0, [r7, #-2]
 80005d6:      	b	0x80005d8 <cortex_m::interrupt::free::hdb289ccee104a09a+0x14> @ imm = #-0x2
;     disable();
 80005d8:      	bl	0x800124c <cortex_m::interrupt::disable::h6ee0b8dbef8a1aa0> @ imm = #0xc70
 80005dc:      	b	0x80005de <cortex_m::interrupt::free::hdb289ccee104a09a+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 80005de:      	bl	0x80018ea <bare_metal::CriticalSection::new::h874bb208077575eb> @ imm = #0x1308
 80005e2:      	b	0x80005e4 <cortex_m::interrupt::free::hdb289ccee104a09a+0x20> @ imm = #-0x2
 80005e4:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 80005e6:      	str	r0, [sp, #0xc]
 80005e8:      	ldr	r0, [sp, #0xc]
 80005ea:      	bl	0x80006a2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0> @ imm = #0xb4
 80005ee:      	mov	r1, r0
 80005f0:      	str	r1, [sp, #0x4]
 80005f2:      	strb	r0, [r7, #-1]
 80005f6:      	b	0x80005f8 <cortex_m::interrupt::free::hdb289ccee104a09a+0x34> @ imm = #-0x2
;     if primask.is_active() {
 80005f8:      	ldr	r0, [sp, #0x8]
 80005fa:      	and	r0, r0, #0x1
 80005fe:      	bl	0x800067c <cortex_m::register::primask::Primask::is_active::hf4649fa48c572fa3> @ imm = #0x7a
 8000602:      	str	r0, [sp]
 8000604:      	b	0x8000606 <cortex_m::interrupt::free::hdb289ccee104a09a+0x42> @ imm = #-0x2
 8000606:      	ldr	r0, [sp]
 8000608:      	lsls	r0, r0, #0x1f
 800060a:      	cbnz	r0, 0x8000618 <cortex_m::interrupt::free::hdb289ccee104a09a+0x54> @ imm = #0xa
 800060c:      	b	0x800060e <cortex_m::interrupt::free::hdb289ccee104a09a+0x4a> @ imm = #-0x2
; }
 800060e:      	ldr	r0, [sp, #0x4]
 8000610:      	and	r0, r0, #0x1
 8000614:      	add	sp, #0x18
 8000616:      	pop	{r7, pc}
;         unsafe { enable() }
 8000618:      	bl	0x8001240 <cortex_m::interrupt::enable::h5ebb9e31e79abd7f> @ imm = #0xc24
 800061c:      	b	0x800060e <cortex_m::interrupt::free::hdb289ccee104a09a+0x4a> @ imm = #-0x12

0800061e <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hb4ecdc0e61c54a0d>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 800061e:      	sub	sp, #0x14
 8000620:      	str	r0, [sp, #0x4]
 8000622:      	str	r1, [sp, #0x8]
 8000624:      	ldrb	r0, [r0]
 8000626:      	str	r0, [sp, #0xc]
 8000628:      	ldrb	r1, [r1]
 800062a:      	str	r1, [sp, #0x10]
 800062c:      	cmp	r0, r1
 800062e:      	beq	0x800063a <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hb4ecdc0e61c54a0d+0x1c> @ imm = #0x8
 8000630:      	b	0x8000632 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hb4ecdc0e61c54a0d+0x14> @ imm = #-0x2
 8000632:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 8000634:      	strb.w	r0, [sp, #0x3]
 8000638:      	b	0x8000642 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hb4ecdc0e61c54a0d+0x24> @ imm = #0x6
 800063a:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 800063c:      	strb.w	r0, [sp, #0x3]
 8000640:      	b	0x8000642 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hb4ecdc0e61c54a0d+0x24> @ imm = #-0x2
 8000642:      	ldrb.w	r0, [sp, #0x3]
 8000646:      	add	sp, #0x14
 8000648:      	bx	lr

0800064a <cortex_m::register::primask::read::h13d40aafadb887bf>:
; pub fn read() -> Primask {
 800064a:      	push	{r7, lr}
 800064c:      	mov	r7, sp
 800064e:      	sub	sp, #0x10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 8000650:      	bl	0x80018e4 <__primask_r> @ imm = #0x1290
 8000654:      	mov	r1, r0
 8000656:      	str	r1, [sp, #0x4]
 8000658:      	str	r0, [sp, #0xc]
 800065a:      	b	0x800065c <cortex_m::register::primask::read::h13d40aafadb887bf+0x12> @ imm = #-0x2
;     if r & (1 << 0) == (1 << 0) {
 800065c:      	ldr	r0, [sp, #0x4]
 800065e:      	lsls	r0, r0, #0x1f
 8000660:      	cbnz	r0, 0x800066c <cortex_m::register::primask::read::h13d40aafadb887bf+0x22> @ imm = #0x8
 8000662:      	b	0x8000664 <cortex_m::register::primask::read::h13d40aafadb887bf+0x1a> @ imm = #-0x2
 8000664:      	movs	r0, #0x0
;         Primask::Active
 8000666:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 800066a:      	b	0x8000674 <cortex_m::register::primask::read::h13d40aafadb887bf+0x2a> @ imm = #0x6
 800066c:      	movs	r0, #0x1
;         Primask::Inactive
 800066e:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8000672:      	b	0x8000674 <cortex_m::register::primask::read::h13d40aafadb887bf+0x2a> @ imm = #-0x2
; }
 8000674:      	ldrb	r0, [r7, #-5]
 8000678:      	add	sp, #0x10
 800067a:      	pop	{r7, pc}

0800067c <cortex_m::register::primask::Primask::is_active::hf4649fa48c572fa3>:
;     pub fn is_active(self) -> bool {
 800067c:      	push	{r7, lr}
 800067e:      	mov	r7, sp
 8000680:      	sub	sp, #0x8
 8000682:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 8000686:      	movw	r1, #0x319f
 800068a:      	movt	r1, #0x800
 800068e:      	subs	r0, r7, #0x1
 8000690:      	bl	0x800061e <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hb4ecdc0e61c54a0d> @ imm = #-0x76
 8000694:      	str	r0, [sp]
 8000696:      	b	0x8000698 <cortex_m::register::primask::Primask::is_active::hf4649fa48c572fa3+0x1c> @ imm = #-0x2
;     }
 8000698:      	ldr	r0, [sp]
 800069a:      	and	r0, r0, #0x1
 800069e:      	add	sp, #0x8
 80006a0:      	pop	{r7, pc}

080006a2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0>:
;         interrupt::free(|_| {
 80006a2:      	push	{r7, lr}
 80006a4:      	mov	r7, sp
 80006a6:      	sub	sp, #0x10
 80006a8:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 80006aa:      	movw	r0, #0x1
 80006ae:      	movt	r0, #0x2000
 80006b2:      	ldrb	r0, [r0]
 80006b4:      	lsls	r0, r0, #0x1f
 80006b6:      	cbnz	r0, 0x80006c0 <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0+0x1e> @ imm = #0x6
 80006b8:      	b	0x80006ba <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 80006ba:      	bl	0x8000502 <cortex_m::peripheral::Peripherals::steal::h9262c3cf6e86dd55> @ imm = #-0x1bc
 80006be:      	b	0x80006d0 <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0+0x2e> @ imm = #0xe
 80006c0:      	movs	r0, #0x0
;                 None
 80006c2:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80006c6:      	b	0x80006c8 <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0+0x26> @ imm = #-0x2
;         })
 80006c8:      	ldrb	r0, [r7, #-9]
 80006cc:      	add	sp, #0x10
 80006ce:      	pop	{r7, pc}
 80006d0:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 80006d2:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80006d6:      	b	0x80006c8 <cortex_m::peripheral::Peripherals::take::{{closure}}::h144e19413feb23d0+0x26> @ imm = #-0x12

080006d8 <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80006d8:      	push	{r7, lr}
 80006da:      	mov	r7, sp
 80006dc:      	sub	sp, #0x10
 80006de:      	str	r0, [sp, #0xc]
 80006e0:      	bl	0x80004dc <cortex_m::peripheral::Peripherals::take::he0914824fa018d26> @ imm = #-0x208
 80006e4:      	strb	r0, [r7, #-9]
 80006e8:      	b	0x80006ea <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x12> @ imm = #-0x2
 80006ea:      	ldrb	r1, [r7, #-9]
 80006ee:      	lsls	r0, r1, #0x1f
 80006f0:      	cbz	r0, 0x80006f8 <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x20> @ imm = #0x4
 80006f2:      	b	0x80006f4 <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x1c> @ imm = #-0x2
 80006f4:      	b	0x8000700 <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x28> @ imm = #0x8
 80006f6:      	trap
 80006f8:      	movs	r0, #0x0
;             None    => None,
 80006fa:      	strb	r0, [r7, #-10]
 80006fe:      	b	0x800070e <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x36> @ imm = #0xc
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8000700:      	bl	0x80004f4 <cortex_m::peripheral::Peripherals::steal::h3067dd92c9b9e572> @ imm = #-0x210
 8000704:      	b	0x8000706 <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x2e> @ imm = #-0x2
 8000706:      	movs	r0, #0x1
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8000708:      	strb	r0, [r7, #-10]
 800070c:      	b	0x800070e <cortex_m::peripheral::Peripherals::take::{{closure}}::he53354205e627810+0x36> @ imm = #-0x2
;         })
 800070e:      	ldrb	r0, [r7, #-10]
 8000712:      	add	sp, #0x10
 8000714:      	pop	{r7, pc}

08000716 <switch_hal::Switch<IoPin,ActiveLevel>::new::hb5a8e1ab7618fbf8>:
;     pub fn new(pin: IoPin) -> Self {
 8000716:      	sub	sp, #0x4
 8000718:      	strb.w	r0, [sp, #0x3]
;         Switch {
 800071c:      	strb.w	r0, [sp, #0x2]
;     }
 8000720:      	ldrb.w	r0, [sp, #0x2]
 8000724:      	add	sp, #0x4
 8000726:      	bx	lr

08000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 8000728:      	push	{r7, lr}
 800072a:      	mov	r7, sp
 800072c:      	sub	sp, #0x8
 800072e:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 8000730:      	bl	0x800077e <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hab1b80b2df676c82E> @ imm = #0x4a
 8000734:      	b	0x8000736 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h79acf15843f55b41+0xe> @ imm = #-0x2
;     }
 8000736:      	add	sp, #0x8
 8000738:      	pop	{r7, pc}

0800073a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E>:
 800073a:      	sub	sp, #0x8
 800073c:      	movs	r0, #0x1
 800073e:      	cbnz	r0, 0x8000746 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0xc> @ imm = #0x4
 8000740:      	b	0x8000742 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x8> @ imm = #-0x2
 8000742:      	b	0x800074e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x14> @ imm = #0x8
 8000744:      	trap
 8000746:      	movs	r0, #0x1
 8000748:      	strb.w	r0, [sp, #0x3]
 800074c:      	b	0x8000756 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x1c> @ imm = #0x6
 800074e:      	movs	r0, #0x0
 8000750:      	strb.w	r0, [sp, #0x3]
 8000754:      	b	0x8000756 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x1c> @ imm = #-0x2
 8000756:      	movs	r0, #0x0
 8000758:      	cbnz	r0, 0x8000764 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x2a> @ imm = #0x8
 800075a:      	b	0x800075c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x22> @ imm = #-0x2
 800075c:      	ldrb.w	r0, [sp, #0x3]
 8000760:      	add	sp, #0x8
 8000762:      	bx	lr
 8000764:      	b	0x800075c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h187f90b015438359E+0x22> @ imm = #-0xc

08000766 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 8000766:      	push	{r7, lr}
 8000768:      	mov	r7, sp
 800076a:      	sub	sp, #0x8
 800076c:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 8000770:      	bl	0x80011c2 <<T as switch_hal::IntoSwitch>::into_switch::h4014a07e5ad5de17> @ imm = #0xa4e
 8000774:      	str	r0, [sp]
 8000776:      	b	0x8000778 <switch_hal::IntoSwitch::into_active_high_switch::h3928aeae0a42f41b+0x12> @ imm = #-0x2
;     }
 8000778:      	ldr	r0, [sp]
 800077a:      	add	sp, #0x8
 800077c:      	pop	{r7, pc}

0800077e <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hab1b80b2df676c82E>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 800077e:      	push	{r7, lr}
 8000780:      	mov	r7, sp
 8000782:      	sub	sp, #0x30
 8000784:      	str	r0, [sp, #0x8]
; gpio!([
 8000786:      	b	0x8000788 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hab1b80b2df676c82E+0xa> @ imm = #-0x2
 8000788:      	add	r0, sp, #0x8
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800078a:      	str	r0, [sp, #0x10]
 800078c:      	ldr	r0, [sp, #0x10]
 800078e:      	movw	r1, #0x1018
 8000792:      	movt	r1, #0x4800
 8000796:      	str	r1, [sp, #0x4]
 8000798:      	str	r1, [sp, #0x1c]
 800079a:      	str	r0, [sp, #0x20]
 800079c:      	movs	r1, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 800079e:      	str	r1, [sp, #0x18]
 80007a0:      	add	r1, sp, #0x18
 80007a2:      	str	r1, [sp, #0x14]
 80007a4:      	ldr	r1, [sp, #0x14]
 80007a6:      	bl	0x80007c0 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E> @ imm = #0x16
 80007aa:      	mov	r1, r0
 80007ac:      	ldr	r0, [sp, #0x4]
 80007ae:      	ldr	r1, [r1]
 80007b0:      	str	r0, [sp, #0x24]
 80007b2:      	str	r1, [sp, #0x28]
 80007b4:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80007b6:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xea0
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80007ba:      	b	0x80007bc <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hab1b80b2df676c82E+0x3e> @ imm = #-0x2
;                         }
 80007bc:      	add	sp, #0x30
 80007be:      	pop	{r7, pc}

080007c0 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80007c0:      	push	{r7, lr}
 80007c2:      	mov	r7, sp
 80007c4:      	sub	sp, #0x20
 80007c6:      	str	r1, [sp, #0x8]
 80007c8:      	str	r0, [sp, #0x10]
 80007ca:      	str	r1, [sp, #0x14]
 80007cc:      	ldr	r0, [r0]
 80007ce:      	ldrb	r0, [r0]
 80007d0:      	add.w	r1, r0, #0x10
 80007d4:      	uxtb	r0, r1
 80007d6:      	mov	r2, r1
 80007d8:      	str	r2, [sp, #0xc]
 80007da:      	cmp	r0, r1
 80007dc:      	bne	0x80007f4 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E+0x34> @ imm = #0x14
 80007de:      	b	0x80007e0 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E+0x20> @ imm = #-0x2
 80007e0:      	ldr	r0, [sp, #0xc]
 80007e2:      	and	r2, r0, #0x1f
 80007e6:      	movs	r1, #0x1
 80007e8:      	lsls	r1, r2
 80007ea:      	str	r1, [sp, #0x4]
 80007ec:      	tst.w	r0, #0xe0
 80007f0:      	bne	0x8000818 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E+0x58> @ imm = #0x24
 80007f2:      	b	0x800080c <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E+0x4c> @ imm = #0x16
 80007f4:      	movw	r0, #0x3210
 80007f8:      	movt	r0, #0x800
 80007fc:      	movw	r2, #0x31fc
 8000800:      	movt	r2, #0x800
 8000804:      	movs	r1, #0x1c
 8000806:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #0x11ee
 800080a:      	trap
 800080c:      	ldr	r0, [sp, #0x4]
 800080e:      	ldr	r1, [sp, #0x8]
 8000810:      	str	r1, [sp, #0x18]
 8000812:      	str	r0, [sp, #0x1c]
;         self.bits = bits;
 8000814:      	str	r0, [r1]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000816:      	b	0x8000830 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h9c2efe880b775ca3E+0x70> @ imm = #0x16
 8000818:      	movw	r0, #0x3230
 800081c:      	movt	r0, #0x800
 8000820:      	movw	r2, #0x31fc
 8000824:      	movt	r2, #0x800
 8000828:      	movs	r1, #0x23
 800082a:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #0x11ca
 800082e:      	trap
 8000830:      	ldr	r0, [sp, #0x8]
 8000832:      	add	sp, #0x20
 8000834:      	pop	{r7, pc}

08000836 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h4faee8cf3dbdf582E>:
;                             pub fn into_push_pull_output(
 8000836:      	push	{r7, lr}
 8000838:      	mov	r7, sp
 800083a:      	sub	sp, #0x70
 800083c:      	str	r1, [sp, #0x4]
 800083e:      	str	r0, [sp, #0x10]
 8000840:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000842:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0xabc
 8000846:      	str	r0, [sp, #0x8]
 8000848:      	b	0x800084a <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h4faee8cf3dbdf582E+0x14> @ imm = #-0x2
 800084a:      	ldr	r0, [sp, #0x8]
 800084c:      	str	r0, [sp, #0x28]
 800084e:      	str	r0, [sp, #0x30]
 8000850:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000852:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xed8
;         let bits = self.register.get();
 8000856:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000858:      	str	r0, [sp, #0x20]
 800085a:      	str	r0, [sp, #0x24]
 800085c:      	add	r0, sp, #0x20
 800085e:      	str	r0, [sp, #0x18]
 8000860:      	add	r0, sp, #0x24
 8000862:      	str	r0, [sp, #0x1c]
 8000864:      	ldr	r0, [sp, #0x18]
 8000866:      	ldr	r1, [sp, #0x1c]
 8000868:      	bl	0x80008c0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7c74043b7500463bE> @ imm = #0x54
 800086c:      	mov	r1, r0
 800086e:      	ldr	r0, [sp, #0x8]
 8000870:      	ldr	r1, [r1]
 8000872:      	str	r0, [sp, #0x38]
 8000874:      	str	r1, [sp, #0x3c]
 8000876:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000878:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xdde
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800087c:      	b	0x800087e <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h4faee8cf3dbdf582E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800087e:      	ldr	r0, [sp, #0x4]
 8000880:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0xa90
 8000884:      	str	r0, [sp]
 8000886:      	b	0x8000888 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h4faee8cf3dbdf582E+0x52> @ imm = #-0x2
 8000888:      	ldr	r0, [sp]
 800088a:      	str	r0, [sp, #0x54]
 800088c:      	str	r0, [sp, #0x5c]
 800088e:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000890:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xe9a
;         let bits = self.register.get();
 8000894:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000896:      	str	r0, [sp, #0x4c]
 8000898:      	str	r0, [sp, #0x50]
 800089a:      	add	r0, sp, #0x4c
 800089c:      	str	r0, [sp, #0x44]
 800089e:      	add	r0, sp, #0x50
 80008a0:      	str	r0, [sp, #0x48]
 80008a2:      	ldr	r0, [sp, #0x44]
 80008a4:      	ldr	r1, [sp, #0x48]
 80008a6:      	bl	0x800090e <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc4bd0339dfd3836bE> @ imm = #0x64
 80008aa:      	mov	r1, r0
 80008ac:      	ldr	r0, [sp]
 80008ae:      	ldr	r1, [r1]
 80008b0:      	str	r0, [sp, #0x64]
 80008b2:      	str	r1, [sp, #0x68]
 80008b4:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80008b6:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xda0
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008ba:      	b	0x80008bc <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h4faee8cf3dbdf582E+0x86> @ imm = #-0x2
;                             }
 80008bc:      	add	sp, #0x70
 80008be:      	pop	{r7, pc}

080008c0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7c74043b7500463bE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008c0:      	push	{r7, lr}
 80008c2:      	mov	r7, sp
 80008c4:      	sub	sp, #0x30
 80008c6:      	str	r0, [sp, #0x8]
 80008c8:      	str	r1, [sp, #0xc]
 80008ca:      	str	r1, [sp, #0x14]
;         MODER8_W { w: self }
 80008cc:      	str	r1, [sp, #0x10]
;     }
 80008ce:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008d0:      	str	r0, [sp]
 80008d2:      	b	0x80008d4 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7c74043b7500463bE+0x14> @ imm = #-0x2
 80008d4:      	ldr	r1, [sp]
 80008d6:      	str	r1, [sp, #0x1c]
 80008d8:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80008da:      	strb	r0, [r7, #-21]
 80008de:      	ldrb	r0, [r7, #-21]
 80008e2:      	str	r1, [sp, #0x20]
 80008e4:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80008e8:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x8ee
 80008ec:      	ldr	r1, [sp]
 80008ee:      	mov	r2, r0
 80008f0:      	str	r1, [sp, #0x28]
 80008f2:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80008f6:      	ldr	r0, [r1]
 80008f8:      	bic	r0, r0, #0x30000
 80008fc:      	and	r2, r2, #0x3
 8000900:      	orr.w	r0, r0, r2, lsl #16
 8000904:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000906:      	b	0x8000908 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7c74043b7500463bE+0x48> @ imm = #-0x2
 8000908:      	ldr	r0, [sp]
 800090a:      	add	sp, #0x30
 800090c:      	pop	{r7, pc}

0800090e <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc4bd0339dfd3836bE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800090e:      	push	{r7, lr}
 8000910:      	mov	r7, sp
 8000912:      	sub	sp, #0x30
 8000914:      	str	r0, [sp, #0x8]
 8000916:      	str	r1, [sp, #0xc]
 8000918:      	str	r1, [sp, #0x14]
;         OT8_W { w: self }
 800091a:      	str	r1, [sp, #0x10]
;     }
 800091c:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800091e:      	str	r0, [sp]
 8000920:      	b	0x8000922 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc4bd0339dfd3836bE+0x14> @ imm = #-0x2
 8000922:      	ldr	r1, [sp]
 8000924:      	str	r1, [sp, #0x1c]
 8000926:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000928:      	strb	r0, [r7, #-21]
 800092c:      	ldrb	r0, [r7, #-21]
 8000930:      	str	r1, [sp, #0x20]
 8000932:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000936:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x8b6
 800093a:      	ldr	r1, [sp]
 800093c:      	mov	r2, r0
 800093e:      	str	r1, [sp, #0x28]
 8000940:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 8000944:      	ldr	r0, [r1]
 8000946:      	bic	r0, r0, #0x100
 800094a:      	orr.w	r0, r0, r2, lsl #8
 800094e:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000950:      	b	0x8000952 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc4bd0339dfd3836bE+0x44> @ imm = #-0x2
 8000952:      	ldr	r0, [sp]
 8000954:      	add	sp, #0x30
 8000956:      	pop	{r7, pc}

08000958 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17hdf4e61e1ea6d238cE>:
;                             pub fn into_push_pull_output(
 8000958:      	push	{r7, lr}
 800095a:      	mov	r7, sp
 800095c:      	sub	sp, #0x70
 800095e:      	str	r1, [sp, #0x4]
 8000960:      	str	r0, [sp, #0x10]
 8000962:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000964:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x99a
 8000968:      	str	r0, [sp, #0x8]
 800096a:      	b	0x800096c <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17hdf4e61e1ea6d238cE+0x14> @ imm = #-0x2
 800096c:      	ldr	r0, [sp, #0x8]
 800096e:      	str	r0, [sp, #0x28]
 8000970:      	str	r0, [sp, #0x30]
 8000972:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000974:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xdb6
;         let bits = self.register.get();
 8000978:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800097a:      	str	r0, [sp, #0x20]
 800097c:      	str	r0, [sp, #0x24]
 800097e:      	add	r0, sp, #0x20
 8000980:      	str	r0, [sp, #0x18]
 8000982:      	add	r0, sp, #0x24
 8000984:      	str	r0, [sp, #0x1c]
 8000986:      	ldr	r0, [sp, #0x18]
 8000988:      	ldr	r1, [sp, #0x1c]
 800098a:      	bl	0x8000a2c <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfd67877b03b99f88E> @ imm = #0x9e
 800098e:      	mov	r1, r0
 8000990:      	ldr	r0, [sp, #0x8]
 8000992:      	ldr	r1, [r1]
 8000994:      	str	r0, [sp, #0x38]
 8000996:      	str	r1, [sp, #0x3c]
 8000998:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800099a:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xcbc
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800099e:      	b	0x80009a0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17hdf4e61e1ea6d238cE+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009a0:      	ldr	r0, [sp, #0x4]
 80009a2:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x96e
 80009a6:      	str	r0, [sp]
 80009a8:      	b	0x80009aa <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17hdf4e61e1ea6d238cE+0x52> @ imm = #-0x2
 80009aa:      	ldr	r0, [sp]
 80009ac:      	str	r0, [sp, #0x54]
 80009ae:      	str	r0, [sp, #0x5c]
 80009b0:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80009b2:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xd78
;         let bits = self.register.get();
 80009b6:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80009b8:      	str	r0, [sp, #0x4c]
 80009ba:      	str	r0, [sp, #0x50]
 80009bc:      	add	r0, sp, #0x4c
 80009be:      	str	r0, [sp, #0x44]
 80009c0:      	add	r0, sp, #0x50
 80009c2:      	str	r0, [sp, #0x48]
 80009c4:      	ldr	r0, [sp, #0x44]
 80009c6:      	ldr	r1, [sp, #0x48]
 80009c8:      	bl	0x80009e2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h838acc29497bc8f6E> @ imm = #0x16
 80009cc:      	mov	r1, r0
 80009ce:      	ldr	r0, [sp]
 80009d0:      	ldr	r1, [r1]
 80009d2:      	str	r0, [sp, #0x64]
 80009d4:      	str	r1, [sp, #0x68]
 80009d6:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80009d8:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xc7e
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009dc:      	b	0x80009de <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17hdf4e61e1ea6d238cE+0x86> @ imm = #-0x2
;                             }
 80009de:      	add	sp, #0x70
 80009e0:      	pop	{r7, pc}

080009e2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h838acc29497bc8f6E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009e2:      	push	{r7, lr}
 80009e4:      	mov	r7, sp
 80009e6:      	sub	sp, #0x30
 80009e8:      	str	r0, [sp, #0x8]
 80009ea:      	str	r1, [sp, #0xc]
 80009ec:      	str	r1, [sp, #0x14]
;         OT9_W { w: self }
 80009ee:      	str	r1, [sp, #0x10]
;     }
 80009f0:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009f2:      	str	r0, [sp]
 80009f4:      	b	0x80009f6 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h838acc29497bc8f6E+0x14> @ imm = #-0x2
 80009f6:      	ldr	r1, [sp]
 80009f8:      	str	r1, [sp, #0x1c]
 80009fa:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80009fc:      	strb	r0, [r7, #-21]
 8000a00:      	ldrb	r0, [r7, #-21]
 8000a04:      	str	r1, [sp, #0x20]
 8000a06:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000a0a:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x7e2
 8000a0e:      	ldr	r1, [sp]
 8000a10:      	mov	r2, r0
 8000a12:      	str	r1, [sp, #0x28]
 8000a14:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 8000a18:      	ldr	r0, [r1]
 8000a1a:      	bic	r0, r0, #0x200
 8000a1e:      	orr.w	r0, r0, r2, lsl #9
 8000a22:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a24:      	b	0x8000a26 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h838acc29497bc8f6E+0x44> @ imm = #-0x2
 8000a26:      	ldr	r0, [sp]
 8000a28:      	add	sp, #0x30
 8000a2a:      	pop	{r7, pc}

08000a2c <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfd67877b03b99f88E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a2c:      	push	{r7, lr}
 8000a2e:      	mov	r7, sp
 8000a30:      	sub	sp, #0x30
 8000a32:      	str	r0, [sp, #0x8]
 8000a34:      	str	r1, [sp, #0xc]
 8000a36:      	str	r1, [sp, #0x14]
;         MODER9_W { w: self }
 8000a38:      	str	r1, [sp, #0x10]
;     }
 8000a3a:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a3c:      	str	r0, [sp]
 8000a3e:      	b	0x8000a40 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfd67877b03b99f88E+0x14> @ imm = #-0x2
 8000a40:      	ldr	r1, [sp]
 8000a42:      	str	r1, [sp, #0x1c]
 8000a44:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000a46:      	strb	r0, [r7, #-21]
 8000a4a:      	ldrb	r0, [r7, #-21]
 8000a4e:      	str	r1, [sp, #0x20]
 8000a50:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000a54:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x782
 8000a58:      	ldr	r1, [sp]
 8000a5a:      	mov	r2, r0
 8000a5c:      	str	r1, [sp, #0x28]
 8000a5e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 8000a62:      	ldr	r0, [r1]
 8000a64:      	bic	r0, r0, #0xc0000
 8000a68:      	and	r2, r2, #0x3
 8000a6c:      	orr.w	r0, r0, r2, lsl #18
 8000a70:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a72:      	b	0x8000a74 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfd67877b03b99f88E+0x48> @ imm = #-0x2
 8000a74:      	ldr	r0, [sp]
 8000a76:      	add	sp, #0x30
 8000a78:      	pop	{r7, pc}

08000a7a <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h4dc6d48ca731ea6cE>:
;                             pub fn into_push_pull_output(
 8000a7a:      	push	{r7, lr}
 8000a7c:      	mov	r7, sp
 8000a7e:      	sub	sp, #0x70
 8000a80:      	str	r1, [sp, #0x4]
 8000a82:      	str	r0, [sp, #0x10]
 8000a84:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a86:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x878
 8000a8a:      	str	r0, [sp, #0x8]
 8000a8c:      	b	0x8000a8e <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h4dc6d48ca731ea6cE+0x14> @ imm = #-0x2
 8000a8e:      	ldr	r0, [sp, #0x8]
 8000a90:      	str	r0, [sp, #0x28]
 8000a92:      	str	r0, [sp, #0x30]
 8000a94:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a96:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xc94
;         let bits = self.register.get();
 8000a9a:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a9c:      	str	r0, [sp, #0x20]
 8000a9e:      	str	r0, [sp, #0x24]
 8000aa0:      	add	r0, sp, #0x20
 8000aa2:      	str	r0, [sp, #0x18]
 8000aa4:      	add	r0, sp, #0x24
 8000aa6:      	str	r0, [sp, #0x1c]
 8000aa8:      	ldr	r0, [sp, #0x18]
 8000aaa:      	ldr	r1, [sp, #0x1c]
 8000aac:      	bl	0x8000b04 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h22a9603a3801b7b4E> @ imm = #0x54
 8000ab0:      	mov	r1, r0
 8000ab2:      	ldr	r0, [sp, #0x8]
 8000ab4:      	ldr	r1, [r1]
 8000ab6:      	str	r0, [sp, #0x38]
 8000ab8:      	str	r1, [sp, #0x3c]
 8000aba:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000abc:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xb9a
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ac0:      	b	0x8000ac2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h4dc6d48ca731ea6cE+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ac2:      	ldr	r0, [sp, #0x4]
 8000ac4:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x84c
 8000ac8:      	str	r0, [sp]
 8000aca:      	b	0x8000acc <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h4dc6d48ca731ea6cE+0x52> @ imm = #-0x2
 8000acc:      	ldr	r0, [sp]
 8000ace:      	str	r0, [sp, #0x54]
 8000ad0:      	str	r0, [sp, #0x5c]
 8000ad2:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ad4:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xc56
;         let bits = self.register.get();
 8000ad8:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ada:      	str	r0, [sp, #0x4c]
 8000adc:      	str	r0, [sp, #0x50]
 8000ade:      	add	r0, sp, #0x4c
 8000ae0:      	str	r0, [sp, #0x44]
 8000ae2:      	add	r0, sp, #0x50
 8000ae4:      	str	r0, [sp, #0x48]
 8000ae6:      	ldr	r0, [sp, #0x44]
 8000ae8:      	ldr	r1, [sp, #0x48]
 8000aea:      	bl	0x8000b52 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc900f22950f4a902E> @ imm = #0x64
 8000aee:      	mov	r1, r0
 8000af0:      	ldr	r0, [sp]
 8000af2:      	ldr	r1, [r1]
 8000af4:      	str	r0, [sp, #0x64]
 8000af6:      	str	r1, [sp, #0x68]
 8000af8:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000afa:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xb5c
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000afe:      	b	0x8000b00 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h4dc6d48ca731ea6cE+0x86> @ imm = #-0x2
;                             }
 8000b00:      	add	sp, #0x70
 8000b02:      	pop	{r7, pc}

08000b04 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h22a9603a3801b7b4E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b04:      	push	{r7, lr}
 8000b06:      	mov	r7, sp
 8000b08:      	sub	sp, #0x30
 8000b0a:      	str	r0, [sp, #0x8]
 8000b0c:      	str	r1, [sp, #0xc]
 8000b0e:      	str	r1, [sp, #0x14]
;         MODER10_W { w: self }
 8000b10:      	str	r1, [sp, #0x10]
;     }
 8000b12:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b14:      	str	r0, [sp]
 8000b16:      	b	0x8000b18 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h22a9603a3801b7b4E+0x14> @ imm = #-0x2
 8000b18:      	ldr	r1, [sp]
 8000b1a:      	str	r1, [sp, #0x1c]
 8000b1c:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000b1e:      	strb	r0, [r7, #-21]
 8000b22:      	ldrb	r0, [r7, #-21]
 8000b26:      	str	r1, [sp, #0x20]
 8000b28:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000b2c:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x6aa
 8000b30:      	ldr	r1, [sp]
 8000b32:      	mov	r2, r0
 8000b34:      	str	r1, [sp, #0x28]
 8000b36:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 8000b3a:      	ldr	r0, [r1]
 8000b3c:      	bic	r0, r0, #0x300000
 8000b40:      	and	r2, r2, #0x3
 8000b44:      	orr.w	r0, r0, r2, lsl #20
 8000b48:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b4a:      	b	0x8000b4c <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h22a9603a3801b7b4E+0x48> @ imm = #-0x2
 8000b4c:      	ldr	r0, [sp]
 8000b4e:      	add	sp, #0x30
 8000b50:      	pop	{r7, pc}

08000b52 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc900f22950f4a902E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b52:      	push	{r7, lr}
 8000b54:      	mov	r7, sp
 8000b56:      	sub	sp, #0x30
 8000b58:      	str	r0, [sp, #0x8]
 8000b5a:      	str	r1, [sp, #0xc]
 8000b5c:      	str	r1, [sp, #0x14]
;         OT10_W { w: self }
 8000b5e:      	str	r1, [sp, #0x10]
;     }
 8000b60:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b62:      	str	r0, [sp]
 8000b64:      	b	0x8000b66 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc900f22950f4a902E+0x14> @ imm = #-0x2
 8000b66:      	ldr	r1, [sp]
 8000b68:      	str	r1, [sp, #0x1c]
 8000b6a:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000b6c:      	strb	r0, [r7, #-21]
 8000b70:      	ldrb	r0, [r7, #-21]
 8000b74:      	str	r1, [sp, #0x20]
 8000b76:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000b7a:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x672
 8000b7e:      	ldr	r1, [sp]
 8000b80:      	mov	r2, r0
 8000b82:      	str	r1, [sp, #0x28]
 8000b84:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000b88:      	ldr	r0, [r1]
 8000b8a:      	bic	r0, r0, #0x400
 8000b8e:      	orr.w	r0, r0, r2, lsl #10
 8000b92:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b94:      	b	0x8000b96 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc900f22950f4a902E+0x44> @ imm = #-0x2
 8000b96:      	ldr	r0, [sp]
 8000b98:      	add	sp, #0x30
 8000b9a:      	pop	{r7, pc}

08000b9c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h64d7ef50ea7fe302E>:
;                             pub fn into_push_pull_output(
 8000b9c:      	push	{r7, lr}
 8000b9e:      	mov	r7, sp
 8000ba0:      	sub	sp, #0x70
 8000ba2:      	str	r1, [sp, #0x4]
 8000ba4:      	str	r0, [sp, #0x10]
 8000ba6:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ba8:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x756
 8000bac:      	str	r0, [sp, #0x8]
 8000bae:      	b	0x8000bb0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h64d7ef50ea7fe302E+0x14> @ imm = #-0x2
 8000bb0:      	ldr	r0, [sp, #0x8]
 8000bb2:      	str	r0, [sp, #0x28]
 8000bb4:      	str	r0, [sp, #0x30]
 8000bb6:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000bb8:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xb72
;         let bits = self.register.get();
 8000bbc:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000bbe:      	str	r0, [sp, #0x20]
 8000bc0:      	str	r0, [sp, #0x24]
 8000bc2:      	add	r0, sp, #0x20
 8000bc4:      	str	r0, [sp, #0x18]
 8000bc6:      	add	r0, sp, #0x24
 8000bc8:      	str	r0, [sp, #0x1c]
 8000bca:      	ldr	r0, [sp, #0x18]
 8000bcc:      	ldr	r1, [sp, #0x1c]
 8000bce:      	bl	0x8000c26 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h60c0e269d53240bdE> @ imm = #0x54
 8000bd2:      	mov	r1, r0
 8000bd4:      	ldr	r0, [sp, #0x8]
 8000bd6:      	ldr	r1, [r1]
 8000bd8:      	str	r0, [sp, #0x38]
 8000bda:      	str	r1, [sp, #0x3c]
 8000bdc:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000bde:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xa78
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000be2:      	b	0x8000be4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h64d7ef50ea7fe302E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000be4:      	ldr	r0, [sp, #0x4]
 8000be6:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x72a
 8000bea:      	str	r0, [sp]
 8000bec:      	b	0x8000bee <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h64d7ef50ea7fe302E+0x52> @ imm = #-0x2
 8000bee:      	ldr	r0, [sp]
 8000bf0:      	str	r0, [sp, #0x54]
 8000bf2:      	str	r0, [sp, #0x5c]
 8000bf4:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000bf6:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xb34
;         let bits = self.register.get();
 8000bfa:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000bfc:      	str	r0, [sp, #0x4c]
 8000bfe:      	str	r0, [sp, #0x50]
 8000c00:      	add	r0, sp, #0x4c
 8000c02:      	str	r0, [sp, #0x44]
 8000c04:      	add	r0, sp, #0x50
 8000c06:      	str	r0, [sp, #0x48]
 8000c08:      	ldr	r0, [sp, #0x44]
 8000c0a:      	ldr	r1, [sp, #0x48]
 8000c0c:      	bl	0x8000c74 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h82d1863c3fbec1faE> @ imm = #0x64
 8000c10:      	mov	r1, r0
 8000c12:      	ldr	r0, [sp]
 8000c14:      	ldr	r1, [r1]
 8000c16:      	str	r0, [sp, #0x64]
 8000c18:      	str	r1, [sp, #0x68]
 8000c1a:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000c1c:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0xa3a
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c20:      	b	0x8000c22 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h64d7ef50ea7fe302E+0x86> @ imm = #-0x2
;                             }
 8000c22:      	add	sp, #0x70
 8000c24:      	pop	{r7, pc}

08000c26 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h60c0e269d53240bdE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c26:      	push	{r7, lr}
 8000c28:      	mov	r7, sp
 8000c2a:      	sub	sp, #0x30
 8000c2c:      	str	r0, [sp, #0x8]
 8000c2e:      	str	r1, [sp, #0xc]
 8000c30:      	str	r1, [sp, #0x14]
;         MODER11_W { w: self }
 8000c32:      	str	r1, [sp, #0x10]
;     }
 8000c34:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c36:      	str	r0, [sp]
 8000c38:      	b	0x8000c3a <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h60c0e269d53240bdE+0x14> @ imm = #-0x2
 8000c3a:      	ldr	r1, [sp]
 8000c3c:      	str	r1, [sp, #0x1c]
 8000c3e:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000c40:      	strb	r0, [r7, #-21]
 8000c44:      	ldrb	r0, [r7, #-21]
 8000c48:      	str	r1, [sp, #0x20]
 8000c4a:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000c4e:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x588
 8000c52:      	ldr	r1, [sp]
 8000c54:      	mov	r2, r0
 8000c56:      	str	r1, [sp, #0x28]
 8000c58:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000c5c:      	ldr	r0, [r1]
 8000c5e:      	bic	r0, r0, #0xc00000
 8000c62:      	and	r2, r2, #0x3
 8000c66:      	orr.w	r0, r0, r2, lsl #22
 8000c6a:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c6c:      	b	0x8000c6e <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h60c0e269d53240bdE+0x48> @ imm = #-0x2
 8000c6e:      	ldr	r0, [sp]
 8000c70:      	add	sp, #0x30
 8000c72:      	pop	{r7, pc}

08000c74 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h82d1863c3fbec1faE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c74:      	push	{r7, lr}
 8000c76:      	mov	r7, sp
 8000c78:      	sub	sp, #0x30
 8000c7a:      	str	r0, [sp, #0x8]
 8000c7c:      	str	r1, [sp, #0xc]
 8000c7e:      	str	r1, [sp, #0x14]
;         OT11_W { w: self }
 8000c80:      	str	r1, [sp, #0x10]
;     }
 8000c82:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c84:      	str	r0, [sp]
 8000c86:      	b	0x8000c88 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h82d1863c3fbec1faE+0x14> @ imm = #-0x2
 8000c88:      	ldr	r1, [sp]
 8000c8a:      	str	r1, [sp, #0x1c]
 8000c8c:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000c8e:      	strb	r0, [r7, #-21]
 8000c92:      	ldrb	r0, [r7, #-21]
 8000c96:      	str	r1, [sp, #0x20]
 8000c98:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000c9c:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x550
 8000ca0:      	ldr	r1, [sp]
 8000ca2:      	mov	r2, r0
 8000ca4:      	str	r1, [sp, #0x28]
 8000ca6:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000caa:      	ldr	r0, [r1]
 8000cac:      	bic	r0, r0, #0x800
 8000cb0:      	orr.w	r0, r0, r2, lsl #11
 8000cb4:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cb6:      	b	0x8000cb8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h82d1863c3fbec1faE+0x44> @ imm = #-0x2
 8000cb8:      	ldr	r0, [sp]
 8000cba:      	add	sp, #0x30
 8000cbc:      	pop	{r7, pc}

08000cbe <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hfd175aaf275437feE>:
;                             pub fn into_push_pull_output(
 8000cbe:      	push	{r7, lr}
 8000cc0:      	mov	r7, sp
 8000cc2:      	sub	sp, #0x70
 8000cc4:      	str	r1, [sp, #0x4]
 8000cc6:      	str	r0, [sp, #0x10]
 8000cc8:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cca:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x634
 8000cce:      	str	r0, [sp, #0x8]
 8000cd0:      	b	0x8000cd2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hfd175aaf275437feE+0x14> @ imm = #-0x2
 8000cd2:      	ldr	r0, [sp, #0x8]
 8000cd4:      	str	r0, [sp, #0x28]
 8000cd6:      	str	r0, [sp, #0x30]
 8000cd8:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000cda:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xa50
;         let bits = self.register.get();
 8000cde:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ce0:      	str	r0, [sp, #0x20]
 8000ce2:      	str	r0, [sp, #0x24]
 8000ce4:      	add	r0, sp, #0x20
 8000ce6:      	str	r0, [sp, #0x18]
 8000ce8:      	add	r0, sp, #0x24
 8000cea:      	str	r0, [sp, #0x1c]
 8000cec:      	ldr	r0, [sp, #0x18]
 8000cee:      	ldr	r1, [sp, #0x1c]
 8000cf0:      	bl	0x8000d92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8787e4a437f94455E> @ imm = #0x9e
 8000cf4:      	mov	r1, r0
 8000cf6:      	ldr	r0, [sp, #0x8]
 8000cf8:      	ldr	r1, [r1]
 8000cfa:      	str	r0, [sp, #0x38]
 8000cfc:      	str	r1, [sp, #0x3c]
 8000cfe:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d00:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x956
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d04:      	b	0x8000d06 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hfd175aaf275437feE+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d06:      	ldr	r0, [sp, #0x4]
 8000d08:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x608
 8000d0c:      	str	r0, [sp]
 8000d0e:      	b	0x8000d10 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hfd175aaf275437feE+0x52> @ imm = #-0x2
 8000d10:      	ldr	r0, [sp]
 8000d12:      	str	r0, [sp, #0x54]
 8000d14:      	str	r0, [sp, #0x5c]
 8000d16:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d18:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xa12
;         let bits = self.register.get();
 8000d1c:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d1e:      	str	r0, [sp, #0x4c]
 8000d20:      	str	r0, [sp, #0x50]
 8000d22:      	add	r0, sp, #0x4c
 8000d24:      	str	r0, [sp, #0x44]
 8000d26:      	add	r0, sp, #0x50
 8000d28:      	str	r0, [sp, #0x48]
 8000d2a:      	ldr	r0, [sp, #0x44]
 8000d2c:      	ldr	r1, [sp, #0x48]
 8000d2e:      	bl	0x8000d48 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h86a177dec54b6b4eE> @ imm = #0x16
 8000d32:      	mov	r1, r0
 8000d34:      	ldr	r0, [sp]
 8000d36:      	ldr	r1, [r1]
 8000d38:      	str	r0, [sp, #0x64]
 8000d3a:      	str	r1, [sp, #0x68]
 8000d3c:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d3e:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x918
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d42:      	b	0x8000d44 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hfd175aaf275437feE+0x86> @ imm = #-0x2
;                             }
 8000d44:      	add	sp, #0x70
 8000d46:      	pop	{r7, pc}

08000d48 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h86a177dec54b6b4eE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d48:      	push	{r7, lr}
 8000d4a:      	mov	r7, sp
 8000d4c:      	sub	sp, #0x30
 8000d4e:      	str	r0, [sp, #0x8]
 8000d50:      	str	r1, [sp, #0xc]
 8000d52:      	str	r1, [sp, #0x14]
;         OT12_W { w: self }
 8000d54:      	str	r1, [sp, #0x10]
;     }
 8000d56:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d58:      	str	r0, [sp]
 8000d5a:      	b	0x8000d5c <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h86a177dec54b6b4eE+0x14> @ imm = #-0x2
 8000d5c:      	ldr	r1, [sp]
 8000d5e:      	str	r1, [sp, #0x1c]
 8000d60:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000d62:      	strb	r0, [r7, #-21]
 8000d66:      	ldrb	r0, [r7, #-21]
 8000d6a:      	str	r1, [sp, #0x20]
 8000d6c:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000d70:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x47c
 8000d74:      	ldr	r1, [sp]
 8000d76:      	mov	r2, r0
 8000d78:      	str	r1, [sp, #0x28]
 8000d7a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000d7e:      	ldr	r0, [r1]
 8000d80:      	bic	r0, r0, #0x1000
 8000d84:      	orr.w	r0, r0, r2, lsl #12
 8000d88:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d8a:      	b	0x8000d8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h86a177dec54b6b4eE+0x44> @ imm = #-0x2
 8000d8c:      	ldr	r0, [sp]
 8000d8e:      	add	sp, #0x30
 8000d90:      	pop	{r7, pc}

08000d92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8787e4a437f94455E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d92:      	push	{r7, lr}
 8000d94:      	mov	r7, sp
 8000d96:      	sub	sp, #0x30
 8000d98:      	str	r0, [sp, #0x8]
 8000d9a:      	str	r1, [sp, #0xc]
 8000d9c:      	str	r1, [sp, #0x14]
;         MODER12_W { w: self }
 8000d9e:      	str	r1, [sp, #0x10]
;     }
 8000da0:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000da2:      	str	r0, [sp]
 8000da4:      	b	0x8000da6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8787e4a437f94455E+0x14> @ imm = #-0x2
 8000da6:      	ldr	r1, [sp]
 8000da8:      	str	r1, [sp, #0x1c]
 8000daa:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000dac:      	strb	r0, [r7, #-21]
 8000db0:      	ldrb	r0, [r7, #-21]
 8000db4:      	str	r1, [sp, #0x20]
 8000db6:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000dba:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x41c
 8000dbe:      	ldr	r1, [sp]
 8000dc0:      	mov	r2, r0
 8000dc2:      	str	r1, [sp, #0x28]
 8000dc4:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000dc8:      	ldr	r0, [r1]
 8000dca:      	bic	r0, r0, #0x3000000
 8000dce:      	and	r2, r2, #0x3
 8000dd2:      	orr.w	r0, r0, r2, lsl #24
 8000dd6:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000dd8:      	b	0x8000dda <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8787e4a437f94455E+0x48> @ imm = #-0x2
 8000dda:      	ldr	r0, [sp]
 8000ddc:      	add	sp, #0x30
 8000dde:      	pop	{r7, pc}

08000de0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h84e6f3ab087febc3E>:
;                             pub fn into_push_pull_output(
 8000de0:      	push	{r7, lr}
 8000de2:      	mov	r7, sp
 8000de4:      	sub	sp, #0x70
 8000de6:      	str	r1, [sp, #0x4]
 8000de8:      	str	r0, [sp, #0x10]
 8000dea:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000dec:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x512
 8000df0:      	str	r0, [sp, #0x8]
 8000df2:      	b	0x8000df4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h84e6f3ab087febc3E+0x14> @ imm = #-0x2
 8000df4:      	ldr	r0, [sp, #0x8]
 8000df6:      	str	r0, [sp, #0x28]
 8000df8:      	str	r0, [sp, #0x30]
 8000dfa:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000dfc:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x92e
;         let bits = self.register.get();
 8000e00:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000e02:      	str	r0, [sp, #0x20]
 8000e04:      	str	r0, [sp, #0x24]
 8000e06:      	add	r0, sp, #0x20
 8000e08:      	str	r0, [sp, #0x18]
 8000e0a:      	add	r0, sp, #0x24
 8000e0c:      	str	r0, [sp, #0x1c]
 8000e0e:      	ldr	r0, [sp, #0x18]
 8000e10:      	ldr	r1, [sp, #0x1c]
 8000e12:      	bl	0x8000eb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd5178c71b821f436E> @ imm = #0x9e
 8000e16:      	mov	r1, r0
 8000e18:      	ldr	r0, [sp, #0x8]
 8000e1a:      	ldr	r1, [r1]
 8000e1c:      	str	r0, [sp, #0x38]
 8000e1e:      	str	r1, [sp, #0x3c]
 8000e20:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e22:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x834
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e26:      	b	0x8000e28 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h84e6f3ab087febc3E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e28:      	ldr	r0, [sp, #0x4]
 8000e2a:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x4e6
 8000e2e:      	str	r0, [sp]
 8000e30:      	b	0x8000e32 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h84e6f3ab087febc3E+0x52> @ imm = #-0x2
 8000e32:      	ldr	r0, [sp]
 8000e34:      	str	r0, [sp, #0x54]
 8000e36:      	str	r0, [sp, #0x5c]
 8000e38:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000e3a:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x8f0
;         let bits = self.register.get();
 8000e3e:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000e40:      	str	r0, [sp, #0x4c]
 8000e42:      	str	r0, [sp, #0x50]
 8000e44:      	add	r0, sp, #0x4c
 8000e46:      	str	r0, [sp, #0x44]
 8000e48:      	add	r0, sp, #0x50
 8000e4a:      	str	r0, [sp, #0x48]
 8000e4c:      	ldr	r0, [sp, #0x44]
 8000e4e:      	ldr	r1, [sp, #0x48]
 8000e50:      	bl	0x8000e6a <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2b53abddda50c4c3E> @ imm = #0x16
 8000e54:      	mov	r1, r0
 8000e56:      	ldr	r0, [sp]
 8000e58:      	ldr	r1, [r1]
 8000e5a:      	str	r0, [sp, #0x64]
 8000e5c:      	str	r1, [sp, #0x68]
 8000e5e:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e60:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x7f6
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e64:      	b	0x8000e66 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h84e6f3ab087febc3E+0x86> @ imm = #-0x2
;                             }
 8000e66:      	add	sp, #0x70
 8000e68:      	pop	{r7, pc}

08000e6a <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2b53abddda50c4c3E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e6a:      	push	{r7, lr}
 8000e6c:      	mov	r7, sp
 8000e6e:      	sub	sp, #0x30
 8000e70:      	str	r0, [sp, #0x8]
 8000e72:      	str	r1, [sp, #0xc]
 8000e74:      	str	r1, [sp, #0x14]
;         OT13_W { w: self }
 8000e76:      	str	r1, [sp, #0x10]
;     }
 8000e78:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e7a:      	str	r0, [sp]
 8000e7c:      	b	0x8000e7e <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2b53abddda50c4c3E+0x14> @ imm = #-0x2
 8000e7e:      	ldr	r1, [sp]
 8000e80:      	str	r1, [sp, #0x1c]
 8000e82:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000e84:      	strb	r0, [r7, #-21]
 8000e88:      	ldrb	r0, [r7, #-21]
 8000e8c:      	str	r1, [sp, #0x20]
 8000e8e:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000e92:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x35a
 8000e96:      	ldr	r1, [sp]
 8000e98:      	mov	r2, r0
 8000e9a:      	str	r1, [sp, #0x28]
 8000e9c:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000ea0:      	ldr	r0, [r1]
 8000ea2:      	bic	r0, r0, #0x2000
 8000ea6:      	orr.w	r0, r0, r2, lsl #13
 8000eaa:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000eac:      	b	0x8000eae <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2b53abddda50c4c3E+0x44> @ imm = #-0x2
 8000eae:      	ldr	r0, [sp]
 8000eb0:      	add	sp, #0x30
 8000eb2:      	pop	{r7, pc}

08000eb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd5178c71b821f436E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000eb4:      	push	{r7, lr}
 8000eb6:      	mov	r7, sp
 8000eb8:      	sub	sp, #0x30
 8000eba:      	str	r0, [sp, #0x8]
 8000ebc:      	str	r1, [sp, #0xc]
 8000ebe:      	str	r1, [sp, #0x14]
;         MODER13_W { w: self }
 8000ec0:      	str	r1, [sp, #0x10]
;     }
 8000ec2:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ec4:      	str	r0, [sp]
 8000ec6:      	b	0x8000ec8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd5178c71b821f436E+0x14> @ imm = #-0x2
 8000ec8:      	ldr	r1, [sp]
 8000eca:      	str	r1, [sp, #0x1c]
 8000ecc:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000ece:      	strb	r0, [r7, #-21]
 8000ed2:      	ldrb	r0, [r7, #-21]
 8000ed6:      	str	r1, [sp, #0x20]
 8000ed8:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000edc:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x2fa
 8000ee0:      	ldr	r1, [sp]
 8000ee2:      	mov	r2, r0
 8000ee4:      	str	r1, [sp, #0x28]
 8000ee6:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000eea:      	ldr	r0, [r1]
 8000eec:      	bic	r0, r0, #0xc000000
 8000ef0:      	and	r2, r2, #0x3
 8000ef4:      	orr.w	r0, r0, r2, lsl #26
 8000ef8:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000efa:      	b	0x8000efc <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd5178c71b821f436E+0x48> @ imm = #-0x2
 8000efc:      	ldr	r0, [sp]
 8000efe:      	add	sp, #0x30
 8000f00:      	pop	{r7, pc}

08000f02 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h5fecdc26899401c9E>:
;                             pub fn into_push_pull_output(
 8000f02:      	push	{r7, lr}
 8000f04:      	mov	r7, sp
 8000f06:      	sub	sp, #0x70
 8000f08:      	str	r1, [sp, #0x4]
 8000f0a:      	str	r0, [sp, #0x10]
 8000f0c:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f0e:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x3f0
 8000f12:      	str	r0, [sp, #0x8]
 8000f14:      	b	0x8000f16 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h5fecdc26899401c9E+0x14> @ imm = #-0x2
 8000f16:      	ldr	r0, [sp, #0x8]
 8000f18:      	str	r0, [sp, #0x28]
 8000f1a:      	str	r0, [sp, #0x30]
 8000f1c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f1e:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x80c
;         let bits = self.register.get();
 8000f22:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f24:      	str	r0, [sp, #0x20]
 8000f26:      	str	r0, [sp, #0x24]
 8000f28:      	add	r0, sp, #0x20
 8000f2a:      	str	r0, [sp, #0x18]
 8000f2c:      	add	r0, sp, #0x24
 8000f2e:      	str	r0, [sp, #0x1c]
 8000f30:      	ldr	r0, [sp, #0x18]
 8000f32:      	ldr	r1, [sp, #0x1c]
 8000f34:      	bl	0x8000fd6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdb5453805c203815E> @ imm = #0x9e
 8000f38:      	mov	r1, r0
 8000f3a:      	ldr	r0, [sp, #0x8]
 8000f3c:      	ldr	r1, [r1]
 8000f3e:      	str	r0, [sp, #0x38]
 8000f40:      	str	r1, [sp, #0x3c]
 8000f42:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000f44:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x712
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f48:      	b	0x8000f4a <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h5fecdc26899401c9E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f4a:      	ldr	r0, [sp, #0x4]
 8000f4c:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x3c4
 8000f50:      	str	r0, [sp]
 8000f52:      	b	0x8000f54 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h5fecdc26899401c9E+0x52> @ imm = #-0x2
 8000f54:      	ldr	r0, [sp]
 8000f56:      	str	r0, [sp, #0x54]
 8000f58:      	str	r0, [sp, #0x5c]
 8000f5a:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f5c:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x7ce
;         let bits = self.register.get();
 8000f60:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f62:      	str	r0, [sp, #0x4c]
 8000f64:      	str	r0, [sp, #0x50]
 8000f66:      	add	r0, sp, #0x4c
 8000f68:      	str	r0, [sp, #0x44]
 8000f6a:      	add	r0, sp, #0x50
 8000f6c:      	str	r0, [sp, #0x48]
 8000f6e:      	ldr	r0, [sp, #0x44]
 8000f70:      	ldr	r1, [sp, #0x48]
 8000f72:      	bl	0x8000f8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd27b436fc2722688E> @ imm = #0x16
 8000f76:      	mov	r1, r0
 8000f78:      	ldr	r0, [sp]
 8000f7a:      	ldr	r1, [r1]
 8000f7c:      	str	r0, [sp, #0x64]
 8000f7e:      	str	r1, [sp, #0x68]
 8000f80:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000f82:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x6d4
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f86:      	b	0x8000f88 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h5fecdc26899401c9E+0x86> @ imm = #-0x2
;                             }
 8000f88:      	add	sp, #0x70
 8000f8a:      	pop	{r7, pc}

08000f8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd27b436fc2722688E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f8c:      	push	{r7, lr}
 8000f8e:      	mov	r7, sp
 8000f90:      	sub	sp, #0x30
 8000f92:      	str	r0, [sp, #0x8]
 8000f94:      	str	r1, [sp, #0xc]
 8000f96:      	str	r1, [sp, #0x14]
;         OT14_W { w: self }
 8000f98:      	str	r1, [sp, #0x10]
;     }
 8000f9a:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f9c:      	str	r0, [sp]
 8000f9e:      	b	0x8000fa0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd27b436fc2722688E+0x14> @ imm = #-0x2
 8000fa0:      	ldr	r1, [sp]
 8000fa2:      	str	r1, [sp, #0x1c]
 8000fa4:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000fa6:      	strb	r0, [r7, #-21]
 8000faa:      	ldrb	r0, [r7, #-21]
 8000fae:      	str	r1, [sp, #0x20]
 8000fb0:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000fb4:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x238
 8000fb8:      	ldr	r1, [sp]
 8000fba:      	mov	r2, r0
 8000fbc:      	str	r1, [sp, #0x28]
 8000fbe:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000fc2:      	ldr	r0, [r1]
 8000fc4:      	bic	r0, r0, #0x4000
 8000fc8:      	orr.w	r0, r0, r2, lsl #14
 8000fcc:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000fce:      	b	0x8000fd0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd27b436fc2722688E+0x44> @ imm = #-0x2
 8000fd0:      	ldr	r0, [sp]
 8000fd2:      	add	sp, #0x30
 8000fd4:      	pop	{r7, pc}

08000fd6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdb5453805c203815E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fd6:      	push	{r7, lr}
 8000fd8:      	mov	r7, sp
 8000fda:      	sub	sp, #0x30
 8000fdc:      	str	r0, [sp, #0x8]
 8000fde:      	str	r1, [sp, #0xc]
 8000fe0:      	str	r1, [sp, #0x14]
;         MODER14_W { w: self }
 8000fe2:      	str	r1, [sp, #0x10]
;     }
 8000fe4:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fe6:      	str	r0, [sp]
 8000fe8:      	b	0x8000fea <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdb5453805c203815E+0x14> @ imm = #-0x2
 8000fea:      	ldr	r1, [sp]
 8000fec:      	str	r1, [sp, #0x1c]
 8000fee:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000ff0:      	strb	r0, [r7, #-21]
 8000ff4:      	ldrb	r0, [r7, #-21]
 8000ff8:      	str	r1, [sp, #0x20]
 8000ffa:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000ffe:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0x1d8
 8001002:      	ldr	r1, [sp]
 8001004:      	mov	r2, r0
 8001006:      	str	r1, [sp, #0x28]
 8001008:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 800100c:      	ldr	r0, [r1]
 800100e:      	bic	r0, r0, #0x30000000
 8001012:      	and	r2, r2, #0x3
 8001016:      	orr.w	r0, r0, r2, lsl #28
 800101a:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800101c:      	b	0x800101e <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdb5453805c203815E+0x48> @ imm = #-0x2
 800101e:      	ldr	r0, [sp]
 8001020:      	add	sp, #0x30
 8001022:      	pop	{r7, pc}

08001024 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hc3b754879bec4780E>:
;                             pub fn into_push_pull_output(
 8001024:      	push	{r7, lr}
 8001026:      	mov	r7, sp
 8001028:      	sub	sp, #0x70
 800102a:      	str	r1, [sp, #0x4]
 800102c:      	str	r0, [sp, #0x10]
 800102e:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001030:      	bl	0x8001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec> @ imm = #0x2ce
 8001034:      	str	r0, [sp, #0x8]
 8001036:      	b	0x8001038 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hc3b754879bec4780E+0x14> @ imm = #-0x2
 8001038:      	ldr	r0, [sp, #0x8]
 800103a:      	str	r0, [sp, #0x28]
 800103c:      	str	r0, [sp, #0x30]
 800103e:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001040:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x6ea
;         let bits = self.register.get();
 8001044:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001046:      	str	r0, [sp, #0x20]
 8001048:      	str	r0, [sp, #0x24]
 800104a:      	add	r0, sp, #0x20
 800104c:      	str	r0, [sp, #0x18]
 800104e:      	add	r0, sp, #0x24
 8001050:      	str	r0, [sp, #0x1c]
 8001052:      	ldr	r0, [sp, #0x18]
 8001054:      	ldr	r1, [sp, #0x1c]
 8001056:      	bl	0x80010f8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8fcead11dbe75433E> @ imm = #0x9e
 800105a:      	mov	r1, r0
 800105c:      	ldr	r0, [sp, #0x8]
 800105e:      	ldr	r1, [r1]
 8001060:      	str	r0, [sp, #0x38]
 8001062:      	str	r1, [sp, #0x3c]
 8001064:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001066:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x5f0
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800106a:      	b	0x800106c <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hc3b754879bec4780E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800106c:      	ldr	r0, [sp, #0x4]
 800106e:      	bl	0x8001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa> @ imm = #0x2a2
 8001072:      	str	r0, [sp]
 8001074:      	b	0x8001076 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hc3b754879bec4780E+0x52> @ imm = #-0x2
 8001076:      	ldr	r0, [sp]
 8001078:      	str	r0, [sp, #0x54]
 800107a:      	str	r0, [sp, #0x5c]
 800107c:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800107e:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x6ac
;         let bits = self.register.get();
 8001082:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001084:      	str	r0, [sp, #0x4c]
 8001086:      	str	r0, [sp, #0x50]
 8001088:      	add	r0, sp, #0x4c
 800108a:      	str	r0, [sp, #0x44]
 800108c:      	add	r0, sp, #0x50
 800108e:      	str	r0, [sp, #0x48]
 8001090:      	ldr	r0, [sp, #0x44]
 8001092:      	ldr	r1, [sp, #0x48]
 8001094:      	bl	0x80010ae <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h74046c50f07d0296E> @ imm = #0x16
 8001098:      	mov	r1, r0
 800109a:      	ldr	r0, [sp]
 800109c:      	ldr	r1, [r1]
 800109e:      	str	r0, [sp, #0x64]
 80010a0:      	str	r1, [sp, #0x68]
 80010a2:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80010a4:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x5b2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010a8:      	b	0x80010aa <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hc3b754879bec4780E+0x86> @ imm = #-0x2
;                             }
 80010aa:      	add	sp, #0x70
 80010ac:      	pop	{r7, pc}

080010ae <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h74046c50f07d0296E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010ae:      	push	{r7, lr}
 80010b0:      	mov	r7, sp
 80010b2:      	sub	sp, #0x30
 80010b4:      	str	r0, [sp, #0x8]
 80010b6:      	str	r1, [sp, #0xc]
 80010b8:      	str	r1, [sp, #0x14]
;         OT15_W { w: self }
 80010ba:      	str	r1, [sp, #0x10]
;     }
 80010bc:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010be:      	str	r0, [sp]
 80010c0:      	b	0x80010c2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h74046c50f07d0296E+0x14> @ imm = #-0x2
 80010c2:      	ldr	r1, [sp]
 80010c4:      	str	r1, [sp, #0x1c]
 80010c6:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80010c8:      	strb	r0, [r7, #-21]
 80010cc:      	ldrb	r0, [r7, #-21]
 80010d0:      	str	r1, [sp, #0x20]
 80010d2:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80010d6:      	bl	0x80011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4> @ imm = #0x116
 80010da:      	ldr	r1, [sp]
 80010dc:      	mov	r2, r0
 80010de:      	str	r1, [sp, #0x28]
 80010e0:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80010e4:      	ldr	r0, [r1]
 80010e6:      	bic	r0, r0, #0x8000
 80010ea:      	orr.w	r0, r0, r2, lsl #15
 80010ee:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010f0:      	b	0x80010f2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h74046c50f07d0296E+0x44> @ imm = #-0x2
 80010f2:      	ldr	r0, [sp]
 80010f4:      	add	sp, #0x30
 80010f6:      	pop	{r7, pc}

080010f8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8fcead11dbe75433E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80010f8:      	push	{r7, lr}
 80010fa:      	mov	r7, sp
 80010fc:      	sub	sp, #0x30
 80010fe:      	str	r0, [sp, #0x8]
 8001100:      	str	r1, [sp, #0xc]
 8001102:      	str	r1, [sp, #0x14]
;         MODER15_W { w: self }
 8001104:      	str	r1, [sp, #0x10]
;     }
 8001106:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001108:      	str	r0, [sp]
 800110a:      	b	0x800110c <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8fcead11dbe75433E+0x14> @ imm = #-0x2
 800110c:      	ldr	r1, [sp]
 800110e:      	str	r1, [sp, #0x1c]
 8001110:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8001112:      	strb	r0, [r7, #-21]
 8001116:      	ldrb	r0, [r7, #-21]
 800111a:      	str	r1, [sp, #0x20]
 800111c:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8001120:      	bl	0x80011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b> @ imm = #0xb6
 8001124:      	ldr	r1, [sp]
 8001126:      	mov	r2, r0
 8001128:      	str	r1, [sp, #0x28]
 800112a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 800112e:      	ldr	r0, [r1]
 8001130:      	bic	r0, r0, #0xc0000000
 8001134:      	orr.w	r0, r0, r2, lsl #30
 8001138:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800113a:      	b	0x800113c <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8fcead11dbe75433E+0x44> @ imm = #-0x2
 800113c:      	ldr	r0, [sp]
 800113e:      	add	sp, #0x30
 8001140:      	pop	{r7, pc}

08001142 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h1807be337a503f98E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001142:      	sub	sp, #0x8
 8001144:      	movs	r0, #0x8
; gpio!([
 8001146:      	strb.w	r0, [sp, #0x3]
;                             }
 800114a:      	ldrb.w	r0, [sp, #0x3]
 800114e:      	add	sp, #0x8
 8001150:      	bx	lr

08001152 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h55445eae12c5c62dE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001152:      	sub	sp, #0x8
 8001154:      	movs	r0, #0x9
; gpio!([
 8001156:      	strb.w	r0, [sp, #0x3]
;                             }
 800115a:      	ldrb.w	r0, [sp, #0x3]
 800115e:      	add	sp, #0x8
 8001160:      	bx	lr

08001162 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hbe87d27d60adeecdE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001162:      	sub	sp, #0x8
 8001164:      	movs	r0, #0xa
; gpio!([
 8001166:      	strb.w	r0, [sp, #0x3]
;                             }
 800116a:      	ldrb.w	r0, [sp, #0x3]
 800116e:      	add	sp, #0x8
 8001170:      	bx	lr

08001172 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf01514d6de2b4297E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001172:      	sub	sp, #0x8
 8001174:      	movs	r0, #0xb
; gpio!([
 8001176:      	strb.w	r0, [sp, #0x3]
;                             }
 800117a:      	ldrb.w	r0, [sp, #0x3]
 800117e:      	add	sp, #0x8
 8001180:      	bx	lr

08001182 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h9f42b85b8213c990E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001182:      	sub	sp, #0x8
 8001184:      	movs	r0, #0xc
; gpio!([
 8001186:      	strb.w	r0, [sp, #0x3]
;                             }
 800118a:      	ldrb.w	r0, [sp, #0x3]
 800118e:      	add	sp, #0x8
 8001190:      	bx	lr

08001192 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h67bc4cab0477840bE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001192:      	sub	sp, #0x8
 8001194:      	movs	r0, #0xd
; gpio!([
 8001196:      	strb.w	r0, [sp, #0x3]
;                             }
 800119a:      	ldrb.w	r0, [sp, #0x3]
 800119e:      	add	sp, #0x8
 80011a0:      	bx	lr

080011a2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf94b225bee08e152E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011a2:      	sub	sp, #0x8
 80011a4:      	movs	r0, #0xe
; gpio!([
 80011a6:      	strb.w	r0, [sp, #0x3]
;                             }
 80011aa:      	ldrb.w	r0, [sp, #0x3]
 80011ae:      	add	sp, #0x8
 80011b0:      	bx	lr

080011b2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hd5430db353d43c8fE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011b2:      	sub	sp, #0x8
 80011b4:      	movs	r0, #0xf
; gpio!([
 80011b6:      	strb.w	r0, [sp, #0x3]
;                             }
 80011ba:      	ldrb.w	r0, [sp, #0x3]
 80011be:      	add	sp, #0x8
 80011c0:      	bx	lr

080011c2 <<T as switch_hal::IntoSwitch>::into_switch::h4014a07e5ad5de17>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 80011c2:      	push	{r7, lr}
 80011c4:      	mov	r7, sp
 80011c6:      	sub	sp, #0x8
 80011c8:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 80011cc:      	bl	0x8000716 <switch_hal::Switch<IoPin,ActiveLevel>::new::hb5a8e1ab7618fbf8> @ imm = #-0xaba
 80011d0:      	str	r0, [sp]
 80011d2:      	b	0x80011d4 <<T as switch_hal::IntoSwitch>::into_switch::h4014a07e5ad5de17+0x12> @ imm = #-0x2
;     }
 80011d4:      	ldr	r0, [sp]
 80011d6:      	add	sp, #0x8
 80011d8:      	pop	{r7, pc}

080011da <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b>:
 80011da:      	sub	sp, #0x8
 80011dc:      	mov	r1, r0
 80011de:      	str	r1, [sp]
 80011e0:      	strb.w	r0, [sp, #0x6]
 80011e4:      	strb.w	r0, [sp, #0x7]
 80011e8:      	b	0x80011ea <<T as core::convert::Into<U>>::into::hb83c0d6a6d11393b+0x10> @ imm = #-0x2
 80011ea:      	ldr	r0, [sp]
 80011ec:      	add	sp, #0x8
 80011ee:      	bx	lr

080011f0 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4>:
 80011f0:      	sub	sp, #0x8
 80011f2:      	mov	r1, r0
 80011f4:      	str	r1, [sp]
 80011f6:      	strb.w	r0, [sp, #0x6]
 80011fa:      	strb.w	r0, [sp, #0x7]
 80011fe:      	b	0x8001200 <<T as core::convert::Into<U>>::into::h04f3b11dbb45a9a4+0x10> @ imm = #-0x2
 8001200:      	ldr	r0, [sp]
 8001202:      	and	r0, r0, #0x1
 8001206:      	add	sp, #0x8
 8001208:      	bx	lr

0800120a <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c>:
;         cortex_m::interrupt::free(|_| {
 800120a:      	push	{r7, lr}
 800120c:      	mov	r7, sp
 800120e:      	sub	sp, #0x10
 8001210:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 8001212:      	movw	r0, #0x0
 8001216:      	movt	r0, #0x2000
 800121a:      	ldrb	r0, [r0]
 800121c:      	lsls	r0, r0, #0x1f
 800121e:      	cbnz	r0, 0x8001228 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c+0x1e> @ imm = #0x6
 8001220:      	b	0x8001222 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 8001222:      	bl	0x8001270 <stm32f3::stm32f303::Peripherals::steal::h7c9a29ba0a6a35ee> @ imm = #0x4a
 8001226:      	b	0x8001238 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c+0x2e> @ imm = #0xe
 8001228:      	movs	r0, #0x0
;                 None
 800122a:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 800122e:      	b	0x8001230 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c+0x26> @ imm = #-0x2
;         })
 8001230:      	ldrb	r0, [r7, #-9]
 8001234:      	add	sp, #0x10
 8001236:      	pop	{r7, pc}
 8001238:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 800123a:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 800123e:      	b	0x8001230 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h664339d0307df39c+0x26> @ imm = #-0x12

08001240 <cortex_m::interrupt::enable::h5ebb9e31e79abd7f>:
; pub unsafe fn enable() {
 8001240:      	push	{r7, lr}
 8001242:      	mov	r7, sp
;     call_asm!(__cpsie());
 8001244:      	bl	0x80018e0 <__cpsie>     @ imm = #0x698
 8001248:      	b	0x800124a <cortex_m::interrupt::enable::h5ebb9e31e79abd7f+0xa> @ imm = #-0x2
; }
 800124a:      	pop	{r7, pc}

0800124c <cortex_m::interrupt::disable::h6ee0b8dbef8a1aa0>:
; pub fn disable() {
 800124c:      	push	{r7, lr}
 800124e:      	mov	r7, sp
;     call_asm!(__cpsid());
 8001250:      	bl	0x80018dc <__cpsid>     @ imm = #0x688
 8001254:      	b	0x8001256 <cortex_m::interrupt::disable::h6ee0b8dbef8a1aa0+0xa> @ imm = #-0x2
; }
 8001256:      	pop	{r7, pc}

08001258 <stm32f3::stm32f303::Peripherals::take::ha1cd80b3e5ef710e>:
;     pub fn take() -> Option<Self> {
 8001258:      	push	{r7, lr}
 800125a:      	mov	r7, sp
 800125c:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 800125e:      	bl	0x8000510 <cortex_m::interrupt::free::h547b8d4a7a18769c> @ imm = #-0xd52
 8001262:      	str	r0, [sp, #0x4]
 8001264:      	b	0x8001266 <stm32f3::stm32f303::Peripherals::take::ha1cd80b3e5ef710e+0xe> @ imm = #-0x2
;     }
 8001266:      	ldr	r0, [sp, #0x4]
 8001268:      	and	r0, r0, #0x1
 800126c:      	add	sp, #0x8
 800126e:      	pop	{r7, pc}

08001270 <stm32f3::stm32f303::Peripherals::steal::h7c9a29ba0a6a35ee>:
;         DEVICE_PERIPHERALS = true;
 8001270:      	movw	r1, #0x0
 8001274:      	movt	r1, #0x2000
 8001278:      	movs	r0, #0x1
 800127a:      	strb	r0, [r1]
;     }
 800127c:      	bx	lr

0800127e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd2183c427daec20dE>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800127e:      	sub	sp, #0x24
 8001280:      	str	r0, [sp, #0x8]
 8001282:      	str	r1, [sp, #0xc]
 8001284:      	str	r1, [sp, #0x14]
;         IOPEEN_W { w: self }
 8001286:      	str	r1, [sp, #0x10]
;     }
 8001288:      	ldr	r0, [sp, #0x10]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800128a:      	str	r0, [sp]
 800128c:      	b	0x800128e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd2183c427daec20dE+0x10> @ imm = #-0x2
 800128e:      	ldr	r1, [sp]
 8001290:      	str	r1, [sp, #0x18]
 8001292:      	str	r1, [sp, #0x1c]
 8001294:      	movs	r0, #0x1
 8001296:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800129a:      	ldr	r0, [r1]
 800129c:      	orr	r0, r0, #0x200000
 80012a0:      	str	r0, [r1]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80012a2:      	b	0x80012a4 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd2183c427daec20dE+0x26> @ imm = #-0x2
 80012a4:      	ldr	r0, [sp]
 80012a6:      	add	sp, #0x24
 80012a8:      	bx	lr

080012aa <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h1f1b486039909a9fE>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80012aa:      	sub	sp, #0x24
 80012ac:      	str	r0, [sp, #0x8]
 80012ae:      	str	r1, [sp, #0xc]
 80012b0:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 80012b2:      	str	r1, [sp, #0x10]
;     }
 80012b4:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80012b6:      	str	r0, [sp]
 80012b8:      	b	0x80012ba <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h1f1b486039909a9fE+0x10> @ imm = #-0x2
 80012ba:      	ldr	r1, [sp]
 80012bc:      	str	r1, [sp, #0x18]
 80012be:      	str	r1, [sp, #0x1c]
 80012c0:      	movs	r0, #0x1
 80012c2:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80012c6:      	ldr	r0, [r1]
 80012c8:      	orr	r0, r0, #0x200000
 80012cc:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80012ce:      	b	0x80012d0 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h1f1b486039909a9fE+0x26> @ imm = #-0x2
 80012d0:      	ldr	r0, [sp]
 80012d2:      	add	sp, #0x24
 80012d4:      	bx	lr

080012d6 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h965c9843930fb94aE>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80012d6:      	sub	sp, #0x24
 80012d8:      	str	r0, [sp, #0x8]
 80012da:      	str	r1, [sp, #0xc]
 80012dc:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 80012de:      	str	r1, [sp, #0x10]
;     }
 80012e0:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80012e2:      	str	r0, [sp]
 80012e4:      	b	0x80012e6 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h965c9843930fb94aE+0x10> @ imm = #-0x2
 80012e6:      	ldr	r1, [sp]
 80012e8:      	str	r1, [sp, #0x18]
 80012ea:      	str	r1, [sp, #0x1c]
 80012ec:      	movs	r0, #0x0
 80012ee:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80012f2:      	ldr	r0, [r1]
 80012f4:      	bic	r0, r0, #0x200000
 80012f8:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80012fa:      	b	0x80012fc <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h965c9843930fb94aE+0x26> @ imm = #-0x2
 80012fc:      	ldr	r0, [sp]
 80012fe:      	add	sp, #0x24
 8001300:      	bx	lr

08001302 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 8001302:      	sub	sp, #0x4
 8001304:      	str	r0, [sp]
; gpio!([
 8001306:      	b	0x8001308 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h0cca190fd5fe10ec+0x6> @ imm = #-0x2
 8001308:      	movw	r0, #0x1000
 800130c:      	movt	r0, #0x4800
;                         }
 8001310:      	add	sp, #0x4
 8001312:      	bx	lr

08001314 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 8001314:      	sub	sp, #0x4
 8001316:      	str	r0, [sp]
; gpio!([
 8001318:      	b	0x800131a <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h7f8e2b6edc673bfa+0x6> @ imm = #-0x2
 800131a:      	movw	r0, #0x1004
 800131e:      	movt	r0, #0x4800
;                         }
 8001322:      	add	sp, #0x4
 8001324:      	bx	lr

08001326 <<bool as core::default::Default>::default::ha1a330ff7e63fd83>:
 8001326:      	movs	r0, #0x0
 8001328:      	bx	lr

0800132a <<core::option::Option<T> as core::default::Default>::default::h1843217b67783acc>:
 800132a:      	sub	sp, #0x8
 800132c:      	movs	r0, #0x0
 800132e:      	str	r0, [sp]
 8001330:      	ldr	r0, [sp]
 8001332:      	ldr	r1, [sp, #0x4]
 8001334:      	add	sp, #0x8
 8001336:      	bx	lr

08001338 <stm32f3xx_hal::rcc::AHB::enr::h75cc51885a573a27>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 8001338:      	sub	sp, #0x4
 800133a:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbenr }
 800133c:      	b	0x800133e <stm32f3xx_hal::rcc::AHB::enr::h75cc51885a573a27+0x6> @ imm = #-0x2
 800133e:      	movw	r0, #0x1014
 8001342:      	movt	r0, #0x4002
;     }
 8001346:      	add	sp, #0x4
 8001348:      	bx	lr

0800134a <stm32f3xx_hal::rcc::AHB::rstr::hc818377e3bfe9f7a>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 800134a:      	sub	sp, #0x4
 800134c:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 800134e:      	b	0x8001350 <stm32f3xx_hal::rcc::AHB::rstr::hc818377e3bfe9f7a+0x6> @ imm = #-0x2
 8001350:      	movw	r0, #0x1028
 8001354:      	movt	r0, #0x4002
;     }
 8001358:      	add	sp, #0x4
 800135a:      	bx	lr

0800135c <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57>:
; #[derive(Default)]
 800135c:      	push	{r4, r5, r6, r7, lr}
 800135e:      	add	r7, sp, #0xc
 8001360:      	push.w	{r8, r9, r10, r11}
 8001364:      	sub	sp, #0x34
;     hse: Option<u32>,
 8001366:      	str	r0, [sp, #0x28]
 8001368:      	bl	0x800132a <<core::option::Option<T> as core::default::Default>::default::h1843217b67783acc> @ imm = #-0x42
 800136c:      	str	r0, [sp, #0x2c]
 800136e:      	str	r1, [sp, #0x30]
 8001370:      	b	0x8001372 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x16> @ imm = #-0x2
;     hse_bypass: bool,
 8001372:      	bl	0x8001326 <<bool as core::default::Default>::default::ha1a330ff7e63fd83> @ imm = #-0x50
 8001376:      	str	r0, [sp, #0x24]
 8001378:      	b	0x800137a <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x1e> @ imm = #-0x2
;     css: bool,
 800137a:      	bl	0x8001326 <<bool as core::default::Default>::default::ha1a330ff7e63fd83> @ imm = #-0x58
 800137e:      	str	r0, [sp, #0x20]
 8001380:      	b	0x8001382 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x26> @ imm = #-0x2
;     hclk: Option<u32>,
 8001382:      	bl	0x800132a <<core::option::Option<T> as core::default::Default>::default::h1843217b67783acc> @ imm = #-0x5c
 8001386:      	str	r0, [sp, #0x18]
 8001388:      	str	r1, [sp, #0x1c]
 800138a:      	b	0x800138c <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x30> @ imm = #-0x2
;     pclk1: Option<u32>,
 800138c:      	bl	0x800132a <<core::option::Option<T> as core::default::Default>::default::h1843217b67783acc> @ imm = #-0x66
 8001390:      	str	r0, [sp, #0x10]
 8001392:      	str	r1, [sp, #0x14]
 8001394:      	b	0x8001396 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x3a> @ imm = #-0x2
;     pclk2: Option<u32>,
 8001396:      	bl	0x800132a <<core::option::Option<T> as core::default::Default>::default::h1843217b67783acc> @ imm = #-0x70
 800139a:      	str	r0, [sp, #0x8]
 800139c:      	str	r1, [sp, #0xc]
 800139e:      	b	0x80013a0 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x44> @ imm = #-0x2
;     sysclk: Option<u32>,
 80013a0:      	bl	0x800132a <<core::option::Option<T> as core::default::Default>::default::h1843217b67783acc> @ imm = #-0x7a
 80013a4:      	str	r0, [sp]
 80013a6:      	str	r1, [sp, #0x4]
 80013a8:      	b	0x80013aa <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57+0x4e> @ imm = #-0x2
; #[derive(Default)]
 80013aa:      	ldr	r0, [sp, #0x4]
 80013ac:      	ldr	r1, [sp, #0x28]
 80013ae:      	ldr	r2, [sp]
 80013b0:      	ldr	r3, [sp, #0xc]
 80013b2:      	ldr.w	r12, [sp, #0x8]
 80013b6:      	ldr.w	lr, [sp, #0x14]
 80013ba:      	ldr	r4, [sp, #0x10]
 80013bc:      	ldr	r5, [sp, #0x1c]
 80013be:      	ldr	r6, [sp, #0x18]
 80013c0:      	ldr.w	r8, [sp, #0x20]
 80013c4:      	ldr.w	r9, [sp, #0x24]
 80013c8:      	ldr.w	r10, [sp, #0x30]
 80013cc:      	ldr.w	r11, [sp, #0x2c]
 80013d0:      	str.w	r11, [r1]
 80013d4:      	str.w	r10, [r1, #0x4]
 80013d8:      	and	r9, r9, #0x1
 80013dc:      	strb.w	r9, [r1, #0x28]
 80013e0:      	and	r8, r8, #0x1
 80013e4:      	strb.w	r8, [r1, #0x29]
 80013e8:      	str	r6, [r1, #0x8]
 80013ea:      	str	r5, [r1, #0xc]
 80013ec:      	str	r4, [r1, #0x10]
 80013ee:      	str.w	lr, [r1, #0x14]
 80013f2:      	str.w	r12, [r1, #0x18]
 80013f6:      	str	r3, [r1, #0x1c]
 80013f8:      	str	r2, [r1, #0x20]
 80013fa:      	str	r0, [r1, #0x24]
 80013fc:      	add	sp, #0x34
 80013fe:      	pop.w	{r8, r9, r10, r11}
 8001402:      	pop	{r4, r5, r6, r7, pc}

08001404 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h78eeab239fe13315>:
;     fn constrain(self) -> Rcc {
 8001404:      	push	{r4, r5, r7, lr}
 8001406:      	add	r7, sp, #0x8
 8001408:      	sub	sp, #0x38
;             cfgr: CFGR::default(),
 800140a:      	str	r0, [sp, #0x4]
 800140c:      	add	r0, sp, #0x8
 800140e:      	bl	0x800135c <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h020d683cf25bec57> @ imm = #-0xb6
 8001412:      	b	0x8001414 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h78eeab239fe13315+0x10> @ imm = #-0x2
 8001414:      	ldr	r0, [sp, #0x4]
 8001416:      	add	r1, sp, #0x8
;         Rcc {
 8001418:      	ldm.w	r1!, {r2, r3, r4, r12, lr}
 800141c:      	stm.w	r0!, {r2, r3, r4, r12, lr}
 8001420:      	ldm.w	r1, {r2, r3, r4, r5, r12, lr}
 8001424:      	stm.w	r0, {r2, r3, r4, r5, r12, lr}
;     }
 8001428:      	add	sp, #0x38
 800142a:      	pop	{r4, r5, r7, pc}

0800142c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 800142c:      	push	{r7, lr}
 800142e:      	mov	r7, sp
 8001430:      	sub	sp, #0xa0
 8001432:      	str	r0, [sp, #0xc]
 8001434:      	str	r0, [sp, #0x18]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001436:      	bl	0x8001338 <stm32f3xx_hal::rcc::AHB::enr::h75cc51885a573a27> @ imm = #-0x102
 800143a:      	str	r0, [sp, #0x10]
 800143c:      	b	0x800143e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E+0x12> @ imm = #-0x2
 800143e:      	ldr	r0, [sp, #0x10]
 8001440:      	str	r0, [sp, #0x2c]
 8001442:      	str	r0, [sp, #0x34]
 8001444:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001446:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x2e4
;         let bits = self.register.get();
 800144a:      	str	r0, [sp, #0x30]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800144c:      	str	r0, [sp, #0x24]
 800144e:      	str	r0, [sp, #0x28]
 8001450:      	add	r0, sp, #0x24
 8001452:      	str	r0, [sp, #0x1c]
 8001454:      	add	r0, sp, #0x28
 8001456:      	str	r0, [sp, #0x20]
 8001458:      	ldr	r0, [sp, #0x1c]
 800145a:      	ldr	r1, [sp, #0x20]
 800145c:      	bl	0x800127e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd2183c427daec20dE> @ imm = #-0x1e2
 8001460:      	mov	r1, r0
 8001462:      	ldr	r0, [sp, #0x10]
 8001464:      	ldr	r1, [r1]
 8001466:      	str	r0, [sp, #0x3c]
 8001468:      	str	r1, [sp, #0x40]
 800146a:      	str	r0, [sp, #0x44]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800146c:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x1ea
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001470:      	b	0x8001472 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E+0x46> @ imm = #-0x2
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001472:      	ldr	r0, [sp, #0xc]
 8001474:      	bl	0x800134a <stm32f3xx_hal::rcc::AHB::rstr::hc818377e3bfe9f7a> @ imm = #-0x12e
 8001478:      	str	r0, [sp, #0x8]
 800147a:      	b	0x800147c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E+0x50> @ imm = #-0x2
 800147c:      	ldr	r0, [sp, #0x8]
 800147e:      	str	r0, [sp, #0x58]
 8001480:      	str	r0, [sp, #0x60]
 8001482:      	str	r0, [sp, #0x64]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001484:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x2a6
;         let bits = self.register.get();
 8001488:      	str	r0, [sp, #0x5c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800148a:      	str	r0, [sp, #0x50]
 800148c:      	str	r0, [sp, #0x54]
 800148e:      	add	r0, sp, #0x50
 8001490:      	str	r0, [sp, #0x48]
 8001492:      	add	r0, sp, #0x54
 8001494:      	str	r0, [sp, #0x4c]
 8001496:      	ldr	r0, [sp, #0x48]
 8001498:      	ldr	r1, [sp, #0x4c]
 800149a:      	bl	0x80012aa <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h1f1b486039909a9fE> @ imm = #-0x1f4
 800149e:      	mov	r1, r0
 80014a0:      	ldr	r0, [sp, #0x8]
 80014a2:      	ldr	r1, [r1]
 80014a4:      	str	r0, [sp, #0x68]
 80014a6:      	str	r1, [sp, #0x6c]
 80014a8:      	str	r0, [sp, #0x70]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80014aa:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x1ac
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80014ae:      	b	0x80014b0 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E+0x84> @ imm = #-0x2
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014b0:      	ldr	r0, [sp, #0xc]
 80014b2:      	bl	0x800134a <stm32f3xx_hal::rcc::AHB::rstr::hc818377e3bfe9f7a> @ imm = #-0x16c
 80014b6:      	str	r0, [sp, #0x4]
 80014b8:      	b	0x80014ba <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E+0x8e> @ imm = #-0x2
 80014ba:      	ldr	r0, [sp, #0x4]
 80014bc:      	str	r0, [sp, #0x84]
 80014be:      	str	r0, [sp, #0x8c]
 80014c0:      	str	r0, [sp, #0x90]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80014c2:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0x268
;         let bits = self.register.get();
 80014c6:      	str	r0, [sp, #0x88]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80014c8:      	str	r0, [sp, #0x7c]
 80014ca:      	str	r0, [sp, #0x80]
 80014cc:      	add	r0, sp, #0x7c
 80014ce:      	str	r0, [sp, #0x74]
 80014d0:      	add	r0, sp, #0x80
 80014d2:      	str	r0, [sp, #0x78]
 80014d4:      	ldr	r0, [sp, #0x74]
 80014d6:      	ldr	r1, [sp, #0x78]
 80014d8:      	bl	0x80012d6 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h965c9843930fb94aE> @ imm = #-0x206
 80014dc:      	mov	r1, r0
 80014de:      	ldr	r0, [sp, #0x4]
 80014e0:      	ldr	r1, [r1]
 80014e2:      	str	r0, [sp, #0x94]
 80014e4:      	str	r1, [sp, #0x98]
 80014e6:      	str	r0, [sp, #0x9c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80014e8:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x16e
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014ec:      	b	0x80014ee <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h180d34375ba60239E+0xc2> @ imm = #-0x2
;                         }
 80014ee:      	add	sp, #0xa0
 80014f0:      	pop	{r7, pc}

080014f2 <ResetTrampoline>:
;             fn trampoline() -> ! {
 80014f2:      	push	{r7, lr}
 80014f4:      	mov	r7, sp
;                 unsafe { main() }
 80014f6:      	bl	0x80001ec <main>        @ imm = #-0x130e
 80014fa:      	trap

080014fc <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 80014fc:      	push	{r7, lr}
 80014fe:      	mov	r7, sp
 8001500:      	sub	sp, #0x8
 8001502:      	b	0x8001504 <WWDG+0x8>    @ imm = #-0x2
 8001504:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8001506:      	strb	r0, [r7, #-1]
 800150a:      	ldrb	r0, [r7, #-1]
 800150e:      	bl	0x8001618 <core::sync::atomic::compiler_fence::hc68a20670b780be0> @ imm = #0x106
 8001512:      	b	0x8001504 <WWDG+0x8>    @ imm = #-0x12

08001514 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 8001514:      	bx	lr

08001516 <r0::zero_bss::h0ef497cc6f05d0f8>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 8001516:      	push	{r7, lr}
 8001518:      	mov	r7, sp
 800151a:      	sub	sp, #0x30
 800151c:      	str	r1, [sp, #0x10]
 800151e:      	str	r0, [sp, #0x14]
 8001520:      	str	r1, [sp, #0x18]
 8001522:      	b	0x8001524 <r0::zero_bss::h0ef497cc6f05d0f8+0xe> @ imm = #-0x2
;     while sbss < ebss {
 8001524:      	ldr	r1, [sp, #0x10]
 8001526:      	ldr	r0, [sp, #0x14]
 8001528:      	cmp	r0, r1
 800152a:      	blo	0x8001532 <r0::zero_bss::h0ef497cc6f05d0f8+0x1c> @ imm = #0x4
 800152c:      	b	0x800152e <r0::zero_bss::h0ef497cc6f05d0f8+0x18> @ imm = #-0x2
; }
 800152e:      	add	sp, #0x30
 8001530:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 8001532:      	ldr	r0, [sp, #0x14]
 8001534:      	str	r0, [sp, #0x8]
 8001536:      	bl	0x80015ca <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hba61056092731a06> @ imm = #0x90
 800153a:      	mov	r1, r0
 800153c:      	str	r1, [sp, #0xc]
 800153e:      	str	r0, [sp, #0x1c]
 8001540:      	str	r0, [sp, #0x20]
;         ptr::write_volatile(sbss, mem::zeroed());
 8001542:      	b	0x8001544 <r0::zero_bss::h0ef497cc6f05d0f8+0x2e> @ imm = #-0x2
 8001544:      	ldr	r1, [sp, #0xc]
 8001546:      	ldr	r0, [sp, #0x8]
 8001548:      	bl	0x800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9> @ imm = #0x10e
 800154c:      	b	0x800154e <r0::zero_bss::h0ef497cc6f05d0f8+0x38> @ imm = #-0x2
;         sbss = sbss.offset(1);
 800154e:      	ldr	r0, [sp, #0x14]
 8001550:      	str	r0, [sp, #0x24]
 8001552:      	movs	r1, #0x1
 8001554:      	str	r1, [sp, #0x28]
 8001556:      	adds	r0, #0x4
 8001558:      	str	r0, [sp, #0x2c]
 800155a:      	ldr	r0, [sp, #0x2c]
;         sbss = sbss.offset(1);
 800155c:      	str	r0, [sp, #0x4]
 800155e:      	b	0x8001560 <r0::zero_bss::h0ef497cc6f05d0f8+0x4a> @ imm = #-0x2
 8001560:      	ldr	r0, [sp, #0x4]
 8001562:      	str	r0, [sp, #0x14]
;     while sbss < ebss {
 8001564:      	b	0x8001524 <r0::zero_bss::h0ef497cc6f05d0f8+0xe> @ imm = #-0x44

08001566 <r0::init_data::he7faf1d919bf2ba2>:
; pub unsafe fn init_data<T>(
 8001566:      	push	{r7, lr}
 8001568:      	mov	r7, sp
 800156a:      	sub	sp, #0x38
 800156c:      	str	r1, [sp, #0x10]
 800156e:      	str	r0, [sp, #0x14]
 8001570:      	str	r2, [sp, #0x18]
 8001572:      	str	r1, [sp, #0x1c]
 8001574:      	b	0x8001576 <r0::init_data::he7faf1d919bf2ba2+0x10> @ imm = #-0x2
;     while sdata < edata {
 8001576:      	ldr	r1, [sp, #0x10]
 8001578:      	ldr	r0, [sp, #0x14]
 800157a:      	cmp	r0, r1
 800157c:      	blo	0x8001584 <r0::init_data::he7faf1d919bf2ba2+0x1e> @ imm = #0x4
 800157e:      	b	0x8001580 <r0::init_data::he7faf1d919bf2ba2+0x1a> @ imm = #-0x2
; }
 8001580:      	add	sp, #0x38
 8001582:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 8001584:      	ldr	r0, [sp, #0x14]
 8001586:      	str	r0, [sp, #0x8]
 8001588:      	ldr	r0, [sp, #0x18]
 800158a:      	bl	0x8001668 <core::ptr::read::h44137eda216822d5> @ imm = #0xda
 800158e:      	str	r0, [sp, #0xc]
 8001590:      	b	0x8001592 <r0::init_data::he7faf1d919bf2ba2+0x2c> @ imm = #-0x2
 8001592:      	ldr	r1, [sp, #0xc]
 8001594:      	ldr	r0, [sp, #0x8]
 8001596:      	bl	0x8001690 <core::ptr::write::h868da5c33d1fc528> @ imm = #0xf6
 800159a:      	b	0x800159c <r0::init_data::he7faf1d919bf2ba2+0x36> @ imm = #-0x2
;         sdata = sdata.offset(1);
 800159c:      	ldr	r0, [sp, #0x14]
 800159e:      	str	r0, [sp, #0x20]
 80015a0:      	movs	r1, #0x1
 80015a2:      	str	r1, [sp, #0x24]
 80015a4:      	adds	r0, #0x4
 80015a6:      	str	r0, [sp, #0x28]
 80015a8:      	ldr	r0, [sp, #0x28]
;         sdata = sdata.offset(1);
 80015aa:      	str	r0, [sp, #0x4]
 80015ac:      	b	0x80015ae <r0::init_data::he7faf1d919bf2ba2+0x48> @ imm = #-0x2
 80015ae:      	ldr	r0, [sp, #0x4]
 80015b0:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 80015b2:      	ldr	r0, [sp, #0x18]
 80015b4:      	str	r0, [sp, #0x2c]
 80015b6:      	movs	r1, #0x1
 80015b8:      	str	r1, [sp, #0x30]
 80015ba:      	adds	r0, #0x4
 80015bc:      	str	r0, [sp, #0x34]
 80015be:      	ldr	r0, [sp, #0x34]
;         sidata = sidata.offset(1);
 80015c0:      	str	r0, [sp]
 80015c2:      	b	0x80015c4 <r0::init_data::he7faf1d919bf2ba2+0x5e> @ imm = #-0x2
 80015c4:      	ldr	r0, [sp]
 80015c6:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 80015c8:      	b	0x8001576 <r0::init_data::he7faf1d919bf2ba2+0x10> @ imm = #-0x56

080015ca <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hba61056092731a06>:
 80015ca:      	push	{r7, lr}
 80015cc:      	mov	r7, sp
 80015ce:      	sub	sp, #0x18
 80015d0:      	ldr	r0, [sp, #0x4]
 80015d2:      	str	r0, [sp]
 80015d4:      	b	0x80015d6 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hba61056092731a06+0xc> @ imm = #-0x2
 80015d6:      	mov	r0, sp
 80015d8:      	str	r0, [sp, #0x14]
 80015da:      	b	0x80015dc <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hba61056092731a06+0x12> @ imm = #-0x2
 80015dc:      	mov	r0, sp
 80015de:      	str	r0, [sp, #0x8]
 80015e0:      	movs	r1, #0x0
 80015e2:      	strb	r1, [r7, #-9]
 80015e6:      	movs	r2, #0x1
 80015e8:      	str	r2, [sp, #0x10]
 80015ea:      	bl	0x80015f6 <core::intrinsics::write_bytes::h69586e274be20692> @ imm = #0x8
 80015ee:      	b	0x80015f0 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hba61056092731a06+0x26> @ imm = #-0x2
 80015f0:      	ldr	r0, [sp]
 80015f2:      	add	sp, #0x18
 80015f4:      	pop	{r7, pc}

080015f6 <core::intrinsics::write_bytes::h69586e274be20692>:
 80015f6:      	push	{r7, lr}
 80015f8:      	mov	r7, sp
 80015fa:      	sub	sp, #0x10
 80015fc:      	str	r2, [sp]
 80015fe:      	mov	r2, r1
 8001600:      	ldr	r1, [sp]
 8001602:      	str	r0, [sp, #0x4]
 8001604:      	strb	r2, [r7, #-5]
 8001608:      	str	r1, [sp, #0xc]
 800160a:      	lsls	r1, r1, #0x2
 800160c:      	uxtb	r2, r2
 800160e:      	bl	0x8003072 <__aeabi_memset4> @ imm = #0x1a60
 8001612:      	b	0x8001614 <core::intrinsics::write_bytes::h69586e274be20692+0x1e> @ imm = #-0x2
 8001614:      	add	sp, #0x10
 8001616:      	pop	{r7, pc}

08001618 <core::sync::atomic::compiler_fence::hc68a20670b780be0>:
 8001618:      	push	{r7, lr}
 800161a:      	mov	r7, sp
 800161c:      	sub	sp, #0x8
 800161e:      	strb	r0, [r7, #-1]
 8001622:      	ldrb	r0, [r7, #-1]
 8001626:      	str	r0, [sp]
 8001628:      	ldr	r1, [sp]
 800162a:      	tbb	[pc, r1]

0800162e <$d.1>:
 800162e:	04 10 11 12	.word	0x12111004
 8001632:	13 00		.short	0x0013

08001634 <$t.2>:
 8001634:      	trap
 8001636:      	movw	r0, #0x3253
 800163a:      	movt	r0, #0x800
 800163e:      	movw	r2, #0x32d4
 8001642:      	movt	r2, #0x800
 8001646:      	movs	r1, #0x32
 8001648:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #0x3ac
 800164c:      	trap
 800164e:      	b	0x8001656 <$t.2+0x22>   @ imm = #0x4
 8001650:      	b	0x8001656 <$t.2+0x22>   @ imm = #0x2
 8001652:      	b	0x8001656 <$t.2+0x22>   @ imm = #0x0
 8001654:      	b	0x8001656 <$t.2+0x22>   @ imm = #-0x2
 8001656:      	add	sp, #0x8
 8001658:      	pop	{r7, pc}

0800165a <core::ptr::write_volatile::hcb3f1060eb0edcc9>:
 800165a:      	sub	sp, #0x8
 800165c:      	str	r0, [sp]
 800165e:      	str	r1, [sp, #0x4]
 8001660:      	str	r1, [r0]
 8001662:      	b	0x8001664 <core::ptr::write_volatile::hcb3f1060eb0edcc9+0xa> @ imm = #-0x2
 8001664:      	add	sp, #0x8
 8001666:      	bx	lr

08001668 <core::ptr::read::h44137eda216822d5>:
 8001668:      	sub	sp, #0x20
 800166a:      	str	r0, [sp, #0x4]
 800166c:      	str	r0, [sp, #0xc]
 800166e:      	ldr	r0, [sp, #0x10]
 8001670:      	str	r0, [sp, #0x8]
 8001672:      	b	0x8001674 <core::ptr::read::h44137eda216822d5+0xc> @ imm = #-0x2
 8001674:      	add	r0, sp, #0x8
 8001676:      	str	r0, [sp, #0x1c]
 8001678:      	b	0x800167a <core::ptr::read::h44137eda216822d5+0x12> @ imm = #-0x2
 800167a:      	ldr	r0, [sp, #0x4]
 800167c:      	ldr	r0, [r0]
 800167e:      	str	r0, [sp, #0x8]
 8001680:      	ldr	r0, [sp, #0x8]
 8001682:      	str	r0, [sp]
 8001684:      	str	r0, [sp, #0x14]
 8001686:      	str	r0, [sp, #0x18]
 8001688:      	b	0x800168a <core::ptr::read::h44137eda216822d5+0x22> @ imm = #-0x2
 800168a:      	ldr	r0, [sp]
 800168c:      	add	sp, #0x20
 800168e:      	bx	lr

08001690 <core::ptr::write::h868da5c33d1fc528>:
 8001690:      	sub	sp, #0xc
 8001692:      	str	r1, [sp]
 8001694:      	mov	r1, r0
 8001696:      	ldr	r0, [sp]
 8001698:      	str	r0, [sp, #0x4]
 800169a:      	str	r1, [sp, #0x8]
 800169c:      	ldr	r0, [sp, #0x4]
 800169e:      	str	r0, [r1]
 80016a0:      	add	sp, #0xc
 80016a2:      	bx	lr

080016a4 <cortex_m::peripheral::itm::Stim::write_u8::h2efcf9c5c3a4b77f>:
;     pub fn write_u8(&mut self, value: u8) {
 80016a4:      	push	{r7, lr}
 80016a6:      	mov	r7, sp
 80016a8:      	sub	sp, #0x18
 80016aa:      	str	r0, [sp, #0x4]
 80016ac:      	mov	r2, r1
 80016ae:      	str	r2, [sp, #0x8]
 80016b0:      	str	r0, [sp, #0xc]
 80016b2:      	strb	r1, [r7, #-5]
 80016b6:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 80016b8:      	b	0x80016ba <cortex_m::peripheral::itm::Stim::write_u8::h2efcf9c5c3a4b77f+0x16> @ imm = #-0x2
 80016ba:      	ldr	r1, [sp, #0x8]
 80016bc:      	ldr	r0, [sp, #0x4]
 80016be:      	bl	0x8001752 <core::ptr::write_volatile::h12a565a49b93e4b9> @ imm = #0x90
 80016c2:      	b	0x80016c4 <cortex_m::peripheral::itm::Stim::write_u8::h2efcf9c5c3a4b77f+0x20> @ imm = #-0x2
;     }
 80016c4:      	add	sp, #0x18
 80016c6:      	pop	{r7, pc}

080016c8 <cortex_m::peripheral::itm::Stim::write_u16::ha042c5773c803306>:
;     pub fn write_u16(&mut self, value: u16) {
 80016c8:      	push	{r7, lr}
 80016ca:      	mov	r7, sp
 80016cc:      	sub	sp, #0x18
 80016ce:      	str	r0, [sp, #0x4]
 80016d0:      	mov	r2, r1
 80016d2:      	str	r2, [sp, #0x8]
 80016d4:      	str	r0, [sp, #0xc]
 80016d6:      	strh	r1, [r7, #-6]
 80016da:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 80016dc:      	b	0x80016de <cortex_m::peripheral::itm::Stim::write_u16::ha042c5773c803306+0x16> @ imm = #-0x2
 80016de:      	ldr	r1, [sp, #0x8]
 80016e0:      	ldr	r0, [sp, #0x4]
 80016e2:      	bl	0x8001742 <core::ptr::write_volatile::h073a9b3c58a49cf9> @ imm = #0x5c
 80016e6:      	b	0x80016e8 <cortex_m::peripheral::itm::Stim::write_u16::ha042c5773c803306+0x20> @ imm = #-0x2
;     }
 80016e8:      	add	sp, #0x18
 80016ea:      	pop	{r7, pc}

080016ec <cortex_m::peripheral::itm::Stim::write_u32::h6a6807475e0052ab>:
;     pub fn write_u32(&mut self, value: u32) {
 80016ec:      	push	{r7, lr}
 80016ee:      	mov	r7, sp
 80016f0:      	sub	sp, #0x18
 80016f2:      	str	r1, [sp, #0x4]
 80016f4:      	str	r0, [sp, #0x8]
 80016f6:      	str	r0, [sp, #0xc]
 80016f8:      	str	r1, [sp, #0x10]
 80016fa:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 80016fc:      	b	0x80016fe <cortex_m::peripheral::itm::Stim::write_u32::h6a6807475e0052ab+0x12> @ imm = #-0x2
 80016fe:      	ldr	r1, [sp, #0x4]
 8001700:      	ldr	r0, [sp, #0x8]
 8001702:      	bl	0x8001762 <core::ptr::write_volatile::haa68f0bd08500fd4> @ imm = #0x5c
 8001706:      	b	0x8001708 <cortex_m::peripheral::itm::Stim::write_u32::h6a6807475e0052ab+0x1c> @ imm = #-0x2
;     }
 8001708:      	add	sp, #0x18
 800170a:      	pop	{r7, pc}

0800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f>:
;     pub fn is_fifo_ready(&self) -> bool {
 800170c:      	push	{r7, lr}
 800170e:      	mov	r7, sp
 8001710:      	sub	sp, #0x10
 8001712:      	str	r0, [sp, #0x4]
 8001714:      	str	r0, [sp, #0x8]
 8001716:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 8001718:      	b	0x800171a <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f+0xe> @ imm = #-0x2
 800171a:      	ldr	r0, [sp, #0x4]
 800171c:      	bl	0x800172e <core::ptr::read_volatile::hbd37734c4583c5a3> @ imm = #0xe
 8001720:      	str	r0, [sp]
 8001722:      	b	0x8001724 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f+0x18> @ imm = #-0x2
;     }
 8001724:      	ldr	r0, [sp]
 8001726:      	and	r0, r0, #0x1
 800172a:      	add	sp, #0x10
 800172c:      	pop	{r7, pc}

0800172e <core::ptr::read_volatile::hbd37734c4583c5a3>:
 800172e:      	sub	sp, #0xc
 8001730:      	str	r0, [sp, #0x4]
 8001732:      	ldr	r0, [r0]
 8001734:      	str	r0, [sp, #0x8]
 8001736:      	ldr	r0, [sp, #0x8]
 8001738:      	str	r0, [sp]
 800173a:      	b	0x800173c <core::ptr::read_volatile::hbd37734c4583c5a3+0xe> @ imm = #-0x2
 800173c:      	ldr	r0, [sp]
 800173e:      	add	sp, #0xc
 8001740:      	bx	lr

08001742 <core::ptr::write_volatile::h073a9b3c58a49cf9>:
 8001742:      	sub	sp, #0x8
 8001744:      	str	r0, [sp]
 8001746:      	strh.w	r1, [sp, #0x6]
 800174a:      	strh	r1, [r0]
 800174c:      	b	0x800174e <core::ptr::write_volatile::h073a9b3c58a49cf9+0xc> @ imm = #-0x2
 800174e:      	add	sp, #0x8
 8001750:      	bx	lr

08001752 <core::ptr::write_volatile::h12a565a49b93e4b9>:
 8001752:      	sub	sp, #0x8
 8001754:      	str	r0, [sp]
 8001756:      	strb.w	r1, [sp, #0x7]
 800175a:      	strb	r1, [r0]
 800175c:      	b	0x800175e <core::ptr::write_volatile::h12a565a49b93e4b9+0xc> @ imm = #-0x2
 800175e:      	add	sp, #0x8
 8001760:      	bx	lr

08001762 <core::ptr::write_volatile::haa68f0bd08500fd4>:
 8001762:      	sub	sp, #0x8
 8001764:      	str	r0, [sp]
 8001766:      	str	r1, [sp, #0x4]
 8001768:      	str	r1, [r0]
 800176a:      	b	0x800176c <core::ptr::write_volatile::haa68f0bd08500fd4+0xa> @ imm = #-0x2
 800176c:      	add	sp, #0x8
 800176e:      	bx	lr

08001770 <core::ptr::slice_from_raw_parts::h88f03a50d8a546b7>:
 8001770:      	push	{r7, lr}
 8001772:      	mov	r7, sp
 8001774:      	sub	sp, #0x18
 8001776:      	str	r1, [sp, #0x8]
 8001778:      	str	r0, [sp, #0x10]
 800177a:      	str	r1, [sp, #0x14]
 800177c:      	bl	0x8001894 <core::ptr::const_ptr::<impl *const T>::cast::he465f1fd1e2f5b4b> @ imm = #0x114
 8001780:      	str	r0, [sp, #0xc]
 8001782:      	b	0x8001784 <core::ptr::slice_from_raw_parts::h88f03a50d8a546b7+0x14> @ imm = #-0x2
 8001784:      	ldr	r1, [sp, #0x8]
 8001786:      	ldr	r0, [sp, #0xc]
 8001788:      	bl	0x800187a <core::ptr::metadata::from_raw_parts::h590b34769052d329> @ imm = #0xee
 800178c:      	str	r0, [sp]
 800178e:      	str	r1, [sp, #0x4]
 8001790:      	b	0x8001792 <core::ptr::slice_from_raw_parts::h88f03a50d8a546b7+0x22> @ imm = #-0x2
 8001792:      	ldr	r1, [sp, #0x4]
 8001794:      	ldr	r0, [sp]
 8001796:      	add	sp, #0x18
 8001798:      	pop	{r7, pc}

0800179a <core::ptr::slice_from_raw_parts::h91657a55f1b935fa>:
 800179a:      	push	{r7, lr}
 800179c:      	mov	r7, sp
 800179e:      	sub	sp, #0x18
 80017a0:      	str	r1, [sp, #0x8]
 80017a2:      	str	r0, [sp, #0x10]
 80017a4:      	str	r1, [sp, #0x14]
 80017a6:      	bl	0x800189c <core::ptr::const_ptr::<impl *const T>::cast::hffefd838430ca209> @ imm = #0xf2
 80017aa:      	str	r0, [sp, #0xc]
 80017ac:      	b	0x80017ae <core::ptr::slice_from_raw_parts::h91657a55f1b935fa+0x14> @ imm = #-0x2
 80017ae:      	ldr	r1, [sp, #0x8]
 80017b0:      	ldr	r0, [sp, #0xc]
 80017b2:      	bl	0x8001860 <core::ptr::metadata::from_raw_parts::h14362e5a5156adb0> @ imm = #0xaa
 80017b6:      	str	r0, [sp]
 80017b8:      	str	r1, [sp, #0x4]
 80017ba:      	b	0x80017bc <core::ptr::slice_from_raw_parts::h91657a55f1b935fa+0x22> @ imm = #-0x2
 80017bc:      	ldr	r1, [sp, #0x4]
 80017be:      	ldr	r0, [sp]
 80017c0:      	add	sp, #0x18
 80017c2:      	pop	{r7, pc}

080017c4 <core::ptr::read::h09a838f1685a8af6>:
 80017c4:      	sub	sp, #0x20
 80017c6:      	str	r0, [sp, #0x4]
 80017c8:      	str	r0, [sp, #0xc]
 80017ca:      	ldr	r0, [sp, #0x10]
 80017cc:      	str	r0, [sp, #0x8]
 80017ce:      	b	0x80017d0 <core::ptr::read::h09a838f1685a8af6+0xc> @ imm = #-0x2
 80017d0:      	add	r0, sp, #0x8
 80017d2:      	str	r0, [sp, #0x1c]
 80017d4:      	b	0x80017d6 <core::ptr::read::h09a838f1685a8af6+0x12> @ imm = #-0x2
 80017d6:      	ldr	r0, [sp, #0x4]
 80017d8:      	ldr	r0, [r0]
 80017da:      	str	r0, [sp, #0x8]
 80017dc:      	ldr	r0, [sp, #0x8]
 80017de:      	str	r0, [sp]
 80017e0:      	str	r0, [sp, #0x14]
 80017e2:      	str	r0, [sp, #0x18]
 80017e4:      	b	0x80017e6 <core::ptr::read::h09a838f1685a8af6+0x22> @ imm = #-0x2
 80017e6:      	ldr	r0, [sp]
 80017e8:      	add	sp, #0x20
 80017ea:      	bx	lr

080017ec <core::ptr::read::h350af654f494a1a9>:
 80017ec:      	sub	sp, #0x1c
 80017ee:      	str	r0, [sp, #0x4]
 80017f0:      	str	r0, [sp, #0xc]
 80017f2:      	ldrh.w	r0, [sp, #0x12]
 80017f6:      	strh.w	r0, [sp, #0xa]
 80017fa:      	b	0x80017fc <core::ptr::read::h350af654f494a1a9+0x10> @ imm = #-0x2
 80017fc:      	add.w	r0, sp, #0xa
 8001800:      	str	r0, [sp, #0x18]
 8001802:      	b	0x8001804 <core::ptr::read::h350af654f494a1a9+0x18> @ imm = #-0x2
 8001804:      	ldr	r0, [sp, #0x4]
 8001806:      	ldrh	r0, [r0]
 8001808:      	strh.w	r0, [sp, #0xa]
 800180c:      	ldrh.w	r0, [sp, #0xa]
 8001810:      	mov	r1, r0
 8001812:      	str	r1, [sp]
 8001814:      	strh.w	r0, [sp, #0x14]
 8001818:      	strh.w	r0, [sp, #0x16]
 800181c:      	b	0x800181e <core::ptr::read::h350af654f494a1a9+0x32> @ imm = #-0x2
 800181e:      	ldr	r0, [sp]
 8001820:      	add	sp, #0x1c
 8001822:      	bx	lr

08001824 <core::ptr::read::h3b51a3e4213de25a>:
 8001824:      	sub	sp, #0x20
 8001826:      	str	r0, [sp, #0x4]
 8001828:      	str	r0, [sp, #0xc]
 800182a:      	ldr	r0, [sp, #0x10]
 800182c:      	str	r0, [sp, #0x8]
 800182e:      	b	0x8001830 <core::ptr::read::h3b51a3e4213de25a+0xc> @ imm = #-0x2
 8001830:      	add	r0, sp, #0x8
 8001832:      	str	r0, [sp, #0x1c]
 8001834:      	b	0x8001836 <core::ptr::read::h3b51a3e4213de25a+0x12> @ imm = #-0x2
 8001836:      	ldr	r0, [sp, #0x4]
 8001838:      	ldr	r0, [r0]
 800183a:      	str	r0, [sp, #0x8]
 800183c:      	ldr	r0, [sp, #0x8]
 800183e:      	str	r0, [sp]
 8001840:      	str	r0, [sp, #0x14]
 8001842:      	str	r0, [sp, #0x18]
 8001844:      	b	0x8001846 <core::ptr::read::h3b51a3e4213de25a+0x22> @ imm = #-0x2
 8001846:      	ldr	r0, [sp]
 8001848:      	add	sp, #0x20
 800184a:      	bx	lr

0800184c <core::ptr::write::h4d097dd63c367c95>:
 800184c:      	sub	sp, #0xc
 800184e:      	str	r1, [sp]
 8001850:      	mov	r1, r0
 8001852:      	ldr	r0, [sp]
 8001854:      	str	r0, [sp, #0x4]
 8001856:      	str	r1, [sp, #0x8]
 8001858:      	ldr	r0, [sp, #0x4]
 800185a:      	str	r0, [r1]
 800185c:      	add	sp, #0xc
 800185e:      	bx	lr

08001860 <core::ptr::metadata::from_raw_parts::h14362e5a5156adb0>:
 8001860:      	sub	sp, #0x18
 8001862:      	str	r0, [sp, #0x10]
 8001864:      	str	r1, [sp, #0x14]
 8001866:      	str	r0, [sp, #0x8]
 8001868:      	str	r1, [sp, #0xc]
 800186a:      	ldr	r1, [sp, #0x8]
 800186c:      	ldr	r0, [sp, #0xc]
 800186e:      	str	r1, [sp]
 8001870:      	str	r0, [sp, #0x4]
 8001872:      	ldr	r0, [sp]
 8001874:      	ldr	r1, [sp, #0x4]
 8001876:      	add	sp, #0x18
 8001878:      	bx	lr

0800187a <core::ptr::metadata::from_raw_parts::h590b34769052d329>:
 800187a:      	sub	sp, #0x18
 800187c:      	str	r0, [sp, #0x10]
 800187e:      	str	r1, [sp, #0x14]
 8001880:      	str	r0, [sp, #0x8]
 8001882:      	str	r1, [sp, #0xc]
 8001884:      	ldr	r1, [sp, #0x8]
 8001886:      	ldr	r0, [sp, #0xc]
 8001888:      	str	r1, [sp]
 800188a:      	str	r0, [sp, #0x4]
 800188c:      	ldr	r0, [sp]
 800188e:      	ldr	r1, [sp, #0x4]
 8001890:      	add	sp, #0x18
 8001892:      	bx	lr

08001894 <core::ptr::const_ptr::<impl *const T>::cast::he465f1fd1e2f5b4b>:
 8001894:      	sub	sp, #0x4
 8001896:      	str	r0, [sp]
 8001898:      	add	sp, #0x4
 800189a:      	bx	lr

0800189c <core::ptr::const_ptr::<impl *const T>::cast::hffefd838430ca209>:
 800189c:      	sub	sp, #0x4
 800189e:      	str	r0, [sp]
 80018a0:      	add	sp, #0x4
 80018a2:      	bx	lr

080018a4 <core::slice::raw::from_raw_parts::ha635cc54c58e7f47>:
 80018a4:      	push	{r7, lr}
 80018a6:      	mov	r7, sp
 80018a8:      	sub	sp, #0x10
 80018aa:      	str	r0, [sp, #0x8]
 80018ac:      	str	r1, [sp, #0xc]
 80018ae:      	bl	0x800179a <core::ptr::slice_from_raw_parts::h91657a55f1b935fa> @ imm = #-0x118
 80018b2:      	str	r0, [sp]
 80018b4:      	str	r1, [sp, #0x4]
 80018b6:      	b	0x80018b8 <core::slice::raw::from_raw_parts::ha635cc54c58e7f47+0x14> @ imm = #-0x2
 80018b8:      	ldr	r1, [sp, #0x4]
 80018ba:      	ldr	r0, [sp]
 80018bc:      	add	sp, #0x10
 80018be:      	pop	{r7, pc}

080018c0 <core::slice::raw::from_raw_parts::heec2fe6601638ee9>:
 80018c0:      	push	{r7, lr}
 80018c2:      	mov	r7, sp
 80018c4:      	sub	sp, #0x10
 80018c6:      	str	r0, [sp, #0x8]
 80018c8:      	str	r1, [sp, #0xc]
 80018ca:      	bl	0x8001770 <core::ptr::slice_from_raw_parts::h88f03a50d8a546b7> @ imm = #-0x15e
 80018ce:      	str	r0, [sp]
 80018d0:      	str	r1, [sp, #0x4]
 80018d2:      	b	0x80018d4 <core::slice::raw::from_raw_parts::heec2fe6601638ee9+0x14> @ imm = #-0x2
 80018d4:      	ldr	r1, [sp, #0x4]
 80018d6:      	ldr	r0, [sp]
 80018d8:      	add	sp, #0x10
 80018da:      	pop	{r7, pc}

080018dc <__cpsid>:
 80018dc:      	cpsid i
 80018de:      	bx	lr

080018e0 <__cpsie>:
 80018e0:      	cpsie i
 80018e2:      	bx	lr

080018e4 <__primask_r>:
 80018e4:      	mrs	r0, primask
 80018e8:      	bx	lr

080018ea <bare_metal::CriticalSection::new::h874bb208077575eb>:
;     }
 80018ea:      	bx	lr

080018ec <core::ops::function::FnOnce::call_once::h7de7ae07ef8ce8d2>:
 80018ec:      	ldr	r0, [r0]
 80018ee:      	b	0x80018ee <core::ops::function::FnOnce::call_once::h7de7ae07ef8ce8d2+0x2> @ imm = #-0x4

080018f0 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::hc177dce5192381b9>:
 80018f0:      	bx	lr

080018f2 <<T as core::any::Any>::type_id::h291bc4acd42b5a60>:
 80018f2:      	movw	r0, #0x8ef6
 80018f6:      	movw	r1, #0x799e
 80018fa:      	movt	r0, #0x50fd
 80018fe:      	movt	r1, #0xe3e6
 8001902:      	bx	lr

08001904 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c>:
 8001904:      	push	{r4, r5, r6, r7, lr}
 8001906:      	add	r7, sp, #0xc
 8001908:      	str	r8, [sp, #-4]!
 800190c:      	sub	sp, #0x38
 800190e:      	ldrd	r4, r5, [r1, #24]
 8001912:      	movw	r1, #0x3320
 8001916:      	ldr	r3, [r5, #0xc]
 8001918:      	mov	r8, r0
 800191a:      	movt	r1, #0x800
 800191e:      	movs	r2, #0xc
 8001920:      	mov	r0, r4
 8001922:      	blx	r3
 8001924:      	cbz	r0, 0x8001932 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c+0x2e> @ imm = #0xa
 8001926:      	movs	r6, #0x1
 8001928:      	mov	r0, r6
 800192a:      	add	sp, #0x38
 800192c:      	ldr	r8, [sp], #4
 8001930:      	pop	{r4, r5, r6, r7, pc}
 8001932:      	ldr.w	r0, [r8, #0x8]
 8001936:      	cbz	r0, 0x8001944 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c+0x40> @ imm = #0xa
 8001938:      	str	r0, [sp, #0x4]
 800193a:      	movw	r0, #0x2479
 800193e:      	movt	r0, #0x800
 8001942:      	b	0x8001970 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c+0x6c> @ imm = #0x2a
 8001944:      	ldrd	r6, r0, [r8]
 8001948:      	ldr	r1, [r0, #0xc]
 800194a:      	mov	r0, r6
 800194c:      	blx	r1
 800194e:      	movw	r2, #0xa91e
 8001952:      	movt	r2, #0x7ef2
 8001956:      	eors	r1, r2
 8001958:      	movw	r2, #0xbcf4
 800195c:      	movt	r2, #0xecc7
 8001960:      	eors	r0, r2
 8001962:      	orrs	r0, r1
 8001964:      	bne	0x80019a0 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c+0x9c> @ imm = #0x38
 8001966:      	movw	r0, #0x246b
 800196a:      	str	r6, [sp, #0x4]
 800196c:      	movt	r0, #0x800
 8001970:      	str	r0, [sp, #0xc]
 8001972:      	add	r0, sp, #0x4
 8001974:      	str	r0, [sp, #0x8]
 8001976:      	add	r0, sp, #0x8
 8001978:      	str	r0, [sp, #0x30]
 800197a:      	movs	r0, #0x0
 800197c:      	str	r0, [sp, #0x2c]
 800197e:      	add	r2, sp, #0x20
 8001980:      	str	r0, [sp, #0x28]
 8001982:      	movs	r0, #0x2
 8001984:      	str	r0, [sp, #0x24]
 8001986:      	movw	r0, #0x3330
 800198a:      	movt	r0, #0x800
 800198e:      	movs	r6, #0x1
 8001990:      	str	r0, [sp, #0x20]
 8001992:      	mov	r0, r4
 8001994:      	mov	r1, r5
 8001996:      	str	r6, [sp, #0x34]
 8001998:      	bl	0x8001a4e <core::fmt::write::h706ba0ed69d89af5> @ imm = #0xb2
 800199c:      	cmp	r0, #0x0
 800199e:      	bne	0x8001928 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c+0x24> @ imm = #-0x7a
 80019a0:      	ldr.w	r0, [r8, #0xc]
 80019a4:      	movw	r1, #0x236f
 80019a8:      	movt	r1, #0x800
 80019ac:      	add.w	r2, r0, #0xc
 80019b0:      	str	r1, [sp, #0x1c]
 80019b2:      	strd	r1, r2, [sp, #20]
 80019b6:      	add.w	r1, r0, #0x8
 80019ba:      	str	r1, [sp, #0x10]
 80019bc:      	movw	r1, #0x245f
 80019c0:      	movt	r1, #0x800
 80019c4:      	add	r2, sp, #0x20
 80019c6:      	strd	r0, r1, [sp, #8]
 80019ca:      	add	r1, sp, #0x8
 80019cc:      	movs	r0, #0x3
 80019ce:      	str	r1, [sp, #0x30]
 80019d0:      	movs	r1, #0x0
 80019d2:      	str	r0, [sp, #0x34]
 80019d4:      	strd	r0, r1, [sp, #36]
 80019d8:      	movw	r0, #0x32f8
 80019dc:      	movt	r0, #0x800
 80019e0:      	str	r1, [sp, #0x2c]
 80019e2:      	str	r0, [sp, #0x20]
 80019e4:      	mov	r0, r4
 80019e6:      	mov	r1, r5
 80019e8:      	bl	0x8001a4e <core::fmt::write::h706ba0ed69d89af5> @ imm = #0x62
 80019ec:      	mov	r6, r0
 80019ee:      	mov	r0, r6
 80019f0:      	add	sp, #0x38
 80019f2:      	ldr	r8, [sp], #4
 80019f6:      	pop	{r4, r5, r6, r7, pc}

080019f8 <core::panicking::panic::h322418c4dc3a4e35>:
 80019f8:      	push	{r7, lr}
 80019fa:      	mov	r7, sp
 80019fc:      	sub	sp, #0x20
 80019fe:      	mov	r12, r2
 8001a00:      	movw	r2, #0x32e4
 8001a04:      	movt	r2, #0x800
 8001a08:      	movs	r3, #0x0
 8001a0a:      	strd	r0, r1, [sp, #24]
 8001a0e:      	mov	r0, sp
 8001a10:      	str	r2, [sp, #0x10]
 8001a12:      	movs	r2, #0x1
 8001a14:      	mov	r1, r12
 8001a16:      	str	r2, [sp, #0x4]
 8001a18:      	add	r2, sp, #0x18
 8001a1a:      	str	r3, [sp, #0x14]
 8001a1c:      	strd	r3, r3, [sp, #8]
 8001a20:      	str	r2, [sp]
 8001a22:      	bl	0x8001a28 <core::panicking::panic_fmt::h5468da843dc1007c> @ imm = #0x2
 8001a26:      	trap

08001a28 <core::panicking::panic_fmt::h5468da843dc1007c>:
 8001a28:      	push	{r7, lr}
 8001a2a:      	mov	r7, sp
 8001a2c:      	sub	sp, #0x10
 8001a2e:      	strd	r0, r1, [sp, #8]
 8001a32:      	movw	r0, #0x3310
 8001a36:      	movt	r0, #0x800
 8001a3a:      	str	r0, [sp, #0x4]
 8001a3c:      	movw	r0, #0x32e4
 8001a40:      	movt	r0, #0x800
 8001a44:      	str	r0, [sp]
 8001a46:      	mov	r0, sp
 8001a48:      	bl	0x80024a4 <rust_begin_unwind> @ imm = #0xa58
 8001a4c:      	trap

08001a4e <core::fmt::write::h706ba0ed69d89af5>:
 8001a4e:      	push	{r4, r5, r6, r7, lr}
 8001a50:      	add	r7, sp, #0xc
 8001a52:      	push.w	{r8, r9, r10, r11}
 8001a56:      	sub	sp, #0x2c
 8001a58:      	mov	r11, r2
 8001a5a:      	movs	r2, #0x3
 8001a5c:      	ldr.w	r10, [r11, #0x8]
 8001a60:      	strb.w	r2, [sp, #0x28]
 8001a64:      	movs	r2, #0x20
 8001a66:      	str	r2, [sp, #0xc]
 8001a68:      	movs	r2, #0x0
 8001a6a:      	cmp.w	r10, #0x0
 8001a6e:      	str	r2, [sp, #0x8]
 8001a70:      	str	r1, [sp, #0x24]
 8001a72:      	str	r0, [sp, #0x20]
 8001a74:      	str	r2, [sp, #0x18]
 8001a76:      	str	r2, [sp, #0x10]
 8001a78:      	beq	0x8001b54 <core::fmt::write::h706ba0ed69d89af5+0x106> @ imm = #0xd8
 8001a7a:      	ldr.w	r0, [r11, #0xc]
 8001a7e:      	cmp	r0, #0x0
 8001a80:      	beq.w	0x8001ba2 <core::fmt::write::h706ba0ed69d89af5+0x154> @ imm = #0x11e
 8001a84:      	mvn	r1, #0x1f
 8001a88:      	ldr.w	r9, [r11]
 8001a8c:      	add.w	r1, r1, r0, lsl #5
 8001a90:      	lsls	r0, r0, #0x5
 8001a92:      	movs	r4, #0x0
 8001a94:      	mov.w	r8, #0x0
 8001a98:      	movs	r2, #0x1
 8001a9a:      	add.w	r1, r2, r1, lsr #5
 8001a9e:      	str	r1, [sp]
 8001aa0:      	str	r0, [sp, #0x4]
 8001aa2:      	add.w	r0, r9, r8
 8001aa6:      	ldr	r2, [r0, #0x4]
 8001aa8:      	cbz	r2, 0x8001abc <core::fmt::write::h706ba0ed69d89af5+0x6e> @ imm = #0x10
 8001aaa:      	ldrd	r0, r3, [sp, #32]
 8001aae:      	ldr.w	r1, [r9, r8]
 8001ab2:      	ldr	r3, [r3, #0xc]
 8001ab4:      	blx	r3
 8001ab6:      	cmp	r0, #0x0
 8001ab8:      	bne.w	0x8001bc4 <core::fmt::write::h706ba0ed69d89af5+0x176> @ imm = #0x108
 8001abc:      	add.w	r0, r10, r8, lsl #2
 8001ac0:      	ldr.w	r1, [r11, #0x10]
 8001ac4:      	ldrd	r5, r6, [r0, #4]
 8001ac8:      	ldrd	r2, r3, [r0, #20]
 8001acc:      	strd	r6, r5, [sp, #8]
 8001ad0:      	ldrb	r6, [r0, #0x1c]
 8001ad2:      	strb.w	r6, [sp, #0x28]
 8001ad6:      	cbz	r2, 0x8001af8 <core::fmt::write::h706ba0ed69d89af5+0xaa> @ imm = #0x1e
 8001ad8:      	cmp	r2, #0x1
 8001ada:      	bne	0x8001aee <core::fmt::write::h706ba0ed69d89af5+0xa0> @ imm = #0x10
 8001adc:      	add.w	r2, r1, r3, lsl #3
 8001ae0:      	movw	r6, #0x18ed
 8001ae4:      	movt	r6, #0x800
 8001ae8:      	ldr	r2, [r2, #0x4]
 8001aea:      	cmp	r2, r6
 8001aec:      	beq	0x8001af2 <core::fmt::write::h706ba0ed69d89af5+0xa4> @ imm = #0x2
 8001aee:      	movs	r5, #0x0
 8001af0:      	b	0x8001afa <core::fmt::write::h706ba0ed69d89af5+0xac> @ imm = #0x6
 8001af2:      	ldr.w	r2, [r1, r3, lsl #3]
 8001af6:      	ldr	r3, [r2]
 8001af8:      	movs	r5, #0x1
 8001afa:      	add.w	r2, r10, r4
 8001afe:      	strd	r5, r3, [sp, #16]
 8001b02:      	ldr	r3, [r0, #0xc]
 8001b04:      	ldr	r0, [r2, #0x10]
 8001b06:      	cbz	r3, 0x8001b28 <core::fmt::write::h706ba0ed69d89af5+0xda> @ imm = #0x1e
 8001b08:      	cmp	r3, #0x1
 8001b0a:      	bne	0x8001b1e <core::fmt::write::h706ba0ed69d89af5+0xd0> @ imm = #0x10
 8001b0c:      	add.w	r3, r1, r0, lsl #3
 8001b10:      	movw	r6, #0x18ed
 8001b14:      	movt	r6, #0x800
 8001b18:      	ldr	r3, [r3, #0x4]
 8001b1a:      	cmp	r3, r6
 8001b1c:      	beq	0x8001b22 <core::fmt::write::h706ba0ed69d89af5+0xd4> @ imm = #0x2
 8001b1e:      	movs	r3, #0x0
 8001b20:      	b	0x8001b2a <core::fmt::write::h706ba0ed69d89af5+0xdc> @ imm = #0x6
 8001b22:      	ldr.w	r0, [r1, r0, lsl #3]
 8001b26:      	ldr	r0, [r0]
 8001b28:      	movs	r3, #0x1
 8001b2a:      	ldr	r2, [r2]
 8001b2c:      	str	r0, [sp, #0x1c]
 8001b2e:      	ldr.w	r0, [r1, r2, lsl #3]
 8001b32:      	add.w	r1, r1, r2, lsl #3
 8001b36:      	ldr	r2, [r1, #0x4]
 8001b38:      	add	r1, sp, #0x8
 8001b3a:      	str	r3, [sp, #0x18]
 8001b3c:      	blx	r2
 8001b3e:      	cmp	r0, #0x0
 8001b40:      	bne	0x8001bc4 <core::fmt::write::h706ba0ed69d89af5+0x176> @ imm = #0x80
 8001b42:      	ldr	r0, [sp, #0x4]
 8001b44:      	adds	r4, #0x20
 8001b46:      	add.w	r8, r8, #0x8
 8001b4a:      	cmp	r0, r4
 8001b4c:      	bne	0x8001aa2 <core::fmt::write::h706ba0ed69d89af5+0x54> @ imm = #-0xae
 8001b4e:      	ldr.w	r9, [sp]
 8001b52:      	b	0x8001ba6 <core::fmt::write::h706ba0ed69d89af5+0x158> @ imm = #0x50
 8001b54:      	ldr.w	r0, [r11, #0x14]
 8001b58:      	cbz	r0, 0x8001ba2 <core::fmt::write::h706ba0ed69d89af5+0x154> @ imm = #0x46
 8001b5a:      	mvn	r1, #0x7
 8001b5e:      	add.w	r0, r1, r0, lsl #3
 8001b62:      	ldr.w	r2, [r11]
 8001b66:      	movs	r1, #0x1
 8001b68:      	ldr.w	r3, [r11, #0x10]
 8001b6c:      	add.w	r5, r1, r0, lsr #3
 8001b70:      	adds	r6, r2, #0x4
 8001b72:      	add.w	r8, sp, #0x8
 8001b76:      	adds	r4, r3, #0x4
 8001b78:      	mov	r9, r5
 8001b7a:      	ldr	r2, [r6]
 8001b7c:      	cbz	r2, 0x8001b8c <core::fmt::write::h706ba0ed69d89af5+0x13e> @ imm = #0xc
 8001b7e:      	ldrd	r0, r3, [sp, #32]
 8001b82:      	ldr	r1, [r6, #-4]
 8001b86:      	ldr	r3, [r3, #0xc]
 8001b88:      	blx	r3
 8001b8a:      	cbnz	r0, 0x8001bc4 <core::fmt::write::h706ba0ed69d89af5+0x176> @ imm = #0x36
 8001b8c:      	ldr	r0, [r4, #-4]
 8001b90:      	mov	r1, r8
 8001b92:      	ldr	r2, [r4]
 8001b94:      	blx	r2
 8001b96:      	cbnz	r0, 0x8001bc4 <core::fmt::write::h706ba0ed69d89af5+0x176> @ imm = #0x2a
 8001b98:      	adds	r4, #0x8
 8001b9a:      	adds	r6, #0x8
 8001b9c:      	subs	r5, #0x1
 8001b9e:      	bne	0x8001b7a <core::fmt::write::h706ba0ed69d89af5+0x12c> @ imm = #-0x28
 8001ba0:      	b	0x8001ba6 <core::fmt::write::h706ba0ed69d89af5+0x158> @ imm = #0x2
 8001ba2:      	mov.w	r9, #0x0
 8001ba6:      	ldrd	r0, r1, [r11]
 8001baa:      	movs	r2, #0x0
 8001bac:      	cmp	r9, r1
 8001bae:      	it	lo
 8001bb0:      	addlo.w	r2, r0, r9, lsl #3
 8001bb4:      	bhs	0x8001bce <core::fmt::write::h706ba0ed69d89af5+0x180> @ imm = #0x16
 8001bb6:      	ldrd	r0, r3, [sp, #32]
 8001bba:      	ldrd	r1, r2, [r2]
 8001bbe:      	ldr	r3, [r3, #0xc]
 8001bc0:      	blx	r3
 8001bc2:      	cbz	r0, 0x8001bce <core::fmt::write::h706ba0ed69d89af5+0x180> @ imm = #0x8
 8001bc4:      	movs	r0, #0x1
 8001bc6:      	add	sp, #0x2c
 8001bc8:      	pop.w	{r8, r9, r10, r11}
 8001bcc:      	pop	{r4, r5, r6, r7, pc}
 8001bce:      	movs	r0, #0x0
 8001bd0:      	add	sp, #0x2c
 8001bd2:      	pop.w	{r8, r9, r10, r11}
 8001bd6:      	pop	{r4, r5, r6, r7, pc}

08001bd8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e>:
 8001bd8:      	push	{r4, r5, r6, r7, lr}
 8001bda:      	add	r7, sp, #0xc
 8001bdc:      	push.w	{r8, r9, r10, r11}
 8001be0:      	sub	sp, #0x14
 8001be2:      	ldr	r4, [r7, #0xc]
 8001be4:      	mov	r11, r3
 8001be6:      	mov	r10, r0
 8001be8:      	cbz	r1, 0x8001c26 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x4e> @ imm = #0x3a
 8001bea:      	ldr.w	lr, [r10]
 8001bee:      	movs	r1, #0x2b
 8001bf0:      	ands	r0, lr, #0x1
 8001bf4:      	it	eq
 8001bf6:      	moveq.w	r1, #0x110000
 8001bfa:      	add.w	r8, r0, r4
 8001bfe:      	ldr	r6, [r7, #0x8]
 8001c00:      	lsls.w	r0, lr, #0x1d
 8001c04:      	bpl	0x8001c38 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x60> @ imm = #0x30
 8001c06:      	cmp.w	r11, #0x0
 8001c0a:      	beq	0x8001c56 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x7e> @ imm = #0x48
 8001c0c:      	sub.w	r0, r11, #0x1
 8001c10:      	and	r12, r11, #0x3
 8001c14:      	cmp	r0, #0x3
 8001c16:      	bhs	0x8001c5c <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x84> @ imm = #0x42
 8001c18:      	mov.w	r9, #0x0
 8001c1c:      	mov	r3, r2
 8001c1e:      	cmp.w	r12, #0x0
 8001c22:      	bne	0x8001cc2 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0xea> @ imm = #0x9c
 8001c24:      	b	0x8001cf8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x120> @ imm = #0xd0
 8001c26:      	ldr.w	lr, [r10]
 8001c2a:      	add.w	r8, r4, #0x1
 8001c2e:      	movs	r1, #0x2d
 8001c30:      	ldr	r6, [r7, #0x8]
 8001c32:      	lsls.w	r0, lr, #0x1d
 8001c36:      	bmi	0x8001c06 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2e> @ imm = #-0x34
 8001c38:      	movs	r2, #0x0
 8001c3a:      	mov.w	r11, #0x0
 8001c3e:      	ldr.w	r0, [r10, #0x8]
 8001c42:      	cmp	r0, #0x1
 8001c44:      	beq	0x8001d02 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x12a> @ imm = #0xba
 8001c46:      	mov	r0, r10
 8001c48:      	mov	r3, r11
 8001c4a:      	bl	0x8001ebc <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a> @ imm = #0x26e
 8001c4e:      	cmp	r0, #0x0
 8001c50:      	beq	0x8001d44 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x16c> @ imm = #0xf0
 8001c52:      	movs	r5, #0x1
 8001c54:      	b	0x8001d80 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1a8> @ imm = #0x128
 8001c56:      	mov.w	r9, #0x0
 8001c5a:      	b	0x8001cf8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x120> @ imm = #0x9a
 8001c5c:      	strd	r1, r6, [sp, #8]
 8001c60:      	bic	r1, r11, #0x3
 8001c64:      	rsbs	r5, r1, #0
 8001c66:      	mov	r3, r2
 8001c68:      	mov.w	r9, #0x0
 8001c6c:      	mov	r1, r2
 8001c6e:      	str	r4, [sp, #0x10]
 8001c70:      	ldrb	r6, [r3], #4
 8001c74:      	ldrb	r4, [r3, #-3]
 8001c78:      	and	r6, r6, #0xc0
 8001c7c:      	ldrb	r2, [r3, #-2]
 8001c80:      	cmp	r6, #0x80
 8001c82:      	ldrb	r0, [r3, #-1]
 8001c86:      	and	r4, r4, #0xc0
 8001c8a:      	it	ne
 8001c8c:      	addne.w	r9, r9, #0x1
 8001c90:      	cmp	r4, #0x80
 8001c92:      	and	r2, r2, #0xc0
 8001c96:      	it	ne
 8001c98:      	addne.w	r9, r9, #0x1
 8001c9c:      	cmp	r2, #0x80
 8001c9e:      	and	r0, r0, #0xc0
 8001ca2:      	it	ne
 8001ca4:      	addne.w	r9, r9, #0x1
 8001ca8:      	cmp	r0, #0x80
 8001caa:      	it	ne
 8001cac:      	addne.w	r9, r9, #0x1
 8001cb0:      	adds	r5, #0x4
 8001cb2:      	bne	0x8001c70 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x98> @ imm = #-0x46
 8001cb4:      	mov	r2, r1
 8001cb6:      	ldrd	r6, r4, [sp, #12]
 8001cba:      	ldr	r1, [sp, #0x8]
 8001cbc:      	cmp.w	r12, #0x0
 8001cc0:      	beq	0x8001cf8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x120> @ imm = #0x34
 8001cc2:      	ldrb	r0, [r3]
 8001cc4:      	and	r0, r0, #0xc0
 8001cc8:      	cmp	r0, #0x80
 8001cca:      	it	ne
 8001ccc:      	addne.w	r9, r9, #0x1
 8001cd0:      	cmp.w	r12, #0x1
 8001cd4:      	beq	0x8001cf8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x120> @ imm = #0x20
 8001cd6:      	ldrb	r0, [r3, #0x1]
 8001cd8:      	and	r0, r0, #0xc0
 8001cdc:      	cmp	r0, #0x80
 8001cde:      	it	ne
 8001ce0:      	addne.w	r9, r9, #0x1
 8001ce4:      	cmp.w	r12, #0x2
 8001ce8:      	beq	0x8001cf8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x120> @ imm = #0xc
 8001cea:      	ldrb	r0, [r3, #0x2]
 8001cec:      	and	r0, r0, #0xc0
 8001cf0:      	cmp	r0, #0x80
 8001cf2:      	it	ne
 8001cf4:      	addne.w	r9, r9, #0x1
 8001cf8:      	add	r8, r9
 8001cfa:      	ldr.w	r0, [r10, #0x8]
 8001cfe:      	cmp	r0, #0x1
 8001d00:      	bne	0x8001c46 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x6e> @ imm = #-0xbe
 8001d02:      	ldr.w	r9, [r10, #0xc]
 8001d06:      	cmp	r9, r8
 8001d08:      	bls	0x8001d36 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x15e> @ imm = #0x2a
 8001d0a:      	lsls.w	r0, lr, #0x1c
 8001d0e:      	bmi	0x8001d5e <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x186> @ imm = #0x4c
 8001d10:      	ldrb.w	r5, [r10, #0x20]
 8001d14:      	sub.w	r0, r9, r8
 8001d18:      	mov	r9, r1
 8001d1a:      	cmp	r5, #0x3
 8001d1c:      	it	eq
 8001d1e:      	moveq	r5, #0x1
 8001d20:      	lsls	r3, r5, #0x1e
 8001d22:      	strd	r6, r4, [sp, #12]
 8001d26:      	str	r2, [sp, #0x4]
 8001d28:      	beq	0x8001dac <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1d4> @ imm = #0x80
 8001d2a:      	cmp	r5, #0x1
 8001d2c:      	bne	0x8001db0 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1d8> @ imm = #0x80
 8001d2e:      	movs	r1, #0x0
 8001d30:      	str	r1, [sp, #0x8]
 8001d32:      	mov	r1, r0
 8001d34:      	b	0x8001db8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1e0> @ imm = #0x80
 8001d36:      	mov	r0, r10
 8001d38:      	mov	r3, r11
 8001d3a:      	bl	0x8001ebc <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a> @ imm = #0x17e
 8001d3e:      	cmp	r0, #0x0
 8001d40:      	bne.w	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x140
 8001d44:      	ldr.w	r1, [r10, #0x1c]
 8001d48:      	mov	r2, r4
 8001d4a:      	ldr.w	r0, [r10, #0x18]
 8001d4e:      	ldr	r3, [r1, #0xc]
 8001d50:      	mov	r1, r6
 8001d52:      	add	sp, #0x14
 8001d54:      	pop.w	{r8, r9, r10, r11}
 8001d58:      	pop.w	{r4, r5, r6, r7, lr}
 8001d5c:      	bx	r3
 8001d5e:      	ldr.w	r0, [r10, #0x4]
 8001d62:      	movs	r5, #0x1
 8001d64:      	str	r0, [sp, #0x8]
 8001d66:      	movs	r0, #0x30
 8001d68:      	ldrb.w	r3, [r10, #0x20]
 8001d6c:      	str	r3, [sp]
 8001d6e:      	mov	r3, r11
 8001d70:      	str.w	r0, [r10, #0x4]
 8001d74:      	mov	r0, r10
 8001d76:      	strb.w	r5, [r10, #0x20]
 8001d7a:      	bl	0x8001ebc <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a> @ imm = #0x13e
 8001d7e:      	cbz	r0, 0x8001d8a <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1b2> @ imm = #0x8
 8001d80:      	mov	r0, r5
 8001d82:      	add	sp, #0x14
 8001d84:      	pop.w	{r8, r9, r10, r11}
 8001d88:      	pop	{r4, r5, r6, r7, pc}
 8001d8a:      	ldrb.w	r0, [r10, #0x20]
 8001d8e:      	sub.w	r1, r9, r8
 8001d92:      	cmp	r0, #0x3
 8001d94:      	it	eq
 8001d96:      	moveq	r0, #0x1
 8001d98:      	lsls	r2, r0, #0x1e
 8001d9a:      	strd	r6, r4, [sp, #12]
 8001d9e:      	beq	0x8001e20 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x248> @ imm = #0x7e
 8001da0:      	cmp	r0, #0x1
 8001da2:      	bne	0x8001e26 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x24e> @ imm = #0x80
 8001da4:      	mov.w	r8, #0x0
 8001da8:      	mov	r0, r1
 8001daa:      	b	0x8001e2e <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x256> @ imm = #0x80
 8001dac:      	movs	r1, #0x0
 8001dae:      	b	0x8001db6 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1de> @ imm = #0x4
 8001db0:      	lsrs	r1, r0, #0x1
 8001db2:      	adds	r0, #0x1
 8001db4:      	lsrs	r0, r0, #0x1
 8001db6:      	str	r0, [sp, #0x8]
 8001db8:      	ldr.w	r5, [r10, #0x4]
 8001dbc:      	adds	r4, r1, #0x1
 8001dbe:      	ldrd	r8, r6, [r10, #24]
 8001dc2:      	subs	r4, #0x1
 8001dc4:      	beq	0x8001dd4 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1fc> @ imm = #0xc
 8001dc6:      	ldr	r2, [r6, #0x10]
 8001dc8:      	mov	r0, r8
 8001dca:      	mov	r1, r5
 8001dcc:      	blx	r2
 8001dce:      	cmp	r0, #0x0
 8001dd0:      	beq	0x8001dc2 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x1ea> @ imm = #-0x12
 8001dd2:      	b	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0xae
 8001dd4:      	subs.w	r8, r5, #0x110000
 8001dd8:      	ldr	r0, [sp, #0x8]
 8001dda:      	it	ne
 8001ddc:      	movne	r8, r0
 8001dde:      	cmp.w	r5, #0x110000
 8001de2:      	beq	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x9e
 8001de4:      	ldr	r2, [sp, #0x4]
 8001de6:      	mov	r0, r10
 8001de8:      	mov	r1, r9
 8001dea:      	mov	r3, r11
 8001dec:      	bl	0x8001ebc <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a> @ imm = #0xcc
 8001df0:      	cmp	r0, #0x0
 8001df2:      	bne	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x8e
 8001df4:      	ldrd	r0, r1, [r10, #24]
 8001df8:      	ldr	r3, [r1, #0xc]
 8001dfa:      	ldrd	r1, r2, [sp, #12]
 8001dfe:      	blx	r3
 8001e00:      	cmp	r0, #0x0
 8001e02:      	bne	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x7e
 8001e04:      	ldrd	r9, r6, [r10, #24]
 8001e08:      	movs	r4, #0x0
 8001e0a:      	cmp	r8, r4
 8001e0c:      	beq	0x8001ea8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2d0> @ imm = #0x98
 8001e0e:      	ldr	r2, [r6, #0x10]
 8001e10:      	mov	r0, r9
 8001e12:      	mov	r1, r5
 8001e14:      	blx	r2
 8001e16:      	adds	r4, #0x1
 8001e18:      	cmp	r0, #0x0
 8001e1a:      	beq	0x8001e0a <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x232> @ imm = #-0x14
 8001e1c:      	subs	r0, r4, #0x1
 8001e1e:      	b	0x8001eaa <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2d2> @ imm = #0x88
 8001e20:      	movs	r0, #0x0
 8001e22:      	mov	r8, r1
 8001e24:      	b	0x8001e2e <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x256> @ imm = #0x6
 8001e26:      	lsrs	r0, r1, #0x1
 8001e28:      	adds	r1, #0x1
 8001e2a:      	lsr.w	r8, r1, #0x1
 8001e2e:      	ldr.w	r11, [r10, #0x4]
 8001e32:      	adds	r4, r0, #0x1
 8001e34:      	ldrd	r6, r5, [r10, #24]
 8001e38:      	subs	r4, #0x1
 8001e3a:      	beq	0x8001e4a <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x272> @ imm = #0xc
 8001e3c:      	ldr	r2, [r5, #0x10]
 8001e3e:      	mov	r0, r6
 8001e40:      	mov	r1, r11
 8001e42:      	blx	r2
 8001e44:      	cmp	r0, #0x0
 8001e46:      	beq	0x8001e38 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x260> @ imm = #-0x12
 8001e48:      	b	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x38
 8001e4a:      	subs.w	r9, r11, #0x110000
 8001e4e:      	it	ne
 8001e50:      	movne	r9, r8
 8001e52:      	cmp.w	r11, #0x110000
 8001e56:      	beq	0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x2a
 8001e58:      	ldrd	r0, r1, [r10, #24]
 8001e5c:      	ldr	r3, [r1, #0xc]
 8001e5e:      	ldrd	r1, r2, [sp, #12]
 8001e62:      	blx	r3
 8001e64:      	cbnz	r0, 0x8001e84 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2ac> @ imm = #0x1c
 8001e66:      	ldrd	r8, r4, [r10, #24]
 8001e6a:      	movs	r6, #0x0
 8001e6c:      	cmp	r9, r6
 8001e6e:      	beq	0x8001e90 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2b8> @ imm = #0x1e
 8001e70:      	ldr	r2, [r4, #0x10]
 8001e72:      	mov	r0, r8
 8001e74:      	mov	r1, r11
 8001e76:      	blx	r2
 8001e78:      	adds	r6, #0x1
 8001e7a:      	cmp	r0, #0x0
 8001e7c:      	beq	0x8001e6c <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x294> @ imm = #-0x14
 8001e7e:      	subs	r0, r6, #0x1
 8001e80:      	cmp	r0, r9
 8001e82:      	bhs	0x8001e90 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e+0x2b8> @ imm = #0xa
 8001e84:      	movs	r5, #0x1
 8001e86:      	mov	r0, r5
 8001e88:      	add	sp, #0x14
 8001e8a:      	pop.w	{r8, r9, r10, r11}
 8001e8e:      	pop	{r4, r5, r6, r7, pc}
 8001e90:      	ldr	r0, [sp]
 8001e92:      	movs	r5, #0x0
 8001e94:      	strb.w	r0, [r10, #0x20]
 8001e98:      	ldr	r0, [sp, #0x8]
 8001e9a:      	str.w	r0, [r10, #0x4]
 8001e9e:      	mov	r0, r5
 8001ea0:      	add	sp, #0x14
 8001ea2:      	pop.w	{r8, r9, r10, r11}
 8001ea6:      	pop	{r4, r5, r6, r7, pc}
 8001ea8:      	mov	r0, r8
 8001eaa:      	movs	r5, #0x0
 8001eac:      	cmp	r0, r8
 8001eae:      	it	lo
 8001eb0:      	movlo	r5, #0x1
 8001eb2:      	mov	r0, r5
 8001eb4:      	add	sp, #0x14
 8001eb6:      	pop.w	{r8, r9, r10, r11}
 8001eba:      	pop	{r4, r5, r6, r7, pc}

08001ebc <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a>:
 8001ebc:      	push	{r4, r5, r6, r7, lr}
 8001ebe:      	add	r7, sp, #0xc
 8001ec0:      	str	r11, [sp, #-4]!
 8001ec4:      	mov	r4, r3
 8001ec6:      	mov	r5, r2
 8001ec8:      	mov	r6, r0
 8001eca:      	cmp.w	r1, #0x110000
 8001ece:      	beq	0x8001ee2 <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a+0x26> @ imm = #0x10
 8001ed0:      	ldrd	r0, r2, [r6, #24]
 8001ed4:      	ldr	r2, [r2, #0x10]
 8001ed6:      	blx	r2
 8001ed8:      	cbz	r0, 0x8001ee2 <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a+0x26> @ imm = #0x6
 8001eda:      	movs	r0, #0x1
 8001edc:      	ldr	r11, [sp], #4
 8001ee0:      	pop	{r4, r5, r6, r7, pc}
 8001ee2:      	cbz	r5, 0x8001ef8 <core::fmt::Formatter::pad_integral::write_prefix::h8d718883a8f5418a+0x3c> @ imm = #0x12
 8001ee4:      	ldrd	r0, r1, [r6, #24]
 8001ee8:      	mov	r2, r4
 8001eea:      	ldr	r3, [r1, #0xc]
 8001eec:      	mov	r1, r5
 8001eee:      	ldr	r11, [sp], #4
 8001ef2:      	pop.w	{r4, r5, r6, r7, lr}
 8001ef6:      	bx	r3
 8001ef8:      	movs	r0, #0x0
 8001efa:      	ldr	r11, [sp], #4
 8001efe:      	pop	{r4, r5, r6, r7, pc}

08001f00 <core::fmt::Formatter::pad::h5af7202c4eb8783b>:
 8001f00:      	push	{r4, r5, r6, r7, lr}
 8001f02:      	add	r7, sp, #0xc
 8001f04:      	push.w	{r8, r9, r10, r11}
 8001f08:      	sub	sp, #0x4
 8001f0a:      	mov	r4, r1
 8001f0c:      	ldr.w	lr, [r0, #0x8]
 8001f10:      	ldr	r1, [r0, #0x10]
 8001f12:      	mov	r9, r2
 8001f14:      	cmp.w	lr, #0x1
 8001f18:      	bne	0x8001f44 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x44> @ imm = #0x28
 8001f1a:      	cmp	r1, #0x1
 8001f1c:      	beq	0x8001f4a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x4a> @ imm = #0x2a
 8001f1e:      	ldr.w	lr, [r0, #0xc]
 8001f22:      	cmp.w	r9, #0x0
 8001f26:      	beq.w	0x80021c2 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2c2> @ imm = #0x298
 8001f2a:      	sub.w	r2, r9, #0x1
 8001f2e:      	and	r12, r9, #0x3
 8001f32:      	cmp	r2, #0x3
 8001f34:      	bhs	0x800200e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x10e> @ imm = #0xd6
 8001f36:      	movs	r2, #0x0
 8001f38:      	mov	r6, r4
 8001f3a:      	cmp.w	r12, #0x0
 8001f3e:      	bne.w	0x800205e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x15e> @ imm = #0x11c
 8001f42:      	b	0x800208e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x18e> @ imm = #0x148
 8001f44:      	cmp	r1, #0x1
 8001f46:      	bne.w	0x80021ca <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2ca> @ imm = #0x280
 8001f4a:      	ldr	r6, [r0, #0x14]
 8001f4c:      	add.w	r8, r4, r9
 8001f50:      	movs	r2, #0x0
 8001f52:      	str	r4, [sp]
 8001f54:      	cbnz	r6, 0x8001fb4 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xb4> @ imm = #0x5c
 8001f56:      	cmp	r4, r8
 8001f58:      	beq.w	0x80021aa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2aa> @ imm = #0x24e
 8001f5c:      	mov	r6, r4
 8001f5e:      	ldrsb	r3, [r6], #1
 8001f62:      	cmp.w	r3, #0xffffffff
 8001f66:      	ble.w	0x8002102 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x202> @ imm = #0x198
 8001f6a:      	ldr	r4, [sp]
 8001f6c:      	cmp	r2, #0x0
 8001f6e:      	beq.w	0x800211e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x21e> @ imm = #0x1ac
 8001f72:      	cmp	r2, r9
 8001f74:      	bhs.w	0x8002118 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x218> @ imm = #0x1a0
 8001f78:      	ldrsb	r1, [r4, r2]
 8001f7a:      	cmn.w	r1, #0x40
 8001f7e:      	bge.w	0x800211e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x21e> @ imm = #0x19c
 8001f82:      	movs	r1, #0x0
 8001f84:      	movs	r2, #0x0
 8001f86:      	b	0x8002120 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x220> @ imm = #0x196
 8001f88:      	ldrb	r1, [r4], #1
 8001f8c:      	and	r12, r1, #0x3f
 8001f90:      	mov.w	r1, #0x1c0000
 8001f94:      	and.w	r1, r1, r5, lsl #18
 8001f98:      	orr.w	r1, r1, r10, lsl #12
 8001f9c:      	orr.w	r1, r1, r11, lsl #6
 8001fa0:      	add	r1, r12
 8001fa2:      	cmp.w	r1, #0x110000
 8001fa6:      	beq.w	0x80021aa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2aa> @ imm = #0x200
 8001faa:      	subs	r1, r2, r3
 8001fac:      	subs	r6, #0x1
 8001fae:      	add.w	r2, r1, r4
 8001fb2:      	beq	0x8001f56 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x56> @ imm = #-0x60
 8001fb4:      	cmp	r4, r8
 8001fb6:      	beq.w	0x80021aa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2aa> @ imm = #0x1f0
 8001fba:      	mov	r3, r4
 8001fbc:      	ldrsb	r5, [r4], #1
 8001fc0:      	cmp.w	r5, #0xffffffff
 8001fc4:      	bgt	0x8001faa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xaa> @ imm = #-0x1e
 8001fc6:      	cmp	r4, r8
 8001fc8:      	beq	0x8001fda <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xda> @ imm = #0xe
 8001fca:      	ldrb	r1, [r3, #0x1]
 8001fcc:      	adds	r4, r3, #0x2
 8001fce:      	and	r10, r1, #0x3f
 8001fd2:      	uxtb	r5, r5
 8001fd4:      	cmp	r5, #0xe0
 8001fd6:      	blo	0x8001faa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xaa> @ imm = #-0x30
 8001fd8:      	b	0x8001fe6 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xe6> @ imm = #0xa
 8001fda:      	mov.w	r10, #0x0
 8001fde:      	mov	r4, r8
 8001fe0:      	uxtb	r5, r5
 8001fe2:      	cmp	r5, #0xe0
 8001fe4:      	blo	0x8001faa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xaa> @ imm = #-0x3e
 8001fe6:      	cmp	r4, r8
 8001fe8:      	beq	0x8001ff8 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xf8> @ imm = #0xc
 8001fea:      	ldrb	r1, [r4], #1
 8001fee:      	and	r11, r1, #0x3f
 8001ff2:      	cmp	r5, #0xf0
 8001ff4:      	blo	0x8001faa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xaa> @ imm = #-0x4e
 8001ff6:      	b	0x8002002 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x102> @ imm = #0x8
 8001ff8:      	mov.w	r11, #0x0
 8001ffc:      	mov	r4, r8
 8001ffe:      	cmp	r5, #0xf0
 8002000:      	blo	0x8001faa <core::fmt::Formatter::pad::h5af7202c4eb8783b+0xaa> @ imm = #-0x5a
 8002002:      	cmp	r4, r8
 8002004:      	bne	0x8001f88 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x88> @ imm = #-0x80
 8002006:      	mov.w	r12, #0x0
 800200a:      	mov	r4, r8
 800200c:      	b	0x8001f90 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x90> @ imm = #-0x80
 800200e:      	bic	r2, r9, #0x3
 8002012:      	mov	r10, r4
 8002014:      	rsbs	r5, r2, #0
 8002016:      	movs	r2, #0x0
 8002018:      	mov	r6, r4
 800201a:      	ldrb	r4, [r6], #4
 800201e:      	ldrb	r3, [r6, #-3]
 8002022:      	and	r4, r4, #0xc0
 8002026:      	ldrb	r1, [r6, #-2]
 800202a:      	cmp	r4, #0x80
 800202c:      	ldrb	r8, [r6, #-1]
 8002030:      	and	r3, r3, #0xc0
 8002034:      	it	ne
 8002036:      	addne	r2, #0x1
 8002038:      	cmp	r3, #0x80
 800203a:      	and	r1, r1, #0xc0
 800203e:      	it	ne
 8002040:      	addne	r2, #0x1
 8002042:      	cmp	r1, #0x80
 8002044:      	and	r1, r8, #0xc0
 8002048:      	it	ne
 800204a:      	addne	r2, #0x1
 800204c:      	cmp	r1, #0x80
 800204e:      	it	ne
 8002050:      	addne	r2, #0x1
 8002052:      	adds	r5, #0x4
 8002054:      	bne	0x800201a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x11a> @ imm = #-0x3e
 8002056:      	mov	r4, r10
 8002058:      	cmp.w	r12, #0x0
 800205c:      	beq	0x800208e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x18e> @ imm = #0x2e
 800205e:      	ldrb	r1, [r6]
 8002060:      	and	r1, r1, #0xc0
 8002064:      	cmp	r1, #0x80
 8002066:      	it	ne
 8002068:      	addne	r2, #0x1
 800206a:      	cmp.w	r12, #0x1
 800206e:      	beq	0x800208e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x18e> @ imm = #0x1c
 8002070:      	ldrb	r1, [r6, #0x1]
 8002072:      	and	r1, r1, #0xc0
 8002076:      	cmp	r1, #0x80
 8002078:      	it	ne
 800207a:      	addne	r2, #0x1
 800207c:      	cmp.w	r12, #0x2
 8002080:      	beq	0x800208e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x18e> @ imm = #0xa
 8002082:      	ldrb	r1, [r6, #0x2]
 8002084:      	and	r1, r1, #0xc0
 8002088:      	cmp	r1, #0x80
 800208a:      	it	ne
 800208c:      	addne	r2, #0x1
 800208e:      	cmp	lr, r2
 8002090:      	bls.w	0x80021ca <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2ca> @ imm = #0x136
 8002094:      	ldrb.w	r1, [r0, #0x20]
 8002098:      	sub.w	r2, lr, r2
 800209c:      	mov	r8, r4
 800209e:      	subs	r3, r1, #0x3
 80020a0:      	it	ne
 80020a2:      	movne	r3, r1
 80020a4:      	lsls	r1, r3, #0x1e
 80020a6:      	beq	0x80020b4 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1b4> @ imm = #0xa
 80020a8:      	cmp	r3, #0x1
 80020aa:      	bne	0x80020ba <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1ba> @ imm = #0xc
 80020ac:      	mov.w	r10, #0x0
 80020b0:      	mov	r1, r2
 80020b2:      	b	0x80020c2 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1c2> @ imm = #0xc
 80020b4:      	movs	r1, #0x0
 80020b6:      	mov	r10, r2
 80020b8:      	b	0x80020c2 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1c2> @ imm = #0x6
 80020ba:      	lsrs	r1, r2, #0x1
 80020bc:      	adds	r2, #0x1
 80020be:      	lsr.w	r10, r2, #0x1
 80020c2:      	ldr	r6, [r0, #0x4]
 80020c4:      	adds	r4, r1, #0x1
 80020c6:      	ldrd	r11, r5, [r0, #24]
 80020ca:      	subs	r4, #0x1
 80020cc:      	beq	0x80020dc <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1dc> @ imm = #0xc
 80020ce:      	ldr	r2, [r5, #0x10]
 80020d0:      	mov	r0, r11
 80020d2:      	mov	r1, r6
 80020d4:      	blx	r2
 80020d6:      	cmp	r0, #0x0
 80020d8:      	beq	0x80020ca <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1ca> @ imm = #-0x12
 80020da:      	b	0x80020f8 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1f8> @ imm = #0x1a
 80020dc:      	mov	r0, r10
 80020de:      	subs.w	r10, r6, #0x110000
 80020e2:      	it	ne
 80020e4:      	movne	r10, r0
 80020e6:      	cmp.w	r6, #0x110000
 80020ea:      	beq	0x80020f8 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x1f8> @ imm = #0xa
 80020ec:      	ldr	r3, [r5, #0xc]
 80020ee:      	mov	r0, r11
 80020f0:      	mov	r1, r8
 80020f2:      	mov	r2, r9
 80020f4:      	blx	r3
 80020f6:      	cbz	r0, 0x8002134 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x234> @ imm = #0x3a
 80020f8:      	movs	r0, #0x1
 80020fa:      	add	sp, #0x4
 80020fc:      	pop.w	{r8, r9, r10, r11}
 8002100:      	pop	{r4, r5, r6, r7, pc}
 8002102:      	uxtb	r3, r3
 8002104:      	cmp	r6, r8
 8002106:      	beq	0x800214c <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x24c> @ imm = #0x42
 8002108:      	ldrb	r1, [r4, #0x1]
 800210a:      	adds	r6, r4, #0x2
 800210c:      	and	r1, r1, #0x3f
 8002110:      	lsls	r5, r1, #0x6
 8002112:      	cmp	r3, #0xe0
 8002114:      	bhs	0x8002156 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x256> @ imm = #0x3e
 8002116:      	b	0x8001f6a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x6a> @ imm = #-0x1b0
 8002118:      	cmp	r2, r9
 800211a:      	bne.w	0x8001f82 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x82> @ imm = #-0x19c
 800211e:      	mov	r1, r4
 8002120:      	cmp	r1, #0x0
 8002122:      	ite	eq
 8002124:      	moveq	r2, r9
 8002126:      	movne	r4, r1
 8002128:      	cmp.w	lr, #0x1
 800212c:      	beq	0x80021b4 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2b4> @ imm = #0x84
 800212e:      	ldrd	r1, r0, [r0, #24]
 8002132:      	b	0x80021d0 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2d0> @ imm = #0x9a
 8002134:      	movs	r4, #0x0
 8002136:      	cmp	r10, r4
 8002138:      	beq	0x800216a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x26a> @ imm = #0x2e
 800213a:      	ldr	r2, [r5, #0x10]
 800213c:      	mov	r0, r11
 800213e:      	mov	r1, r6
 8002140:      	blx	r2
 8002142:      	adds	r4, #0x1
 8002144:      	cmp	r0, #0x0
 8002146:      	beq	0x8002136 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x236> @ imm = #-0x14
 8002148:      	subs	r1, r4, #0x1
 800214a:      	b	0x800216c <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x26c> @ imm = #0x1e
 800214c:      	movs	r5, #0x0
 800214e:      	mov	r6, r8
 8002150:      	cmp	r3, #0xe0
 8002152:      	blo.w	0x8001f6a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x6a> @ imm = #-0x1ec
 8002156:      	cmp	r6, r8
 8002158:      	beq	0x800217c <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x27c> @ imm = #0x20
 800215a:      	ldrb	r1, [r6], #1
 800215e:      	and	r4, r1, #0x3f
 8002162:      	cmp	r3, #0xf0
 8002164:      	blo.w	0x8001f6a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x6a> @ imm = #-0x1fe
 8002168:      	b	0x8002186 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x286> @ imm = #0x1a
 800216a:      	mov	r1, r10
 800216c:      	movs	r0, #0x0
 800216e:      	cmp	r1, r10
 8002170:      	it	lo
 8002172:      	movlo	r0, #0x1
 8002174:      	add	sp, #0x4
 8002176:      	pop.w	{r8, r9, r10, r11}
 800217a:      	pop	{r4, r5, r6, r7, pc}
 800217c:      	movs	r4, #0x0
 800217e:      	mov	r6, r8
 8002180:      	cmp	r3, #0xf0
 8002182:      	blo.w	0x8001f6a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x6a> @ imm = #-0x21c
 8002186:      	orrs	r5, r4
 8002188:      	cmp	r6, r8
 800218a:      	itte	ne
 800218c:      	ldrbne	r1, [r6]
 800218e:      	andne	r1, r1, #0x3f
 8002192:      	moveq	r1, #0x0
 8002194:      	mov.w	r6, #0x1c0000
 8002198:      	and.w	r3, r6, r3, lsl #18
 800219c:      	orr.w	r3, r3, r5, lsl #6
 80021a0:      	add	r1, r3
 80021a2:      	cmp.w	r1, #0x110000
 80021a6:      	bne.w	0x8001f6a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x6a> @ imm = #-0x240
 80021aa:      	ldr	r4, [sp]
 80021ac:      	mov	r2, r9
 80021ae:      	cmp.w	lr, #0x1
 80021b2:      	bne	0x800212e <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x22e> @ imm = #-0x88
 80021b4:      	mov	r9, r2
 80021b6:      	ldr.w	lr, [r0, #0xc]
 80021ba:      	cmp.w	r9, #0x0
 80021be:      	bne.w	0x8001f2a <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x2a> @ imm = #-0x298
 80021c2:      	movs	r2, #0x0
 80021c4:      	cmp	lr, r2
 80021c6:      	bhi.w	0x8002094 <core::fmt::Formatter::pad::h5af7202c4eb8783b+0x194> @ imm = #-0x136
 80021ca:      	ldr	r1, [r0, #0x18]
 80021cc:      	mov	r2, r9
 80021ce:      	ldr	r0, [r0, #0x1c]
 80021d0:      	ldr	r3, [r0, #0xc]
 80021d2:      	mov	r0, r1
 80021d4:      	mov	r1, r4
 80021d6:      	add	sp, #0x4
 80021d8:      	pop.w	{r8, r9, r10, r11}
 80021dc:      	pop.w	{r4, r5, r6, r7, lr}
 80021e0:      	bx	r3

080021e2 <core::slice::index::slice_start_index_len_fail::h2f80b21f0188357c>:
 80021e2:      	push	{r7, lr}
 80021e4:      	mov	r7, sp
 80021e6:      	sub	sp, #0x30
 80021e8:      	strd	r0, r1, [sp]
 80021ec:      	add	r1, sp, #0x20
 80021ee:      	movs	r0, #0x2
 80021f0:      	str	r1, [sp, #0x18]
 80021f2:      	movs	r1, #0x0
 80021f4:      	str	r0, [sp, #0x1c]
 80021f6:      	strd	r0, r1, [sp, #12]
 80021fa:      	movw	r0, #0x346c
 80021fe:      	movt	r0, #0x800
 8002202:      	str	r1, [sp, #0x14]
 8002204:      	str	r0, [sp, #0x8]
 8002206:      	movw	r0, #0x236f
 800220a:      	add	r1, sp, #0x4
 800220c:      	movt	r0, #0x800
 8002210:      	str	r0, [sp, #0x2c]
 8002212:      	strd	r0, r1, [sp, #36]
 8002216:      	mov	r0, sp
 8002218:      	str	r0, [sp, #0x20]
 800221a:      	add	r0, sp, #0x8
 800221c:      	mov	r1, r2
 800221e:      	bl	0x8001a28 <core::panicking::panic_fmt::h5468da843dc1007c> @ imm = #-0x7fa
 8002222:      	trap

08002224 <core::slice::index::slice_end_index_len_fail::h820c0fbf65eefa0d>:
 8002224:      	push	{r7, lr}
 8002226:      	mov	r7, sp
 8002228:      	sub	sp, #0x30
 800222a:      	strd	r0, r1, [sp]
 800222e:      	add	r1, sp, #0x20
 8002230:      	movs	r0, #0x2
 8002232:      	str	r1, [sp, #0x18]
 8002234:      	movs	r1, #0x0
 8002236:      	str	r0, [sp, #0x1c]
 8002238:      	strd	r0, r1, [sp, #12]
 800223c:      	movw	r0, #0x347c
 8002240:      	movt	r0, #0x800
 8002244:      	str	r1, [sp, #0x14]
 8002246:      	str	r0, [sp, #0x8]
 8002248:      	movw	r0, #0x236f
 800224c:      	add	r1, sp, #0x4
 800224e:      	movt	r0, #0x800
 8002252:      	str	r0, [sp, #0x2c]
 8002254:      	strd	r0, r1, [sp, #36]
 8002258:      	mov	r0, sp
 800225a:      	str	r0, [sp, #0x20]
 800225c:      	add	r0, sp, #0x8
 800225e:      	mov	r1, r2
 8002260:      	bl	0x8001a28 <core::panicking::panic_fmt::h5468da843dc1007c> @ imm = #-0x83c
 8002264:      	trap

08002266 <core::slice::index::slice_index_order_fail::h6ee57572668a31c3>:
 8002266:      	push	{r7, lr}
 8002268:      	mov	r7, sp
 800226a:      	sub	sp, #0x30
 800226c:      	strd	r0, r1, [sp]
 8002270:      	add	r1, sp, #0x20
 8002272:      	movs	r0, #0x2
 8002274:      	str	r1, [sp, #0x18]
 8002276:      	movs	r1, #0x0
 8002278:      	str	r0, [sp, #0x1c]
 800227a:      	strd	r0, r1, [sp, #12]
 800227e:      	movw	r0, #0x34b0
 8002282:      	movt	r0, #0x800
 8002286:      	str	r1, [sp, #0x14]
 8002288:      	str	r0, [sp, #0x8]
 800228a:      	movw	r0, #0x236f
 800228e:      	add	r1, sp, #0x4
 8002290:      	movt	r0, #0x800
 8002294:      	str	r0, [sp, #0x2c]
 8002296:      	strd	r0, r1, [sp, #36]
 800229a:      	mov	r0, sp
 800229c:      	str	r0, [sp, #0x20]
 800229e:      	add	r0, sp, #0x8
 80022a0:      	mov	r1, r2
 80022a2:      	bl	0x8001a28 <core::panicking::panic_fmt::h5468da843dc1007c> @ imm = #-0x87e
 80022a6:      	trap

080022a8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558>:
 80022a8:      	push	{r4, r6, r7, lr}
 80022aa:      	add	r7, sp, #0x8
 80022ac:      	sub	sp, #0x88
 80022ae:      	ldr	r0, [r0]
 80022b0:      	add.w	r12, sp, #0x8
 80022b4:      	mov.w	lr, #0x81
 80022b8:      	and	r2, r0, #0xf
 80022bc:      	add.w	r3, r12, lr
 80022c0:      	movs	r4, #0x37
 80022c2:      	cmp	r2, #0xa
 80022c4:      	it	lo
 80022c6:      	movlo	r4, #0x30
 80022c8:      	add	r2, r4
 80022ca:      	strb	r2, [r3, #-2]
 80022ce:      	lsrs	r2, r0, #0x4
 80022d0:      	beq	0x800231e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x76> @ imm = #0x4a
 80022d2:      	and	r2, r2, #0xf
 80022d6:      	movs	r4, #0x37
 80022d8:      	cmp	r2, #0xa
 80022da:      	it	lo
 80022dc:      	movlo	r4, #0x30
 80022de:      	add	r2, r4
 80022e0:      	strb	r2, [r3, #-3]
 80022e4:      	lsrs	r2, r0, #0x8
 80022e6:      	beq	0x8002328 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x80> @ imm = #0x3e
 80022e8:      	and	r2, r2, #0xf
 80022ec:      	movs	r4, #0x37
 80022ee:      	cmp	r2, #0xa
 80022f0:      	it	lo
 80022f2:      	movlo	r4, #0x30
 80022f4:      	add	r2, r4
 80022f6:      	strb	r2, [r3, #-4]
 80022fa:      	lsrs	r2, r0, #0xc
 80022fc:      	beq	0x8002332 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x8a> @ imm = #0x32
 80022fe:      	and	r2, r2, #0xf
 8002302:      	movs	r4, #0x37
 8002304:      	cmp	r2, #0xa
 8002306:      	sub.w	lr, lr, #0x4
 800230a:      	it	lo
 800230c:      	movlo	r4, #0x30
 800230e:      	lsrs	r0, r0, #0x10
 8002310:      	add	r2, r4
 8002312:      	strb	r2, [r3, #-5]
 8002316:      	bne	0x80022b8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x10> @ imm = #-0x62
 8002318:      	sub.w	r0, lr, #0x1
 800231c:      	b	0x800233a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x92> @ imm = #0x1a
 800231e:      	sub.w	r0, lr, #0x2
 8002322:      	sub.w	lr, lr, #0x1
 8002326:      	b	0x800233a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x92> @ imm = #0x10
 8002328:      	sub.w	r0, lr, #0x3
 800232c:      	sub.w	lr, lr, #0x2
 8002330:      	b	0x800233a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0x92> @ imm = #0x6
 8002332:      	sub.w	r0, lr, #0x4
 8002336:      	sub.w	lr, lr, #0x3
 800233a:      	cmp	r0, #0x81
 800233c:      	bhs	0x800235e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::ha710b28481782558+0xb6> @ imm = #0x1e
 800233e:      	rsb.w	r2, lr, #0x81
 8002342:      	add	r0, r12
 8002344:      	movs	r3, #0x2
 8002346:      	strd	r0, r2, [sp]
 800234a:      	movw	r2, #0x336c
 800234e:      	mov	r0, r1
 8002350:      	movt	r2, #0x800
 8002354:      	movs	r1, #0x1
 8002356:      	bl	0x8001bd8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e> @ imm = #-0x782
 800235a:      	add	sp, #0x88
 800235c:      	pop	{r4, r6, r7, pc}
 800235e:      	movw	r2, #0x335c
 8002362:      	movs	r1, #0x80
 8002364:      	movt	r2, #0x800
 8002368:      	bl	0x80021e2 <core::slice::index::slice_start_index_len_fail::h2f80b21f0188357c> @ imm = #-0x18a
 800236c:      	trap

0800236e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5>:
 800236e:      	push	{r4, r5, r6, r7, lr}
 8002370:      	add	r7, sp, #0xc
 8002372:      	push.w	{r8, r9, r10, r11}
 8002376:      	sub	sp, #0x34
 8002378:      	ldr	r4, [r0]
 800237a:      	movw	r0, #0x336e
 800237e:      	movw	lr, #0x2710
 8002382:      	mov	r5, r1
 8002384:      	cmp	r4, lr
 8002386:      	movt	r0, #0x800
 800238a:      	blo	0x8002406 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0x98> @ imm = #0x78
 800238c:      	movw	r8, #0x1759
 8002390:      	movw	r3, #0xe0ff
 8002394:      	add.w	r11, sp, #0xc
 8002398:      	movs	r1, #0x0
 800239a:      	movt	r8, #0xd1b7
 800239e:      	movw	r9, #0x147b
 80023a2:      	mov.w	r10, #0x64
 80023a6:      	movt	r3, #0x5f5
 80023aa:      	str	r5, [sp, #0x8]
 80023ac:      	umull	r2, r5, r4, r8
 80023b0:      	add.w	r12, r11, r1
 80023b4:      	subs	r1, #0x4
 80023b6:      	cmp	r4, r3
 80023b8:      	lsr.w	r2, r5, #0xd
 80023bc:      	mls	r5, r2, lr, r4
 80023c0:      	mov	r4, r2
 80023c2:      	uxth	r6, r5
 80023c4:      	lsr.w	r6, r6, #0x2
 80023c8:      	mul	r6, r6, r9
 80023cc:      	lsr.w	r6, r6, #0x11
 80023d0:      	mls	r5, r6, r10, r5
 80023d4:      	ldrh.w	r6, [r0, r6, lsl #1]
 80023d8:      	strh.w	r6, [r12, #0x23]
 80023dc:      	uxth	r5, r5
 80023de:      	ldrh.w	r5, [r0, r5, lsl #1]
 80023e2:      	strh.w	r5, [r12, #0x25]
 80023e6:      	bhi	0x80023ac <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0x3e> @ imm = #-0x3e
 80023e8:      	ldr	r5, [sp, #0x8]
 80023ea:      	add.w	r3, r1, #0x27
 80023ee:      	mov	r4, r2
 80023f0:      	cmp	r4, #0x63
 80023f2:      	bgt	0x800240c <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0x9e> @ imm = #0x16
 80023f4:      	mov	r1, r4
 80023f6:      	cmp	r1, #0xa
 80023f8:      	blt	0x800242e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0xc0> @ imm = #0x32
 80023fa:      	ldrh.w	r0, [r0, r1, lsl #1]
 80023fe:      	subs	r2, r3, #0x2
 8002400:      	add	r1, sp, #0xc
 8002402:      	strh	r0, [r1, r2]
 8002404:      	b	0x8002438 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0xca> @ imm = #0x30
 8002406:      	movs	r3, #0x27
 8002408:      	cmp	r4, #0x63
 800240a:      	ble	0x80023f4 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0x86> @ imm = #-0x1a
 800240c:      	uxth	r1, r4
 800240e:      	movw	r2, #0x147b
 8002412:      	lsrs	r1, r1, #0x2
 8002414:      	subs	r3, #0x2
 8002416:      	muls	r1, r2, r1
 8002418:      	movs	r2, #0x64
 800241a:      	add	r6, sp, #0xc
 800241c:      	lsrs	r1, r1, #0x11
 800241e:      	mls	r2, r1, r2, r4
 8002422:      	uxth	r2, r2
 8002424:      	ldrh.w	r2, [r0, r2, lsl #1]
 8002428:      	strh	r2, [r6, r3]
 800242a:      	cmp	r1, #0xa
 800242c:      	bge	0x80023fa <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h6448c3170ee92be5+0x8c> @ imm = #-0x36
 800242e:      	subs	r2, r3, #0x1
 8002430:      	add.w	r0, r1, #0x30
 8002434:      	add	r1, sp, #0xc
 8002436:      	strb	r0, [r1, r2]
 8002438:      	add	r1, sp, #0xc
 800243a:      	rsb.w	r0, r2, #0x27
 800243e:      	add	r1, r2
 8002440:      	movw	r2, #0x32e4
 8002444:      	strd	r1, r0, [sp]
 8002448:      	movt	r2, #0x800
 800244c:      	mov	r0, r5
 800244e:      	movs	r1, #0x1
 8002450:      	movs	r3, #0x0
 8002452:      	bl	0x8001bd8 <core::fmt::Formatter::pad_integral::he42f541a22a9ab0e> @ imm = #-0x87e
 8002456:      	add	sp, #0x34
 8002458:      	pop.w	{r8, r9, r10, r11}
 800245c:      	pop	{r4, r5, r6, r7, pc}

0800245e <<&T as core::fmt::Display>::fmt::h1083155e25397f62>:
 800245e:      	mov	r3, r1
 8002460:      	ldrd	r1, r2, [r0]
 8002464:      	mov	r0, r3
 8002466:      	b.w	0x8001f00 <core::fmt::Formatter::pad::h5af7202c4eb8783b> @ imm = #-0x56a

0800246a <<&T as core::fmt::Display>::fmt::h2561bc0ee1880a00>:
 800246a:      	ldr	r0, [r0]
 800246c:      	mov	r3, r1
 800246e:      	ldrd	r1, r2, [r0]
 8002472:      	mov	r0, r3
 8002474:      	b.w	0x8001f00 <core::fmt::Formatter::pad::h5af7202c4eb8783b> @ imm = #-0x578

08002478 <<&T as core::fmt::Display>::fmt::h36541be20ffb1583>:
 8002478:      	push	{r4, r5, r6, r7, lr}
 800247a:      	add	r7, sp, #0xc
 800247c:      	push.w	{r8, r9, r11}
 8002480:      	sub	sp, #0x18
 8002482:      	ldr.w	lr, [r0]
 8002486:      	mov	r2, sp
 8002488:      	ldrd	r12, r1, [r1, #24]
 800248c:      	mov	r3, r2
 800248e:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 8002492:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 8002496:      	mov	r0, r12
 8002498:      	bl	0x8001a4e <core::fmt::write::h706ba0ed69d89af5> @ imm = #-0xa4e
 800249c:      	add	sp, #0x18
 800249e:      	pop.w	{r8, r9, r11}
 80024a2:      	pop	{r4, r5, r6, r7, pc}

080024a4 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 80024a4:      	push	{r7, lr}
 80024a6:      	mov	r7, sp
 80024a8:      	sub	sp, #0x50
 80024aa:      	str	r0, [sp, #0x14]
;     interrupt::disable();
 80024ac:      	bl	0x8002518 <cortex_m::interrupt::disable::hf703198608de8728> @ imm = #0x68
 80024b0:      	b	0x80024b2 <rust_begin_unwind+0xe> @ imm = #-0x2
;     let itm = unsafe { &mut *ITM::ptr() };
 80024b2:      	b	0x80024b4 <rust_begin_unwind+0x10> @ imm = #-0x2
 80024b4:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 80024b8:      	str	r0, [sp, #0x40]
;     let stim = &mut itm.stim[0];
 80024ba:      	mov	r1, r0
 80024bc:      	str	r1, [sp, #0x8]
 80024be:      	str	r0, [sp, #0x44]
 80024c0:      	add	r0, sp, #0x14
;     iprintln!(stim, "{}", info);
 80024c2:      	str	r0, [sp, #0x38]
 80024c4:      	ldr	r0, [sp, #0x38]
 80024c6:      	str	r0, [sp, #0x48]
 80024c8:      	movw	r1, #0x2525
 80024cc:      	movt	r1, #0x800
 80024d0:      	bl	0x8002596 <core::fmt::ArgumentV1::new::he1ee410631f10b5f> @ imm = #0xc2
 80024d4:      	str	r0, [sp, #0xc]
 80024d6:      	str	r1, [sp, #0x10]
 80024d8:      	b	0x80024da <rust_begin_unwind+0x36> @ imm = #-0x2
 80024da:      	ldr	r0, [sp, #0x10]
 80024dc:      	ldr	r1, [sp, #0xc]
 80024de:      	str	r1, [sp, #0x30]
 80024e0:      	str	r0, [sp, #0x34]
 80024e2:      	add	r3, sp, #0x30
 80024e4:      	str	r3, [sp, #0x4c]
 80024e6:      	mov	r1, sp
 80024e8:      	movs	r0, #0x1
 80024ea:      	str	r0, [r1]
 80024ec:      	movw	r1, #0x34c4
 80024f0:      	movt	r1, #0x800
 80024f4:      	add	r0, sp, #0x18
 80024f6:      	movs	r2, #0x2
 80024f8:      	bl	0x80025c0 <core::fmt::Arguments::new_v1::hdcec94d5d708be3b> @ imm = #0xc4
 80024fc:      	b	0x80024fe <rust_begin_unwind+0x5a> @ imm = #-0x2
 80024fe:      	ldr	r0, [sp, #0x8]
 8002500:      	add	r1, sp, #0x18
 8002502:      	bl	0x8002774 <cortex_m::itm::write_fmt::h2eed19e1c7d5e462> @ imm = #0x26e
 8002506:      	b	0x8002508 <rust_begin_unwind+0x64> @ imm = #-0x2
 8002508:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 800250a:      	strb	r0, [r7, #-17]
 800250e:      	ldrb	r0, [r7, #-17]
 8002512:      	bl	0x8002fd0 <core::sync::atomic::compiler_fence::h7125b59ad90b6b32> @ imm = #0xaba
 8002516:      	b	0x8002508 <rust_begin_unwind+0x64> @ imm = #-0x12

08002518 <cortex_m::interrupt::disable::hf703198608de8728>:
; pub fn disable() {
 8002518:      	push	{r7, lr}
 800251a:      	mov	r7, sp
;     call_asm!(__cpsid());
 800251c:      	bl	0x80018dc <__cpsid>     @ imm = #-0xc44
 8002520:      	b	0x8002522 <cortex_m::interrupt::disable::hf703198608de8728+0xa> @ imm = #-0x2
; }
 8002522:      	pop	{r7, pc}

08002524 <<&T as core::fmt::Display>::fmt::h27829cc7e034eb55>:
 8002524:      	push	{r7, lr}
 8002526:      	mov	r7, sp
 8002528:      	sub	sp, #0x10
 800252a:      	str	r0, [sp, #0x8]
 800252c:      	str	r1, [sp, #0xc]
 800252e:      	ldr	r0, [r0]
 8002530:      	bl	0x8001904 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::hb1e1cb861cd70b0c> @ imm = #-0xc30
 8002534:      	str	r0, [sp, #0x4]
 8002536:      	b	0x8002538 <<&T as core::fmt::Display>::fmt::h27829cc7e034eb55+0x14> @ imm = #-0x2
 8002538:      	ldr	r0, [sp, #0x4]
 800253a:      	and	r0, r0, #0x1
 800253e:      	add	sp, #0x10
 8002540:      	pop	{r7, pc}

08002542 <core::fmt::ArgumentV1::new::h51bb76e2b62c003e>:
 8002542:      	sub	sp, #0x24
 8002544:      	str	r0, [sp, #0x4]
 8002546:      	str	r0, [sp, #0x14]
 8002548:      	str	r1, [sp, #0x18]
 800254a:      	str	r1, [sp, #0x1c]
 800254c:      	ldr	r0, [sp, #0x1c]
 800254e:      	str	r0, [sp, #0x8]
 8002550:      	b	0x8002552 <core::fmt::ArgumentV1::new::h51bb76e2b62c003e+0x10> @ imm = #-0x2
 8002552:      	ldr	r0, [sp, #0x4]
 8002554:      	str	r0, [sp, #0x20]
 8002556:      	ldr	r0, [sp, #0x20]
 8002558:      	str	r0, [sp]
 800255a:      	b	0x800255c <core::fmt::ArgumentV1::new::h51bb76e2b62c003e+0x1a> @ imm = #-0x2
 800255c:      	ldr	r0, [sp, #0x8]
 800255e:      	ldr	r1, [sp]
 8002560:      	str	r1, [sp, #0xc]
 8002562:      	str	r0, [sp, #0x10]
 8002564:      	ldr	r0, [sp, #0xc]
 8002566:      	ldr	r1, [sp, #0x10]
 8002568:      	add	sp, #0x24
 800256a:      	bx	lr

0800256c <core::fmt::ArgumentV1::new::hb7927ee700e59a44>:
 800256c:      	sub	sp, #0x24
 800256e:      	str	r0, [sp, #0x4]
 8002570:      	str	r0, [sp, #0x14]
 8002572:      	str	r1, [sp, #0x18]
 8002574:      	str	r1, [sp, #0x1c]
 8002576:      	ldr	r0, [sp, #0x1c]
 8002578:      	str	r0, [sp, #0x8]
 800257a:      	b	0x800257c <core::fmt::ArgumentV1::new::hb7927ee700e59a44+0x10> @ imm = #-0x2
 800257c:      	ldr	r0, [sp, #0x4]
 800257e:      	str	r0, [sp, #0x20]
 8002580:      	ldr	r0, [sp, #0x20]
 8002582:      	str	r0, [sp]
 8002584:      	b	0x8002586 <core::fmt::ArgumentV1::new::hb7927ee700e59a44+0x1a> @ imm = #-0x2
 8002586:      	ldr	r0, [sp, #0x8]
 8002588:      	ldr	r1, [sp]
 800258a:      	str	r1, [sp, #0xc]
 800258c:      	str	r0, [sp, #0x10]
 800258e:      	ldr	r0, [sp, #0xc]
 8002590:      	ldr	r1, [sp, #0x10]
 8002592:      	add	sp, #0x24
 8002594:      	bx	lr

08002596 <core::fmt::ArgumentV1::new::he1ee410631f10b5f>:
 8002596:      	sub	sp, #0x24
 8002598:      	str	r0, [sp, #0x4]
 800259a:      	str	r0, [sp, #0x14]
 800259c:      	str	r1, [sp, #0x18]
 800259e:      	str	r1, [sp, #0x1c]
 80025a0:      	ldr	r0, [sp, #0x1c]
 80025a2:      	str	r0, [sp, #0x8]
 80025a4:      	b	0x80025a6 <core::fmt::ArgumentV1::new::he1ee410631f10b5f+0x10> @ imm = #-0x2
 80025a6:      	ldr	r0, [sp, #0x4]
 80025a8:      	str	r0, [sp, #0x20]
 80025aa:      	ldr	r0, [sp, #0x20]
 80025ac:      	str	r0, [sp]
 80025ae:      	b	0x80025b0 <core::fmt::ArgumentV1::new::he1ee410631f10b5f+0x1a> @ imm = #-0x2
 80025b0:      	ldr	r0, [sp, #0x8]
 80025b2:      	ldr	r1, [sp]
 80025b4:      	str	r1, [sp, #0xc]
 80025b6:      	str	r0, [sp, #0x10]
 80025b8:      	ldr	r0, [sp, #0xc]
 80025ba:      	ldr	r1, [sp, #0x10]
 80025bc:      	add	sp, #0x24
 80025be:      	bx	lr

080025c0 <core::fmt::Arguments::new_v1::hdcec94d5d708be3b>:
 80025c0:      	push	{r7, lr}
 80025c2:      	mov	r7, sp
 80025c4:      	sub	sp, #0x30
 80025c6:      	str	r3, [sp]
 80025c8:      	str	r2, [sp, #0x4]
 80025ca:      	str	r1, [sp, #0x8]
 80025cc:      	str	r0, [sp, #0xc]
 80025ce:      	ldr	r0, [r7, #0x8]
 80025d0:      	str	r0, [sp, #0x10]
 80025d2:      	str	r1, [sp, #0x20]
 80025d4:      	str	r2, [sp, #0x24]
 80025d6:      	str	r3, [sp, #0x28]
 80025d8:      	str	r0, [sp, #0x2c]
 80025da:      	cmp	r2, r0
 80025dc:      	blo	0x80025f4 <core::fmt::Arguments::new_v1::hdcec94d5d708be3b+0x34> @ imm = #0x14
 80025de:      	b	0x80025e0 <core::fmt::Arguments::new_v1::hdcec94d5d708be3b+0x20> @ imm = #-0x2
 80025e0:      	ldr	r1, [sp, #0x4]
 80025e2:      	ldr	r0, [sp, #0x10]
 80025e4:      	adds	r2, r0, #0x1
 80025e6:      	movs	r0, #0x0
 80025e8:      	cmp	r1, r2
 80025ea:      	it	hi
 80025ec:      	movhi	r0, #0x1
 80025ee:      	strb	r0, [r7, #-25]
 80025f2:      	b	0x80025fc <core::fmt::Arguments::new_v1::hdcec94d5d708be3b+0x3c> @ imm = #0x6
 80025f4:      	movs	r0, #0x1
 80025f6:      	strb	r0, [r7, #-25]
 80025fa:      	b	0x80025fc <core::fmt::Arguments::new_v1::hdcec94d5d708be3b+0x3c> @ imm = #-0x2
 80025fc:      	ldrb	r0, [r7, #-25]
 8002600:      	lsls	r0, r0, #0x1f
 8002602:      	cbnz	r0, 0x800263c <core::fmt::Arguments::new_v1::hdcec94d5d708be3b+0x7c> @ imm = #0x36
 8002604:      	b	0x8002606 <core::fmt::Arguments::new_v1::hdcec94d5d708be3b+0x46> @ imm = #-0x2
 8002606:      	ldr	r0, [sp, #0x10]
 8002608:      	ldr	r1, [sp, #0xc]
 800260a:      	ldr	r2, [sp]
 800260c:      	ldr	r3, [sp, #0x4]
 800260e:      	ldr.w	r12, [sp, #0x8]
 8002612:      	mov.w	lr, #0x0
 8002616:      	str.w	lr, [sp, #0x1c]
 800261a:      	str.w	lr, [sp, #0x18]
 800261e:      	str.w	lr, [sp, #0x18]
 8002622:      	str.w	r12, [r1]
 8002626:      	str	r3, [r1, #0x4]
 8002628:      	ldr.w	r12, [sp, #0x18]
 800262c:      	ldr	r3, [sp, #0x1c]
 800262e:      	str.w	r12, [r1, #0x8]
 8002632:      	str	r3, [r1, #0xc]
 8002634:      	str	r2, [r1, #0x10]
 8002636:      	str	r0, [r1, #0x14]
 8002638:      	add	sp, #0x30
 800263a:      	pop	{r7, pc}
 800263c:      	movw	r0, #0x34d4
 8002640:      	movt	r0, #0x800
 8002644:      	movw	r2, #0x352c
 8002648:      	movt	r2, #0x800
 800264c:      	movs	r1, #0xc
 800264e:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #-0xc5a
 8002652:      	trap

08002654 <core::fmt::Write::write_char::h51b573fa11e188ed>:
 8002654:      	push	{r7, lr}
 8002656:      	mov	r7, sp
 8002658:      	sub	sp, #0x20
 800265a:      	str	r1, [sp, #0x4]
 800265c:      	mov	r1, r0
 800265e:      	ldr	r0, [sp, #0x4]
 8002660:      	str	r1, [sp, #0x8]
 8002662:      	str	r1, [sp, #0x18]
 8002664:      	str	r0, [sp, #0x1c]
 8002666:      	movs	r1, #0x0
 8002668:      	str	r1, [sp, #0x14]
 800266a:      	add	r1, sp, #0x14
 800266c:      	movs	r2, #0x4
 800266e:      	bl	0x800299e <core::char::methods::<impl char>::encode_utf8::h44f26cc436e44f1a> @ imm = #0x32c
 8002672:      	str	r0, [sp, #0xc]
 8002674:      	str	r1, [sp, #0x10]
 8002676:      	b	0x8002678 <core::fmt::Write::write_char::h51b573fa11e188ed+0x24> @ imm = #-0x2
 8002678:      	ldr	r2, [sp, #0x10]
 800267a:      	ldr	r1, [sp, #0xc]
 800267c:      	ldr	r0, [sp, #0x8]
 800267e:      	bl	0x8002738 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hc73dfa7300ef41d3> @ imm = #0xb6
 8002682:      	str	r0, [sp]
 8002684:      	b	0x8002686 <core::fmt::Write::write_char::h51b573fa11e188ed+0x32> @ imm = #-0x2
 8002686:      	ldr	r0, [sp]
 8002688:      	and	r0, r0, #0x1
 800268c:      	add	sp, #0x20
 800268e:      	pop	{r7, pc}

08002690 <core::fmt::Write::write_fmt::h15e6512c5d4e26e4>:
 8002690:      	push	{r4, r5, r6, r7, lr}
 8002692:      	add	r7, sp, #0xc
 8002694:      	str	r11, [sp, #-4]!
 8002698:      	sub	sp, #0x20
 800269a:      	str	r0, [sp, #0x4]
 800269c:      	add	r2, sp, #0x8
 800269e:      	mov	r0, r2
 80026a0:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 80026a4:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 80026a8:      	movw	r1, #0x353c
 80026ac:      	movt	r1, #0x800
 80026b0:      	add	r0, sp, #0x4
 80026b2:      	bl	0x8001a4e <core::fmt::write::h706ba0ed69d89af5> @ imm = #-0xc68
 80026b6:      	str	r0, [sp]
 80026b8:      	b	0x80026ba <core::fmt::Write::write_fmt::h15e6512c5d4e26e4+0x2a> @ imm = #-0x2
 80026ba:      	ldr	r0, [sp]
 80026bc:      	and	r0, r0, #0x1
 80026c0:      	add	sp, #0x20
 80026c2:      	ldr	r11, [sp], #4
 80026c6:      	pop	{r4, r5, r6, r7, pc}

080026c8 <<&mut W as core::fmt::Write>::write_char::hd63157be1c0d166d>:
 80026c8:      	push	{r7, lr}
 80026ca:      	mov	r7, sp
 80026cc:      	sub	sp, #0x10
 80026ce:      	str	r0, [sp, #0x8]
 80026d0:      	str	r1, [sp, #0xc]
 80026d2:      	ldr	r0, [r0]
 80026d4:      	bl	0x8002654 <core::fmt::Write::write_char::h51b573fa11e188ed> @ imm = #-0x84
 80026d8:      	str	r0, [sp, #0x4]
 80026da:      	b	0x80026dc <<&mut W as core::fmt::Write>::write_char::hd63157be1c0d166d+0x14> @ imm = #-0x2
 80026dc:      	ldr	r0, [sp, #0x4]
 80026de:      	and	r0, r0, #0x1
 80026e2:      	add	sp, #0x10
 80026e4:      	pop	{r7, pc}

080026e6 <<&mut W as core::fmt::Write>::write_fmt::he6a3e79d9446aa92>:
 80026e6:      	push	{r4, r5, r6, r7, lr}
 80026e8:      	add	r7, sp, #0xc
 80026ea:      	str	r8, [sp, #-4]!
 80026ee:      	sub	sp, #0x20
 80026f0:      	mov	r3, r1
 80026f2:      	str	r0, [sp, #0x1c]
 80026f4:      	ldr	r0, [r0]
 80026f6:      	add	r1, sp, #0x4
 80026f8:      	mov	r2, r1
 80026fa:      	ldm.w	r3, {r4, r5, r6, r8, r12, lr}
 80026fe:      	stm.w	r2, {r4, r5, r6, r8, r12, lr}
 8002702:      	bl	0x8002690 <core::fmt::Write::write_fmt::h15e6512c5d4e26e4> @ imm = #-0x76
 8002706:      	str	r0, [sp]
 8002708:      	b	0x800270a <<&mut W as core::fmt::Write>::write_fmt::he6a3e79d9446aa92+0x24> @ imm = #-0x2
 800270a:      	ldr	r0, [sp]
 800270c:      	and	r0, r0, #0x1
 8002710:      	add	sp, #0x20
 8002712:      	ldr	r8, [sp], #4
 8002716:      	pop	{r4, r5, r6, r7, pc}

08002718 <<&mut W as core::fmt::Write>::write_str::h8ee3781609ae33ec>:
 8002718:      	push	{r7, lr}
 800271a:      	mov	r7, sp
 800271c:      	sub	sp, #0x10
 800271e:      	str	r0, [sp, #0x4]
 8002720:      	str	r1, [sp, #0x8]
 8002722:      	str	r2, [sp, #0xc]
 8002724:      	ldr	r0, [r0]
 8002726:      	bl	0x8002738 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hc73dfa7300ef41d3> @ imm = #0xe
 800272a:      	str	r0, [sp]
 800272c:      	b	0x800272e <<&mut W as core::fmt::Write>::write_str::h8ee3781609ae33ec+0x16> @ imm = #-0x2
 800272e:      	ldr	r0, [sp]
 8002730:      	and	r0, r0, #0x1
 8002734:      	add	sp, #0x10
 8002736:      	pop	{r7, pc}

08002738 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hc73dfa7300ef41d3>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 8002738:      	push	{r7, lr}
 800273a:      	mov	r7, sp
 800273c:      	sub	sp, #0x30
 800273e:      	str	r0, [sp, #0x14]
 8002740:      	str	r1, [sp, #0x18]
 8002742:      	str	r2, [sp, #0x1c]
;         write_all(self.0, s.as_bytes());
 8002744:      	ldr	r0, [r0]
 8002746:      	str	r0, [sp, #0x4]
 8002748:      	str	r1, [sp, #0x20]
 800274a:      	str	r2, [sp, #0x24]
 800274c:      	str	r1, [sp, #0x28]
 800274e:      	str	r2, [sp, #0x2c]
 8002750:      	ldr	r0, [sp, #0x28]
 8002752:      	str	r0, [sp, #0x8]
 8002754:      	ldr	r0, [sp, #0x2c]
;         write_all(self.0, s.as_bytes());
 8002756:      	str	r0, [sp, #0xc]
 8002758:      	b	0x800275a <<cortex_m::itm::Port as core::fmt::Write>::write_str::hc73dfa7300ef41d3+0x22> @ imm = #-0x2
 800275a:      	ldr	r2, [sp, #0xc]
 800275c:      	ldr	r1, [sp, #0x8]
 800275e:      	ldr	r0, [sp, #0x4]
 8002760:      	bl	0x8002d3e <cortex_m::itm::write_all::hdb5459c305bf1828> @ imm = #0x5da
 8002764:      	b	0x8002766 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hc73dfa7300ef41d3+0x2e> @ imm = #-0x2
 8002766:      	movs	r0, #0x0
;         Ok(())
 8002768:      	strb	r0, [r7, #-29]
;     }
 800276c:      	ldrb	r0, [r7, #-29]
 8002770:      	add	sp, #0x30
 8002772:      	pop	{r7, pc}

08002774 <cortex_m::itm::write_fmt::h2eed19e1c7d5e462>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 8002774:      	push	{r4, r5, r6, r7, lr}
 8002776:      	add	r7, sp, #0xc
 8002778:      	str	r11, [sp, #-4]!
 800277c:      	sub	sp, #0x28
 800277e:      	mov	r2, r1
 8002780:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 8002782:      	str	r0, [sp, #0x8]
 8002784:      	add	r1, sp, #0xc
 8002786:      	mov	r0, r1
 8002788:      	ldm.w	r2, {r3, r4, r5, r6, r12, lr}
 800278c:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8002790:      	add	r0, sp, #0x8
 8002792:      	bl	0x8002690 <core::fmt::Write::write_fmt::h15e6512c5d4e26e4> @ imm = #-0x106
 8002796:      	str	r0, [sp, #0x4]
 8002798:      	b	0x800279a <cortex_m::itm::write_fmt::h2eed19e1c7d5e462+0x26> @ imm = #-0x2
 800279a:      	ldr	r0, [sp, #0x4]
 800279c:      	and	r0, r0, #0x1
 80027a0:      	bl	0x8002f90 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE> @ imm = #0x7ec
 80027a4:      	b	0x80027a6 <cortex_m::itm::write_fmt::h2eed19e1c7d5e462+0x32> @ imm = #-0x2
; }
 80027a6:      	add	sp, #0x28
 80027a8:      	ldr	r11, [sp], #4
 80027ac:      	pop	{r4, r5, r6, r7, pc}
 80027ae:      	bmi	0x800275a <<cortex_m::itm::Port as core::fmt::Write>::write_str::hc73dfa7300ef41d3+0x22> @ imm = #-0x58

080027b0 <core::char::methods::encode_utf8_raw::hbd37bc52fab3645e>:
 80027b0:      	push	{r7, lr}
 80027b2:      	mov	r7, sp
 80027b4:      	sub	sp, #0xe0
 80027b6:      	str	r2, [sp, #0x40]
 80027b8:      	str	r1, [sp, #0x44]
 80027ba:      	str	r0, [sp, #0x48]
 80027bc:      	str	r1, [sp, #0xa0]
 80027be:      	str	r2, [sp, #0xa4]
 80027c0:      	ldr	r0, [sp, #0x48]
 80027c2:      	bl	0x80029ca <core::char::methods::len_utf8::h3bfe456054044b20> @ imm = #0x204
 80027c6:      	str	r0, [sp, #0x4c]
 80027c8:      	b	0x80027ca <core::char::methods::encode_utf8_raw::hbd37bc52fab3645e+0x1a> @ imm = #-0x2
 80027ca:      	ldr	r1, [sp, #0x40]
 80027cc:      	ldr	r0, [sp, #0x44]
 80027ce:      	ldr	r2, [sp, #0x4c]
 80027d0:      	str	r2, [sp, #0x34]
 80027d2:      	movw	r2, #0x35a4
 80027d6:      	movt	r2, #0x800
 80027da:      	bl	0x8002a0c <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h371419ee3ab54931> @ imm = #0x22e
 80027de:      	str	r0, [sp, #0x38]
 80027e0:      	str	r1, [sp, #0x3c]
 80027e2:      	b	0x80027e4 <core::char::methods::encode_utf8_raw::hbd37bc52fab3645e+0x34> @ imm = #-0x2
 80027e4:      	ldr	r0, [sp, #0x3c]
 80027e6:      	ldr	r1, [sp, #0x38]
 80027e8:      	ldr	r2, [sp, #0x34]
 80027ea:      	str	r2, [sp, #0x50]
 80027ec:      	str	r1, [sp, #0x54]
 80027ee:      	str	r0, [sp, #0x58]
 80027f0:      	ldr	r0, [sp, #0x50]
 80027f2:      	subs	r0, #0x1
 80027f4:      	mov	r1, r0
 80027f6:      	str	r1, [sp, #0x30]
 80027f8:      	cmp	r0, #0x3
 80027fa:      	bhi	0x8002806 <$t.2>        @ imm = #0x8
 80027fc:      	ldr	r1, [sp, #0x30]
 80027fe:      	tbb	[pc, r1]

08002802 <$d.1>:
 8002802:	1b 1f 23 27	.word	0x27231f1b

08002806 <$t.2>:
 8002806:      	ldr	r0, [sp, #0x40]
 8002808:      	str	r0, [sp, #0x98]
 800280a:      	add	r0, sp, #0x4c
 800280c:      	str	r0, [sp, #0x8c]
 800280e:      	add	r0, sp, #0x48
 8002810:      	str	r0, [sp, #0x90]
 8002812:      	add	r0, sp, #0x98
 8002814:      	str	r0, [sp, #0x94]
 8002816:      	ldr	r0, [sp, #0x8c]
 8002818:      	str	r0, [sp, #0xd0]
 800281a:      	ldr	r1, [sp, #0x90]
 800281c:      	str	r1, [sp, #0x20]
 800281e:      	str	r1, [sp, #0xd4]
 8002820:      	ldr	r1, [sp, #0x94]
 8002822:      	str	r1, [sp, #0x24]
 8002824:      	str	r1, [sp, #0xd8]
 8002826:      	movw	r1, #0x236f
 800282a:      	movt	r1, #0x800
 800282e:      	bl	0x8002542 <core::fmt::ArgumentV1::new::h51bb76e2b62c003e> @ imm = #-0x2f0
 8002832:      	str	r0, [sp, #0x28]
 8002834:      	str	r1, [sp, #0x2c]
 8002836:      	b	0x800292c <$t.2+0x126>  @ imm = #0xf2
 8002838:      	ldr	r0, [sp, #0x58]
 800283a:      	cmp	r0, #0x0
 800283c:      	bne	0x800291a <$t.2+0x114>  @ imm = #0xda
 800283e:      	b	0x8002806 <$t.2>        @ imm = #-0x3c
 8002840:      	ldr	r0, [sp, #0x58]
 8002842:      	cmp	r0, #0x1
 8002844:      	bhi	0x80028f6 <$t.2+0xf0>   @ imm = #0xae
 8002846:      	b	0x8002806 <$t.2>        @ imm = #-0x44
 8002848:      	ldr	r0, [sp, #0x58]
 800284a:      	cmp	r0, #0x2
 800284c:      	bhi	0x80028c0 <$t.2+0xba>   @ imm = #0x70
 800284e:      	b	0x8002806 <$t.2>        @ imm = #-0x4c
 8002850:      	ldr	r0, [sp, #0x58]
 8002852:      	cmp	r0, #0x4
 8002854:      	blo	0x8002806 <$t.2>        @ imm = #-0x52
 8002856:      	b	0x8002858 <$t.2+0x52>   @ imm = #-0x2
 8002858:      	ldr	r2, [sp, #0x54]
 800285a:      	str	r2, [sp, #0xa8]
 800285c:      	ldr.w	r12, [sp, #0x54]
 8002860:      	add.w	r0, r12, #0x1
 8002864:      	str	r0, [sp, #0xac]
 8002866:      	ldr	r3, [sp, #0x54]
 8002868:      	adds	r0, r3, #0x2
 800286a:      	str	r0, [sp, #0xb0]
 800286c:      	ldr	r1, [sp, #0x54]
 800286e:      	adds	r0, r1, #0x3
 8002870:      	str	r0, [sp, #0xb4]
 8002872:      	ldr	r0, [sp, #0x48]
 8002874:      	lsrs	r0, r0, #0x12
 8002876:      	mov.w	lr, #0x1e
 800287a:      	bfi	r0, lr, #3, #29
 800287e:      	strb	r0, [r2]
 8002880:      	ldr	r0, [sp, #0x48]
 8002882:      	lsrs	r0, r0, #0xc
 8002884:      	movs	r2, #0x2
 8002886:      	bfi	r0, r2, #6, #26
 800288a:      	strb.w	r0, [r12, #0x1]
 800288e:      	ldr	r0, [sp, #0x48]
 8002890:      	lsrs	r0, r0, #0x6
 8002892:      	bfi	r0, r2, #6, #26
 8002896:      	strb	r0, [r3, #0x2]
 8002898:      	ldrb.w	r0, [sp, #0x48]
 800289c:      	bfi	r0, r2, #6, #26
 80028a0:      	strb	r0, [r1, #0x3]
 80028a2:      	b	0x80028a4 <$t.2+0x9e>   @ imm = #-0x2
 80028a4:      	ldr	r1, [sp, #0x40]
 80028a6:      	ldr	r0, [sp, #0x44]
 80028a8:      	ldr	r2, [sp, #0x4c]
 80028aa:      	str	r2, [sp, #0x9c]
 80028ac:      	ldr	r2, [sp, #0x9c]
 80028ae:      	movw	r3, #0x35b4
 80028b2:      	movt	r3, #0x800
 80028b6:      	bl	0x8002a28 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h8e1570ade284f5cb> @ imm = #0x16e
 80028ba:      	str	r0, [sp, #0x18]
 80028bc:      	str	r1, [sp, #0x1c]
 80028be:      	b	0x8002924 <$t.2+0x11e>  @ imm = #0x62
 80028c0:      	ldr	r2, [sp, #0x54]
 80028c2:      	str	r2, [sp, #0xb8]
 80028c4:      	ldr	r3, [sp, #0x54]
 80028c6:      	adds	r0, r3, #0x1
 80028c8:      	str	r0, [sp, #0xbc]
 80028ca:      	ldr	r1, [sp, #0x54]
 80028cc:      	adds	r0, r1, #0x2
 80028ce:      	str	r0, [sp, #0xc0]
 80028d0:      	ldr	r0, [sp, #0x48]
 80028d2:      	lsrs	r0, r0, #0xc
 80028d4:      	mov.w	r12, #0xe
 80028d8:      	bfi	r0, r12, #4, #28
 80028dc:      	strb	r0, [r2]
 80028de:      	ldr	r0, [sp, #0x48]
 80028e0:      	lsrs	r0, r0, #0x6
 80028e2:      	movs	r2, #0x2
 80028e4:      	bfi	r0, r2, #6, #26
 80028e8:      	strb	r0, [r3, #0x1]
 80028ea:      	ldrb.w	r0, [sp, #0x48]
 80028ee:      	bfi	r0, r2, #6, #26
 80028f2:      	strb	r0, [r1, #0x2]
 80028f4:      	b	0x80028a4 <$t.2+0x9e>   @ imm = #-0x54
 80028f6:      	ldr	r2, [sp, #0x54]
 80028f8:      	str	r2, [sp, #0xc4]
 80028fa:      	ldr	r1, [sp, #0x54]
 80028fc:      	adds	r0, r1, #0x1
 80028fe:      	str	r0, [sp, #0xc8]
 8002900:      	ldr	r0, [sp, #0x48]
 8002902:      	lsrs	r0, r0, #0x6
 8002904:      	movs	r3, #0x6
 8002906:      	bfi	r0, r3, #5, #27
 800290a:      	strb	r0, [r2]
 800290c:      	ldrb.w	r0, [sp, #0x48]
 8002910:      	movs	r2, #0x2
 8002912:      	bfi	r0, r2, #6, #26
 8002916:      	strb	r0, [r1, #0x1]
 8002918:      	b	0x80028a4 <$t.2+0x9e>   @ imm = #-0x78
 800291a:      	ldr	r1, [sp, #0x54]
 800291c:      	str	r1, [sp, #0xcc]
 800291e:      	ldr	r0, [sp, #0x48]
 8002920:      	strb	r0, [r1]
 8002922:      	b	0x80028a4 <$t.2+0x9e>   @ imm = #-0x82
 8002924:      	ldr	r1, [sp, #0x1c]
 8002926:      	ldr	r0, [sp, #0x18]
 8002928:      	add	sp, #0xe0
 800292a:      	pop	{r7, pc}
 800292c:      	ldr	r0, [sp, #0x20]
 800292e:      	movw	r1, #0x22a9
 8002932:      	movt	r1, #0x800
 8002936:      	bl	0x800256c <core::fmt::ArgumentV1::new::hb7927ee700e59a44> @ imm = #-0x3ce
 800293a:      	str	r0, [sp, #0x10]
 800293c:      	str	r1, [sp, #0x14]
 800293e:      	b	0x8002940 <$t.2+0x13a>  @ imm = #-0x2
 8002940:      	ldr	r0, [sp, #0x24]
 8002942:      	movw	r1, #0x236f
 8002946:      	movt	r1, #0x800
 800294a:      	bl	0x8002542 <core::fmt::ArgumentV1::new::h51bb76e2b62c003e> @ imm = #-0x40c
 800294e:      	str	r0, [sp, #0x8]
 8002950:      	str	r1, [sp, #0xc]
 8002952:      	b	0x8002954 <$t.2+0x14e>  @ imm = #-0x2
 8002954:      	ldr	r0, [sp, #0xc]
 8002956:      	ldr	r1, [sp, #0x8]
 8002958:      	ldr	r2, [sp, #0x14]
 800295a:      	ldr	r3, [sp, #0x10]
 800295c:      	ldr.w	r12, [sp, #0x2c]
 8002960:      	ldr.w	lr, [sp, #0x28]
 8002964:      	str.w	lr, [sp, #0x74]
 8002968:      	str.w	r12, [sp, #0x78]
 800296c:      	str	r3, [sp, #0x7c]
 800296e:      	str	r2, [sp, #0x80]
 8002970:      	str	r1, [sp, #0x84]
 8002972:      	str	r0, [sp, #0x88]
 8002974:      	add	r3, sp, #0x74
 8002976:      	str	r3, [sp, #0xdc]
 8002978:      	mov	r0, sp
 800297a:      	movs	r2, #0x3
 800297c:      	str	r2, [r0]
 800297e:      	movw	r1, #0x3600
 8002982:      	movt	r1, #0x800
 8002986:      	add	r0, sp, #0x5c
 8002988:      	bl	0x80025c0 <core::fmt::Arguments::new_v1::hdcec94d5d708be3b> @ imm = #-0x3cc
 800298c:      	b	0x800298e <$t.2+0x188>  @ imm = #-0x2
 800298e:      	movw	r1, #0x3618
 8002992:      	movt	r1, #0x800
 8002996:      	add	r0, sp, #0x5c
 8002998:      	bl	0x8001a28 <core::panicking::panic_fmt::h5468da843dc1007c> @ imm = #-0xf74
 800299c:      	trap

0800299e <core::char::methods::<impl char>::encode_utf8::h44f26cc436e44f1a>:
 800299e:      	push	{r7, lr}
 80029a0:      	mov	r7, sp
 80029a2:      	sub	sp, #0x20
 80029a4:      	str	r0, [sp, #0x14]
 80029a6:      	str	r1, [sp, #0x18]
 80029a8:      	str	r2, [sp, #0x1c]
 80029aa:      	bl	0x80027b0 <core::char::methods::encode_utf8_raw::hbd37bc52fab3645e> @ imm = #-0x1fe
 80029ae:      	str	r0, [sp, #0xc]
 80029b0:      	str	r1, [sp, #0x10]
 80029b2:      	b	0x80029b4 <core::char::methods::<impl char>::encode_utf8::h44f26cc436e44f1a+0x16> @ imm = #-0x2
 80029b4:      	ldr	r1, [sp, #0x10]
 80029b6:      	ldr	r0, [sp, #0xc]
 80029b8:      	bl	0x8002b78 <core::str::converts::from_utf8_unchecked_mut::h086d27a5d83aabdc> @ imm = #0x1bc
 80029bc:      	str	r0, [sp, #0x4]
 80029be:      	str	r1, [sp, #0x8]
 80029c0:      	b	0x80029c2 <core::char::methods::<impl char>::encode_utf8::h44f26cc436e44f1a+0x24> @ imm = #-0x2
 80029c2:      	ldr	r1, [sp, #0x8]
 80029c4:      	ldr	r0, [sp, #0x4]
 80029c6:      	add	sp, #0x20
 80029c8:      	pop	{r7, pc}

080029ca <core::char::methods::len_utf8::h3bfe456054044b20>:
 80029ca:      	sub	sp, #0xc
 80029cc:      	str	r0, [sp]
 80029ce:      	str	r0, [sp, #0x8]
 80029d0:      	cmp	r0, #0x80
 80029d2:      	blo	0x80029e0 <core::char::methods::len_utf8::h3bfe456054044b20+0x16> @ imm = #0xa
 80029d4:      	b	0x80029d6 <core::char::methods::len_utf8::h3bfe456054044b20+0xc> @ imm = #-0x2
 80029d6:      	ldr	r0, [sp]
 80029d8:      	cmp.w	r0, #0x800
 80029dc:      	blo	0x80029f6 <core::char::methods::len_utf8::h3bfe456054044b20+0x2c> @ imm = #0x16
 80029de:      	b	0x80029ec <core::char::methods::len_utf8::h3bfe456054044b20+0x22> @ imm = #0xa
 80029e0:      	movs	r0, #0x1
 80029e2:      	str	r0, [sp, #0x4]
 80029e4:      	b	0x80029e6 <core::char::methods::len_utf8::h3bfe456054044b20+0x1c> @ imm = #-0x2
 80029e6:      	ldr	r0, [sp, #0x4]
 80029e8:      	add	sp, #0xc
 80029ea:      	bx	lr
 80029ec:      	ldr	r0, [sp]
 80029ee:      	cmp.w	r0, #0x10000
 80029f2:      	blo	0x8002a04 <core::char::methods::len_utf8::h3bfe456054044b20+0x3a> @ imm = #0xe
 80029f4:      	b	0x80029fe <core::char::methods::len_utf8::h3bfe456054044b20+0x34> @ imm = #0x6
 80029f6:      	movs	r0, #0x2
 80029f8:      	str	r0, [sp, #0x4]
 80029fa:      	b	0x80029fc <core::char::methods::len_utf8::h3bfe456054044b20+0x32> @ imm = #-0x2
 80029fc:      	b	0x80029e6 <core::char::methods::len_utf8::h3bfe456054044b20+0x1c> @ imm = #-0x1a
 80029fe:      	movs	r0, #0x4
 8002a00:      	str	r0, [sp, #0x4]
 8002a02:      	b	0x8002a0a <core::char::methods::len_utf8::h3bfe456054044b20+0x40> @ imm = #0x4
 8002a04:      	movs	r0, #0x3
 8002a06:      	str	r0, [sp, #0x4]
 8002a08:      	b	0x8002a0a <core::char::methods::len_utf8::h3bfe456054044b20+0x40> @ imm = #-0x2
 8002a0a:      	b	0x80029fc <core::char::methods::len_utf8::h3bfe456054044b20+0x32> @ imm = #-0x12

08002a0c <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h371419ee3ab54931>:
 8002a0c:      	push	{r7, lr}
 8002a0e:      	mov	r7, sp
 8002a10:      	sub	sp, #0x18
 8002a12:      	str	r0, [sp, #0xc]
 8002a14:      	str	r1, [sp, #0x10]
 8002a16:      	bl	0x8002b2c <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::hc145aa960fd8cb43> @ imm = #0x112
 8002a1a:      	str	r0, [sp, #0x4]
 8002a1c:      	str	r1, [sp, #0x8]
 8002a1e:      	b	0x8002a20 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h371419ee3ab54931+0x14> @ imm = #-0x2
 8002a20:      	ldr	r1, [sp, #0x8]
 8002a22:      	ldr	r0, [sp, #0x4]
 8002a24:      	add	sp, #0x18
 8002a26:      	pop	{r7, pc}

08002a28 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h8e1570ade284f5cb>:
 8002a28:      	push	{r7, lr}
 8002a2a:      	mov	r7, sp
 8002a2c:      	sub	sp, #0x18
 8002a2e:      	str	r2, [sp]
 8002a30:      	mov	r2, r1
 8002a32:      	mov	r1, r0
 8002a34:      	ldr	r0, [sp]
 8002a36:      	str	r1, [sp, #0xc]
 8002a38:      	str	r2, [sp, #0x10]
 8002a3a:      	str	r0, [sp, #0x14]
 8002a3c:      	bl	0x8002af8 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h1ba271124b498589> @ imm = #0xb8
 8002a40:      	str	r0, [sp, #0x4]
 8002a42:      	str	r1, [sp, #0x8]
 8002a44:      	b	0x8002a46 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h8e1570ade284f5cb+0x1e> @ imm = #-0x2
 8002a46:      	ldr	r1, [sp, #0x8]
 8002a48:      	ldr	r0, [sp, #0x4]
 8002a4a:      	add	sp, #0x18
 8002a4c:      	pop	{r7, pc}

08002a4e <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h3d6734aff7cc60ea>:
 8002a4e:      	push	{r7, lr}
 8002a50:      	mov	r7, sp
 8002a52:      	sub	sp, #0x48
 8002a54:      	str	r1, [sp, #0x10]
 8002a56:      	str	r0, [sp, #0x14]
 8002a58:      	str	r0, [sp, #0x1c]
 8002a5a:      	str	r1, [sp, #0x20]
 8002a5c:      	str	r2, [sp, #0x24]
 8002a5e:      	str	r3, [sp, #0x28]
 8002a60:      	str	r2, [sp, #0x2c]
 8002a62:      	str	r3, [sp, #0x30]
 8002a64:      	str	r2, [sp, #0x18]
 8002a66:      	b	0x8002a68 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h3d6734aff7cc60ea+0x1a> @ imm = #-0x2
 8002a68:      	ldr	r0, [sp, #0x18]
 8002a6a:      	ldr	r1, [sp, #0x14]
 8002a6c:      	str	r0, [sp, #0x34]
 8002a6e:      	str	r1, [sp, #0x38]
 8002a70:      	str	r0, [sp, #0x3c]
 8002a72:      	str	r1, [sp, #0x40]
 8002a74:      	add	r0, r1
 8002a76:      	str	r0, [sp, #0x44]
 8002a78:      	ldr	r0, [sp, #0x44]
 8002a7a:      	str	r0, [sp, #0xc]
 8002a7c:      	b	0x8002a7e <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h3d6734aff7cc60ea+0x30> @ imm = #-0x2
 8002a7e:      	ldr	r0, [sp, #0xc]
 8002a80:      	ldr	r1, [sp, #0x10]
 8002a82:      	ldr	r2, [sp, #0x14]
 8002a84:      	subs	r1, r1, r2
 8002a86:      	bl	0x8002b36 <core::ptr::slice_from_raw_parts_mut::hd38365eda9281b13> @ imm = #0xac
 8002a8a:      	str	r0, [sp, #0x4]
 8002a8c:      	str	r1, [sp, #0x8]
 8002a8e:      	b	0x8002a90 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h3d6734aff7cc60ea+0x42> @ imm = #-0x2
 8002a90:      	ldr	r1, [sp, #0x8]
 8002a92:      	ldr	r0, [sp, #0x4]
 8002a94:      	add	sp, #0x48
 8002a96:      	pop	{r7, pc}

08002a98 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f>:
 8002a98:      	push	{r7, lr}
 8002a9a:      	mov	r7, sp
 8002a9c:      	sub	sp, #0x30
 8002a9e:      	str	r3, [sp, #0xc]
 8002aa0:      	str	r2, [sp, #0x10]
 8002aa2:      	str	r1, [sp, #0x14]
 8002aa4:      	str	r0, [sp, #0x18]
 8002aa6:      	ldr.w	r12, [r7, #0x8]
 8002aaa:      	str.w	r12, [sp, #0x1c]
 8002aae:      	str	r0, [sp, #0x20]
 8002ab0:      	str	r1, [sp, #0x24]
 8002ab2:      	str	r2, [sp, #0x28]
 8002ab4:      	str	r3, [sp, #0x2c]
 8002ab6:      	cmp	r0, r1
 8002ab8:      	bhi	0x8002ac6 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f+0x2e> @ imm = #0xa
 8002aba:      	b	0x8002abc <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f+0x24> @ imm = #-0x2
 8002abc:      	ldr	r0, [sp, #0x14]
 8002abe:      	ldr	r1, [sp, #0xc]
 8002ac0:      	cmp	r0, r1
 8002ac2:      	bhi	0x8002ae4 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f+0x4c> @ imm = #0x1e
 8002ac4:      	b	0x8002ad2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f+0x3a> @ imm = #0xa
 8002ac6:      	ldr	r2, [sp, #0x1c]
 8002ac8:      	ldr	r1, [sp, #0x14]
 8002aca:      	ldr	r0, [sp, #0x18]
 8002acc:      	bl	0x8002266 <core::slice::index::slice_index_order_fail::h6ee57572668a31c3> @ imm = #-0x86a
 8002ad0:      	trap
 8002ad2:      	ldr	r3, [sp, #0xc]
 8002ad4:      	ldr	r2, [sp, #0x10]
 8002ad6:      	ldr	r1, [sp, #0x14]
 8002ad8:      	ldr	r0, [sp, #0x18]
 8002ada:      	bl	0x8002a4e <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h3d6734aff7cc60ea> @ imm = #-0x90
 8002ade:      	str	r0, [sp, #0x4]
 8002ae0:      	str	r1, [sp, #0x8]
 8002ae2:      	b	0x8002af0 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f+0x58> @ imm = #0xa
 8002ae4:      	ldr	r2, [sp, #0x1c]
 8002ae6:      	ldr	r1, [sp, #0xc]
 8002ae8:      	ldr	r0, [sp, #0x14]
 8002aea:      	bl	0x8002224 <core::slice::index::slice_end_index_len_fail::h820c0fbf65eefa0d> @ imm = #-0x8ca
 8002aee:      	trap
 8002af0:      	ldr	r1, [sp, #0x8]
 8002af2:      	ldr	r0, [sp, #0x4]
 8002af4:      	add	sp, #0x30
 8002af6:      	pop	{r7, pc}

08002af8 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h1ba271124b498589>:
 8002af8:      	push	{r7, lr}
 8002afa:      	mov	r7, sp
 8002afc:      	sub	sp, #0x20
 8002afe:      	mov	r12, r3
 8002b00:      	mov	r3, r2
 8002b02:      	mov	r2, r1
 8002b04:      	str	r0, [sp, #0x14]
 8002b06:      	str	r2, [sp, #0x18]
 8002b08:      	str	r3, [sp, #0x1c]
 8002b0a:      	movs	r1, #0x0
 8002b0c:      	str	r1, [sp, #0xc]
 8002b0e:      	str	r0, [sp, #0x10]
 8002b10:      	ldr	r0, [sp, #0xc]
 8002b12:      	ldr	r1, [sp, #0x10]
 8002b14:      	mov	lr, sp
 8002b16:      	str.w	r12, [lr]
 8002b1a:      	bl	0x8002a98 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h74868a43d94feb2f> @ imm = #-0x86
 8002b1e:      	str	r0, [sp, #0x4]
 8002b20:      	str	r1, [sp, #0x8]
 8002b22:      	b	0x8002b24 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h1ba271124b498589+0x2c> @ imm = #-0x2
 8002b24:      	ldr	r1, [sp, #0x8]
 8002b26:      	ldr	r0, [sp, #0x4]
 8002b28:      	add	sp, #0x20
 8002b2a:      	pop	{r7, pc}

08002b2c <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::hc145aa960fd8cb43>:
 8002b2c:      	sub	sp, #0xc
 8002b2e:      	str	r0, [sp, #0x4]
 8002b30:      	str	r1, [sp, #0x8]
 8002b32:      	add	sp, #0xc
 8002b34:      	bx	lr

08002b36 <core::ptr::slice_from_raw_parts_mut::hd38365eda9281b13>:
 8002b36:      	push	{r7, lr}
 8002b38:      	mov	r7, sp
 8002b3a:      	sub	sp, #0x20
 8002b3c:      	str	r1, [sp, #0xc]
 8002b3e:      	str	r0, [sp, #0x14]
 8002b40:      	str	r1, [sp, #0x18]
 8002b42:      	str	r0, [sp, #0x1c]
 8002b44:      	str	r0, [sp, #0x10]
 8002b46:      	b	0x8002b48 <core::ptr::slice_from_raw_parts_mut::hd38365eda9281b13+0x12> @ imm = #-0x2
 8002b48:      	ldr	r1, [sp, #0xc]
 8002b4a:      	ldr	r0, [sp, #0x10]
 8002b4c:      	bl	0x8002b5e <core::ptr::metadata::from_raw_parts_mut::h44cf51a623ee9148> @ imm = #0xe
 8002b50:      	str	r0, [sp, #0x4]
 8002b52:      	str	r1, [sp, #0x8]
 8002b54:      	b	0x8002b56 <core::ptr::slice_from_raw_parts_mut::hd38365eda9281b13+0x20> @ imm = #-0x2
 8002b56:      	ldr	r1, [sp, #0x8]
 8002b58:      	ldr	r0, [sp, #0x4]
 8002b5a:      	add	sp, #0x20
 8002b5c:      	pop	{r7, pc}

08002b5e <core::ptr::metadata::from_raw_parts_mut::h44cf51a623ee9148>:
 8002b5e:      	sub	sp, #0x18
 8002b60:      	str	r0, [sp, #0x10]
 8002b62:      	str	r1, [sp, #0x14]
 8002b64:      	str	r0, [sp, #0x8]
 8002b66:      	str	r1, [sp, #0xc]
 8002b68:      	ldr	r1, [sp, #0x8]
 8002b6a:      	ldr	r0, [sp, #0xc]
 8002b6c:      	str	r1, [sp]
 8002b6e:      	str	r0, [sp, #0x4]
 8002b70:      	ldr	r0, [sp]
 8002b72:      	ldr	r1, [sp, #0x4]
 8002b74:      	add	sp, #0x18
 8002b76:      	bx	lr

08002b78 <core::str::converts::from_utf8_unchecked_mut::h086d27a5d83aabdc>:
 8002b78:      	sub	sp, #0x8
 8002b7a:      	str	r0, [sp]
 8002b7c:      	str	r1, [sp, #0x4]
 8002b7e:      	add	sp, #0x8
 8002b80:      	bx	lr

08002b82 <cortex_m::itm::write_words::h54084071f57e3b1b>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8002b82:      	push	{r7, lr}
 8002b84:      	mov	r7, sp
 8002b86:      	sub	sp, #0x60
 8002b88:      	str	r2, [sp, #0x18]
 8002b8a:      	mov	r2, r1
 8002b8c:      	ldr	r1, [sp, #0x18]
 8002b8e:      	str	r2, [sp, #0x1c]
 8002b90:      	mov	r2, r0
 8002b92:      	ldr	r0, [sp, #0x1c]
 8002b94:      	str	r2, [sp, #0x20]
 8002b96:      	str	r2, [sp, #0x40]
 8002b98:      	str	r0, [sp, #0x44]
 8002b9a:      	str	r1, [sp, #0x48]
;     let mut p = bytes.as_ptr();
 8002b9c:      	bl	0x8002eba <core::slice::<impl [T]>::as_ptr::h5a17e973d4d69aec> @ imm = #0x31a
 8002ba0:      	str	r0, [sp, #0x24]
 8002ba2:      	b	0x8002ba4 <cortex_m::itm::write_words::h54084071f57e3b1b+0x22> @ imm = #-0x2
 8002ba4:      	ldr	r0, [sp, #0x18]
 8002ba6:      	movs	r1, #0x0
;     for _ in 0..bytes.len() {
 8002ba8:      	str	r1, [sp, #0x28]
 8002baa:      	str	r0, [sp, #0x2c]
 8002bac:      	ldr	r0, [sp, #0x28]
 8002bae:      	ldr	r1, [sp, #0x2c]
 8002bb0:      	bl	0x8002ede <<I as core::iter::traits::collect::IntoIterator>::into_iter::hf79e0268809838e6> @ imm = #0x32a
 8002bb4:      	str	r0, [sp, #0x10]
 8002bb6:      	str	r1, [sp, #0x14]
 8002bb8:      	b	0x8002bba <cortex_m::itm::write_words::h54084071f57e3b1b+0x38> @ imm = #-0x2
 8002bba:      	ldr	r0, [sp, #0x14]
 8002bbc:      	ldr	r1, [sp, #0x10]
 8002bbe:      	str	r1, [sp, #0x30]
 8002bc0:      	str	r0, [sp, #0x34]
 8002bc2:      	b	0x8002bc4 <cortex_m::itm::write_words::h54084071f57e3b1b+0x42> @ imm = #-0x2
 8002bc4:      	add	r0, sp, #0x30
;     for _ in 0..bytes.len() {
 8002bc6:      	bl	0x8002ec4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h04bebf55e8f1b55f> @ imm = #0x2fa
 8002bca:      	str	r1, [sp, #0x3c]
 8002bcc:      	str	r0, [sp, #0x38]
 8002bce:      	b	0x8002bd0 <cortex_m::itm::write_words::h54084071f57e3b1b+0x4e> @ imm = #-0x2
 8002bd0:      	ldr	r0, [sp, #0x38]
 8002bd2:      	cbz	r0, 0x8002bda <cortex_m::itm::write_words::h54084071f57e3b1b+0x58> @ imm = #0x4
 8002bd4:      	b	0x8002bd6 <cortex_m::itm::write_words::h54084071f57e3b1b+0x54> @ imm = #-0x2
 8002bd6:      	b	0x8002bde <cortex_m::itm::write_words::h54084071f57e3b1b+0x5c> @ imm = #0x4
 8002bd8:      	trap
; }
 8002bda:      	add	sp, #0x60
 8002bdc:      	pop	{r7, pc}
;     for _ in 0..bytes.len() {
 8002bde:      	ldr	r0, [sp, #0x3c]
 8002be0:      	str	r0, [sp, #0x4c]
 8002be2:      	str	r0, [sp, #0x50]
;         while !stim.is_fifo_ready() {}
 8002be4:      	b	0x8002be6 <cortex_m::itm::write_words::h54084071f57e3b1b+0x64> @ imm = #-0x2
 8002be6:      	ldr	r0, [sp, #0x20]
 8002be8:      	bl	0x800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f> @ imm = #-0x14e0
 8002bec:      	str	r0, [sp, #0xc]
 8002bee:      	b	0x8002bf0 <cortex_m::itm::write_words::h54084071f57e3b1b+0x6e> @ imm = #-0x2
 8002bf0:      	ldr	r0, [sp, #0xc]
 8002bf2:      	lsls	r0, r0, #0x1f
 8002bf4:      	cmp	r0, #0x0
 8002bf6:      	beq	0x8002be6 <cortex_m::itm::write_words::h54084071f57e3b1b+0x64> @ imm = #-0x14
 8002bf8:      	b	0x8002bfa <cortex_m::itm::write_words::h54084071f57e3b1b+0x78> @ imm = #-0x2
;         stim.write_u32(ptr::read(p));
 8002bfa:      	ldr	r0, [sp, #0x24]
 8002bfc:      	bl	0x8001824 <core::ptr::read::h3b51a3e4213de25a> @ imm = #-0x13dc
 8002c00:      	str	r0, [sp, #0x8]
 8002c02:      	b	0x8002c04 <cortex_m::itm::write_words::h54084071f57e3b1b+0x82> @ imm = #-0x2
 8002c04:      	ldr	r1, [sp, #0x8]
 8002c06:      	ldr	r0, [sp, #0x20]
 8002c08:      	bl	0x80016ec <cortex_m::peripheral::itm::Stim::write_u32::h6a6807475e0052ab> @ imm = #-0x1520
 8002c0c:      	b	0x8002c0e <cortex_m::itm::write_words::h54084071f57e3b1b+0x8c> @ imm = #-0x2
;         p = p.offset(1);
 8002c0e:      	ldr	r0, [sp, #0x24]
 8002c10:      	str	r0, [sp, #0x54]
 8002c12:      	movs	r1, #0x1
 8002c14:      	str	r1, [sp, #0x58]
 8002c16:      	adds	r0, #0x4
 8002c18:      	str	r0, [sp, #0x5c]
 8002c1a:      	ldr	r0, [sp, #0x5c]
;         p = p.offset(1);
 8002c1c:      	str	r0, [sp, #0x4]
 8002c1e:      	b	0x8002c20 <cortex_m::itm::write_words::h54084071f57e3b1b+0x9e> @ imm = #-0x2
 8002c20:      	ldr	r0, [sp, #0x4]
 8002c22:      	str	r0, [sp, #0x24]
;     for _ in 0..bytes.len() {
 8002c24:      	b	0x8002bc4 <cortex_m::itm::write_words::h54084071f57e3b1b+0x42> @ imm = #-0x64

08002c26 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 8002c26:      	push	{r7, lr}
 8002c28:      	mov	r7, sp
 8002c2a:      	sub	sp, #0x78
 8002c2c:      	str	r2, [sp, #0x30]
 8002c2e:      	str	r1, [sp, #0x34]
 8002c30:      	str	r0, [sp, #0x38]
 8002c32:      	str	r0, [sp, #0x44]
 8002c34:      	str	r1, [sp, #0x48]
 8002c36:      	str	r2, [sp, #0x4c]
;     let len = buffer.len();
 8002c38:      	str	r2, [sp, #0x50]
;     if len == 0 {
 8002c3a:      	cbnz	r2, 0x8002c42 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x1c> @ imm = #0x4
 8002c3c:      	b	0x8002c3e <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x18> @ imm = #-0x2
; }
 8002c3e:      	add	sp, #0x78
 8002c40:      	pop	{r7, pc}
;     let split = len & !0b11;
 8002c42:      	ldr	r1, [sp, #0x30]
 8002c44:      	ldr	r0, [sp, #0x34]
 8002c46:      	bic	r2, r1, #0x3
 8002c4a:      	mov	r3, r2
 8002c4c:      	str	r3, [sp, #0x28]
 8002c4e:      	str	r2, [sp, #0x54]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8002c50:      	bl	0x8002f86 <core::slice::<impl [T]>::as_ptr::hedc91984c6906495> @ imm = #0x332
 8002c54:      	str	r0, [sp, #0x2c]
 8002c56:      	b	0x8002c58 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x32> @ imm = #-0x2
 8002c58:      	ldr	r0, [sp, #0x28]
 8002c5a:      	ldr	r1, [sp, #0x2c]
 8002c5c:      	str	r1, [sp, #0x20]
 8002c5e:      	lsrs	r0, r0, #0x2
 8002c60:      	str	r0, [sp, #0x24]
 8002c62:      	b	0x8002c64 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x3e> @ imm = #-0x2
 8002c64:      	ldr	r1, [sp, #0x24]
 8002c66:      	ldr	r0, [sp, #0x20]
 8002c68:      	bl	0x80018c0 <core::slice::raw::from_raw_parts::heec2fe6601638ee9> @ imm = #-0x13ac
 8002c6c:      	str	r0, [sp, #0x18]
 8002c6e:      	str	r1, [sp, #0x1c]
 8002c70:      	b	0x8002c72 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x4c> @ imm = #-0x2
;     write_words(
 8002c72:      	ldr	r2, [sp, #0x1c]
 8002c74:      	ldr	r1, [sp, #0x18]
 8002c76:      	ldr	r0, [sp, #0x38]
 8002c78:      	bl	0x8002b82 <cortex_m::itm::write_words::h54084071f57e3b1b> @ imm = #-0xfa
 8002c7c:      	b	0x8002c7e <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x58> @ imm = #-0x2
;     let mut left = len & 0b11;
 8002c7e:      	ldr	r1, [sp, #0x30]
 8002c80:      	ldr	r0, [sp, #0x34]
 8002c82:      	and	r2, r1, #0x3
 8002c86:      	str	r2, [sp, #0x3c]
;     let mut ptr = buffer.as_ptr().add(split);
 8002c88:      	bl	0x8002f86 <core::slice::<impl [T]>::as_ptr::hedc91984c6906495> @ imm = #0x2fa
 8002c8c:      	str	r0, [sp, #0x14]
 8002c8e:      	b	0x8002c90 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x6a> @ imm = #-0x2
 8002c90:      	ldr	r0, [sp, #0x14]
 8002c92:      	ldr	r1, [sp, #0x28]
 8002c94:      	str	r0, [sp, #0x58]
 8002c96:      	str	r1, [sp, #0x5c]
 8002c98:      	str	r0, [sp, #0x60]
 8002c9a:      	str	r1, [sp, #0x64]
 8002c9c:      	add	r0, r1
 8002c9e:      	str	r0, [sp, #0x68]
 8002ca0:      	ldr	r0, [sp, #0x68]
;     let mut ptr = buffer.as_ptr().add(split);
 8002ca2:      	str	r0, [sp, #0x40]
 8002ca4:      	b	0x8002ca6 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x80> @ imm = #-0x2
;     if left > 1 {
 8002ca6:      	ldr	r0, [sp, #0x3c]
 8002ca8:      	cmp	r0, #0x1
 8002caa:      	bhi	0x8002cb6 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x90> @ imm = #0x8
 8002cac:      	b	0x8002cae <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x88> @ imm = #-0x2
;     if left == 1 {
 8002cae:      	ldr	r0, [sp, #0x3c]
 8002cb0:      	cmp	r0, #0x1
 8002cb2:      	beq	0x8002d1e <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xf8> @ imm = #0x68
 8002cb4:      	b	0x8002c3e <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x18> @ imm = #-0x7a
;         while !port.is_fifo_ready() {}
 8002cb6:      	ldr	r0, [sp, #0x38]
 8002cb8:      	bl	0x800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f> @ imm = #-0x15b0
 8002cbc:      	str	r0, [sp, #0x10]
 8002cbe:      	b	0x8002cc0 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x9a> @ imm = #-0x2
 8002cc0:      	ldr	r0, [sp, #0x10]
 8002cc2:      	lsls	r0, r0, #0x1f
 8002cc4:      	cmp	r0, #0x0
 8002cc6:      	beq	0x8002cb6 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x90> @ imm = #-0x14
 8002cc8:      	b	0x8002cca <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xa4> @ imm = #-0x2
;         port.write_u16(ptr::read(ptr as *const u16));
 8002cca:      	ldr	r0, [sp, #0x40]
 8002ccc:      	bl	0x80017ec <core::ptr::read::h350af654f494a1a9> @ imm = #-0x14e4
 8002cd0:      	str	r0, [sp, #0xc]
 8002cd2:      	b	0x8002cd4 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xae> @ imm = #-0x2
 8002cd4:      	ldr	r1, [sp, #0xc]
 8002cd6:      	ldr	r0, [sp, #0x38]
 8002cd8:      	bl	0x80016c8 <cortex_m::peripheral::itm::Stim::write_u16::ha042c5773c803306> @ imm = #-0x1614
 8002cdc:      	b	0x8002cde <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xb8> @ imm = #-0x2
;         ptr = ptr.offset(2);
 8002cde:      	ldr	r0, [sp, #0x40]
 8002ce0:      	str	r0, [sp, #0x6c]
 8002ce2:      	movs	r1, #0x2
 8002ce4:      	str	r1, [sp, #0x70]
 8002ce6:      	adds	r0, #0x2
 8002ce8:      	str	r0, [sp, #0x74]
 8002cea:      	ldr	r0, [sp, #0x74]
;         ptr = ptr.offset(2);
 8002cec:      	str	r0, [sp, #0x8]
 8002cee:      	b	0x8002cf0 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xca> @ imm = #-0x2
 8002cf0:      	ldr	r0, [sp, #0x8]
 8002cf2:      	str	r0, [sp, #0x40]
;         left -= 2;
 8002cf4:      	ldr	r0, [sp, #0x3c]
 8002cf6:      	subs	r1, r0, #0x2
 8002cf8:      	str	r1, [sp, #0x4]
 8002cfa:      	cmp	r0, #0x2
 8002cfc:      	blo	0x8002d06 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xe0> @ imm = #0x6
 8002cfe:      	b	0x8002d00 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xda> @ imm = #-0x2
 8002d00:      	ldr	r0, [sp, #0x4]
 8002d02:      	str	r0, [sp, #0x3c]
;     if left > 1 {
 8002d04:      	b	0x8002cae <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x88> @ imm = #-0x5a
;         left -= 2;
 8002d06:      	movw	r0, #0x3690
 8002d0a:      	movt	r0, #0x800
 8002d0e:      	movw	r2, #0x3680
 8002d12:      	movt	r2, #0x800
 8002d16:      	movs	r1, #0x21
 8002d18:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #-0x1324
 8002d1c:      	trap
;         while !port.is_fifo_ready() {}
 8002d1e:      	ldr	r0, [sp, #0x38]
 8002d20:      	bl	0x800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f> @ imm = #-0x1618
 8002d24:      	str	r0, [sp]
 8002d26:      	b	0x8002d28 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x102> @ imm = #-0x2
 8002d28:      	ldr	r0, [sp]
 8002d2a:      	lsls	r0, r0, #0x1f
 8002d2c:      	cmp	r0, #0x0
 8002d2e:      	beq	0x8002d1e <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0xf8> @ imm = #-0x14
 8002d30:      	b	0x8002d32 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x10c> @ imm = #-0x2
;         port.write_u8(*ptr);
 8002d32:      	ldr	r0, [sp, #0x38]
 8002d34:      	ldr	r1, [sp, #0x40]
 8002d36:      	ldrb	r1, [r1]
 8002d38:      	bl	0x80016a4 <cortex_m::peripheral::itm::Stim::write_u8::h2efcf9c5c3a4b77f> @ imm = #-0x1698
 8002d3c:      	b	0x8002c3e <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0+0x18> @ imm = #-0x102

08002d3e <cortex_m::itm::write_all::hdb5459c305bf1828>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8002d3e:      	push	{r7, lr}
 8002d40:      	mov	r7, sp
 8002d42:      	sub	sp, #0x60
 8002d44:      	str	r2, [sp, #0x28]
 8002d46:      	mov	r2, r1
 8002d48:      	ldr	r1, [sp, #0x28]
 8002d4a:      	str	r2, [sp, #0x2c]
 8002d4c:      	mov	r2, r0
 8002d4e:      	ldr	r0, [sp, #0x2c]
 8002d50:      	str	r2, [sp, #0x30]
 8002d52:      	str	r2, [sp, #0x3c]
 8002d54:      	str	r0, [sp, #0x40]
 8002d56:      	str	r1, [sp, #0x44]
;         let mut len = buffer.len();
 8002d58:      	str	r1, [sp, #0x34]
;         let mut ptr = buffer.as_ptr();
 8002d5a:      	bl	0x8002f86 <core::slice::<impl [T]>::as_ptr::hedc91984c6906495> @ imm = #0x228
 8002d5e:      	str	r0, [sp, #0x38]
 8002d60:      	b	0x8002d62 <cortex_m::itm::write_all::hdb5459c305bf1828+0x24> @ imm = #-0x2
;         if len == 0 {
 8002d62:      	ldr	r0, [sp, #0x34]
 8002d64:      	cbnz	r0, 0x8002d6c <cortex_m::itm::write_all::hdb5459c305bf1828+0x2e> @ imm = #0x4
 8002d66:      	b	0x8002d68 <cortex_m::itm::write_all::hdb5459c305bf1828+0x2a> @ imm = #-0x2
; }
 8002d68:      	add	sp, #0x60
 8002d6a:      	pop	{r7, pc}
;         if ptr as usize % 2 == 1 {
 8002d6c:      	ldrb.w	r0, [sp, #0x38]
 8002d70:      	lsls	r0, r0, #0x1f
 8002d72:      	cbz	r0, 0x8002d80 <cortex_m::itm::write_all::hdb5459c305bf1828+0x42> @ imm = #0xa
 8002d74:      	b	0x8002d76 <cortex_m::itm::write_all::hdb5459c305bf1828+0x38> @ imm = #-0x2
;             while !port.is_fifo_ready() {}
 8002d76:      	ldr	r0, [sp, #0x30]
 8002d78:      	bl	0x800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f> @ imm = #-0x1670
 8002d7c:      	str	r0, [sp, #0x24]
 8002d7e:      	b	0x8002d8c <cortex_m::itm::write_all::hdb5459c305bf1828+0x4e> @ imm = #0xa
;         if ptr as usize % 4 == 2 {
 8002d80:      	ldr	r0, [sp, #0x38]
 8002d82:      	and	r0, r0, #0x3
 8002d86:      	cmp	r0, #0x2
 8002d88:      	beq	0x8002de2 <cortex_m::itm::write_all::hdb5459c305bf1828+0xa4> @ imm = #0x56
 8002d8a:      	b	0x8002dea <cortex_m::itm::write_all::hdb5459c305bf1828+0xac> @ imm = #0x5c
;             while !port.is_fifo_ready() {}
 8002d8c:      	ldr	r0, [sp, #0x24]
 8002d8e:      	lsls	r0, r0, #0x1f
 8002d90:      	cmp	r0, #0x0
 8002d92:      	beq	0x8002d76 <cortex_m::itm::write_all::hdb5459c305bf1828+0x38> @ imm = #-0x20
 8002d94:      	b	0x8002d96 <cortex_m::itm::write_all::hdb5459c305bf1828+0x58> @ imm = #-0x2
;             port.write_u8(*ptr);
 8002d96:      	ldr	r0, [sp, #0x30]
 8002d98:      	ldr	r1, [sp, #0x38]
 8002d9a:      	ldrb	r1, [r1]
 8002d9c:      	bl	0x80016a4 <cortex_m::peripheral::itm::Stim::write_u8::h2efcf9c5c3a4b77f> @ imm = #-0x16fc
 8002da0:      	b	0x8002da2 <cortex_m::itm::write_all::hdb5459c305bf1828+0x64> @ imm = #-0x2
;             ptr = ptr.offset(1);
 8002da2:      	ldr	r0, [sp, #0x38]
 8002da4:      	str	r0, [sp, #0x48]
 8002da6:      	movs	r1, #0x1
 8002da8:      	str	r1, [sp, #0x4c]
 8002daa:      	adds	r0, #0x1
 8002dac:      	str	r0, [sp, #0x50]
 8002dae:      	ldr	r0, [sp, #0x50]
;             ptr = ptr.offset(1);
 8002db0:      	str	r0, [sp, #0x20]
 8002db2:      	b	0x8002db4 <cortex_m::itm::write_all::hdb5459c305bf1828+0x76> @ imm = #-0x2
 8002db4:      	ldr	r0, [sp, #0x20]
 8002db6:      	str	r0, [sp, #0x38]
;             len -= 1;
 8002db8:      	ldr	r0, [sp, #0x34]
 8002dba:      	subs	r1, r0, #0x1
 8002dbc:      	str	r1, [sp, #0x1c]
 8002dbe:      	cmp	r0, #0x1
 8002dc0:      	blo	0x8002dca <cortex_m::itm::write_all::hdb5459c305bf1828+0x8c> @ imm = #0x6
 8002dc2:      	b	0x8002dc4 <cortex_m::itm::write_all::hdb5459c305bf1828+0x86> @ imm = #-0x2
 8002dc4:      	ldr	r0, [sp, #0x1c]
 8002dc6:      	str	r0, [sp, #0x34]
;         if ptr as usize % 2 == 1 {
 8002dc8:      	b	0x8002d80 <cortex_m::itm::write_all::hdb5459c305bf1828+0x42> @ imm = #-0x4c
;             len -= 1;
 8002dca:      	movw	r0, #0x3690
 8002dce:      	movt	r0, #0x800
 8002dd2:      	movw	r2, #0x36b4
 8002dd6:      	movt	r2, #0x800
 8002dda:      	movs	r1, #0x21
 8002ddc:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #-0x13e8
 8002de0:      	trap
;             if len > 1 {
 8002de2:      	ldr	r0, [sp, #0x34]
 8002de4:      	cmp	r0, #0x1
 8002de6:      	bhi	0x8002e00 <cortex_m::itm::write_all::hdb5459c305bf1828+0xc2> @ imm = #0x16
 8002de8:      	b	0x8002df8 <cortex_m::itm::write_all::hdb5459c305bf1828+0xba> @ imm = #0xc
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8002dea:      	ldr	r0, [sp, #0x38]
 8002dec:      	ldr	r1, [sp, #0x34]
 8002dee:      	bl	0x80018a4 <core::slice::raw::from_raw_parts::ha635cc54c58e7f47> @ imm = #-0x154e
 8002df2:      	str	r0, [sp, #0x14]
 8002df4:      	str	r1, [sp, #0x18]
 8002df6:      	b	0x8002e68 <cortex_m::itm::write_all::hdb5459c305bf1828+0x12a> @ imm = #0x6e
;                 if len == 1 {
 8002df8:      	ldr	r0, [sp, #0x34]
 8002dfa:      	cmp	r0, #0x1
 8002dfc:      	beq	0x8002e74 <cortex_m::itm::write_all::hdb5459c305bf1828+0x136> @ imm = #0x74
 8002dfe:      	b	0x8002d68 <cortex_m::itm::write_all::hdb5459c305bf1828+0x2a> @ imm = #-0x9a
;                 while !port.is_fifo_ready() {}
 8002e00:      	ldr	r0, [sp, #0x30]
 8002e02:      	bl	0x800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f> @ imm = #-0x16fa
 8002e06:      	str	r0, [sp, #0x10]
 8002e08:      	b	0x8002e0a <cortex_m::itm::write_all::hdb5459c305bf1828+0xcc> @ imm = #-0x2
 8002e0a:      	ldr	r0, [sp, #0x10]
 8002e0c:      	lsls	r0, r0, #0x1f
 8002e0e:      	cmp	r0, #0x0
 8002e10:      	beq	0x8002e00 <cortex_m::itm::write_all::hdb5459c305bf1828+0xc2> @ imm = #-0x14
 8002e12:      	b	0x8002e14 <cortex_m::itm::write_all::hdb5459c305bf1828+0xd6> @ imm = #-0x2
;                 port.write_u16(ptr::read(ptr as *const u16));
 8002e14:      	ldr	r0, [sp, #0x38]
 8002e16:      	bl	0x80017ec <core::ptr::read::h350af654f494a1a9> @ imm = #-0x162e
 8002e1a:      	str	r0, [sp, #0xc]
 8002e1c:      	b	0x8002e1e <cortex_m::itm::write_all::hdb5459c305bf1828+0xe0> @ imm = #-0x2
 8002e1e:      	ldr	r1, [sp, #0xc]
 8002e20:      	ldr	r0, [sp, #0x30]
 8002e22:      	bl	0x80016c8 <cortex_m::peripheral::itm::Stim::write_u16::ha042c5773c803306> @ imm = #-0x175e
 8002e26:      	b	0x8002e28 <cortex_m::itm::write_all::hdb5459c305bf1828+0xea> @ imm = #-0x2
;                 ptr = ptr.offset(2);
 8002e28:      	ldr	r0, [sp, #0x38]
 8002e2a:      	str	r0, [sp, #0x54]
 8002e2c:      	movs	r1, #0x2
 8002e2e:      	str	r1, [sp, #0x58]
 8002e30:      	adds	r0, #0x2
 8002e32:      	str	r0, [sp, #0x5c]
 8002e34:      	ldr	r0, [sp, #0x5c]
;                 ptr = ptr.offset(2);
 8002e36:      	str	r0, [sp, #0x8]
 8002e38:      	b	0x8002e3a <cortex_m::itm::write_all::hdb5459c305bf1828+0xfc> @ imm = #-0x2
 8002e3a:      	ldr	r0, [sp, #0x8]
 8002e3c:      	str	r0, [sp, #0x38]
;                 len -= 2;
 8002e3e:      	ldr	r0, [sp, #0x34]
 8002e40:      	subs	r1, r0, #0x2
 8002e42:      	str	r1, [sp, #0x4]
 8002e44:      	cmp	r0, #0x2
 8002e46:      	blo	0x8002e50 <cortex_m::itm::write_all::hdb5459c305bf1828+0x112> @ imm = #0x6
 8002e48:      	b	0x8002e4a <cortex_m::itm::write_all::hdb5459c305bf1828+0x10c> @ imm = #-0x2
 8002e4a:      	ldr	r0, [sp, #0x4]
 8002e4c:      	str	r0, [sp, #0x34]
;         if ptr as usize % 4 == 2 {
 8002e4e:      	b	0x8002dea <cortex_m::itm::write_all::hdb5459c305bf1828+0xac> @ imm = #-0x68
;                 len -= 2;
 8002e50:      	movw	r0, #0x3690
 8002e54:      	movt	r0, #0x800
 8002e58:      	movw	r2, #0x36c4
 8002e5c:      	movt	r2, #0x800
 8002e60:      	movs	r1, #0x21
 8002e62:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #-0x146e
 8002e66:      	trap
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8002e68:      	ldr	r2, [sp, #0x18]
 8002e6a:      	ldr	r1, [sp, #0x14]
 8002e6c:      	ldr	r0, [sp, #0x30]
 8002e6e:      	bl	0x8002c26 <cortex_m::itm::write_aligned_impl::h579636c9a417c3e0> @ imm = #-0x24c
 8002e72:      	b	0x8002d68 <cortex_m::itm::write_all::hdb5459c305bf1828+0x2a> @ imm = #-0x10e
;                     while !port.is_fifo_ready() {}
 8002e74:      	ldr	r0, [sp, #0x30]
 8002e76:      	bl	0x800170c <cortex_m::peripheral::itm::Stim::is_fifo_ready::h919601e12bd34a5f> @ imm = #-0x176e
 8002e7a:      	str	r0, [sp]
 8002e7c:      	b	0x8002e7e <cortex_m::itm::write_all::hdb5459c305bf1828+0x140> @ imm = #-0x2
 8002e7e:      	ldr	r0, [sp]
 8002e80:      	lsls	r0, r0, #0x1f
 8002e82:      	cmp	r0, #0x0
 8002e84:      	beq	0x8002e74 <cortex_m::itm::write_all::hdb5459c305bf1828+0x136> @ imm = #-0x14
 8002e86:      	b	0x8002e88 <cortex_m::itm::write_all::hdb5459c305bf1828+0x14a> @ imm = #-0x2
;                     port.write_u8(*ptr);
 8002e88:      	ldr	r0, [sp, #0x30]
 8002e8a:      	ldr	r1, [sp, #0x38]
 8002e8c:      	ldrb	r1, [r1]
 8002e8e:      	bl	0x80016a4 <cortex_m::peripheral::itm::Stim::write_u8::h2efcf9c5c3a4b77f> @ imm = #-0x17ee
 8002e92:      	b	0x8002d68 <cortex_m::itm::write_all::hdb5459c305bf1828+0x2a> @ imm = #-0x12e

08002e94 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::hac84dc441eda8e7f>:
 8002e94:      	sub	sp, #0xc
 8002e96:      	str	r1, [sp]
 8002e98:      	mov	r1, r0
 8002e9a:      	ldr	r0, [sp]
 8002e9c:      	str	r1, [sp, #0x4]
 8002e9e:      	str	r0, [sp, #0x8]
 8002ea0:      	ldr	r1, [r1]
 8002ea2:      	ldr	r2, [r0]
 8002ea4:      	movs	r0, #0x0
 8002ea6:      	cmp	r1, r2
 8002ea8:      	it	lo
 8002eaa:      	movlo	r0, #0x1
 8002eac:      	add	sp, #0xc
 8002eae:      	bx	lr

08002eb0 <core::clone::impls::<impl core::clone::Clone for usize>::clone::h2efb353affe4940f>:
 8002eb0:      	sub	sp, #0x4
 8002eb2:      	str	r0, [sp]
 8002eb4:      	ldr	r0, [r0]
 8002eb6:      	add	sp, #0x4
 8002eb8:      	bx	lr

08002eba <core::slice::<impl [T]>::as_ptr::h5a17e973d4d69aec>:
 8002eba:      	sub	sp, #0x8
 8002ebc:      	str	r0, [sp]
 8002ebe:      	str	r1, [sp, #0x4]
 8002ec0:      	add	sp, #0x8
 8002ec2:      	bx	lr

08002ec4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h04bebf55e8f1b55f>:
 8002ec4:      	push	{r7, lr}
 8002ec6:      	mov	r7, sp
 8002ec8:      	sub	sp, #0x10
 8002eca:      	str	r0, [sp, #0xc]
 8002ecc:      	bl	0x8002ee8 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963> @ imm = #0x18
 8002ed0:      	str	r0, [sp, #0x4]
 8002ed2:      	str	r1, [sp, #0x8]
 8002ed4:      	b	0x8002ed6 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h04bebf55e8f1b55f+0x12> @ imm = #-0x2
 8002ed6:      	ldr	r1, [sp, #0x8]
 8002ed8:      	ldr	r0, [sp, #0x4]
 8002eda:      	add	sp, #0x10
 8002edc:      	pop	{r7, pc}

08002ede <<I as core::iter::traits::collect::IntoIterator>::into_iter::hf79e0268809838e6>:
 8002ede:      	sub	sp, #0x8
 8002ee0:      	str	r0, [sp]
 8002ee2:      	str	r1, [sp, #0x4]
 8002ee4:      	add	sp, #0x8
 8002ee6:      	bx	lr

08002ee8 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963>:
 8002ee8:      	push	{r7, lr}
 8002eea:      	mov	r7, sp
 8002eec:      	sub	sp, #0x28
 8002eee:      	str	r0, [sp, #0x10]
 8002ef0:      	str	r0, [sp, #0x20]
 8002ef2:      	adds	r1, r0, #0x4
 8002ef4:      	bl	0x8002e94 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::hac84dc441eda8e7f> @ imm = #-0x64
 8002ef8:      	str	r0, [sp, #0x14]
 8002efa:      	b	0x8002efc <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x14> @ imm = #-0x2
 8002efc:      	ldr	r0, [sp, #0x14]
 8002efe:      	lsls	r0, r0, #0x1f
 8002f00:      	cbnz	r0, 0x8002f0a <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x22> @ imm = #0x6
 8002f02:      	b	0x8002f04 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x1c> @ imm = #-0x2
 8002f04:      	movs	r0, #0x0
 8002f06:      	str	r0, [sp, #0x18]
 8002f08:      	b	0x8002f3a <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x52> @ imm = #0x2e
 8002f0a:      	ldr	r0, [sp, #0x10]
 8002f0c:      	bl	0x8002eb0 <core::clone::impls::<impl core::clone::Clone for usize>::clone::h2efb353affe4940f> @ imm = #-0x60
 8002f10:      	str	r0, [sp, #0xc]
 8002f12:      	b	0x8002f14 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x2c> @ imm = #-0x2
 8002f14:      	ldr	r0, [sp, #0xc]
 8002f16:      	movs	r1, #0x1
 8002f18:      	bl	0x8002f42 <<usize as core::iter::range::Step>::forward_unchecked::h02c39580454f767e> @ imm = #0x26
 8002f1c:      	mov	r1, r0
 8002f1e:      	str	r1, [sp, #0x8]
 8002f20:      	str	r0, [sp, #0x24]
 8002f22:      	b	0x8002f24 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x3c> @ imm = #-0x2
 8002f24:      	ldr	r1, [sp, #0x8]
 8002f26:      	ldr	r0, [sp, #0x10]
 8002f28:      	bl	0x8002f5c <core::mem::replace::h72615fb81a221ee1> @ imm = #0x30
 8002f2c:      	str	r0, [sp, #0x4]
 8002f2e:      	b	0x8002f30 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x48> @ imm = #-0x2
 8002f30:      	ldr	r0, [sp, #0x4]
 8002f32:      	str	r0, [sp, #0x1c]
 8002f34:      	movs	r0, #0x1
 8002f36:      	str	r0, [sp, #0x18]
 8002f38:      	b	0x8002f3a <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he644f49e66e44963+0x52> @ imm = #-0x2
 8002f3a:      	ldr	r0, [sp, #0x18]
 8002f3c:      	ldr	r1, [sp, #0x1c]
 8002f3e:      	add	sp, #0x28
 8002f40:      	pop	{r7, pc}

08002f42 <<usize as core::iter::range::Step>::forward_unchecked::h02c39580454f767e>:
 8002f42:      	sub	sp, #0x18
 8002f44:      	str	r0, [sp, #0x4]
 8002f46:      	str	r1, [sp, #0x8]
 8002f48:      	str	r0, [sp, #0xc]
 8002f4a:      	str	r1, [sp, #0x10]
 8002f4c:      	add	r0, r1
 8002f4e:      	str	r0, [sp, #0x14]
 8002f50:      	ldr	r0, [sp, #0x14]
 8002f52:      	str	r0, [sp]
 8002f54:      	b	0x8002f56 <<usize as core::iter::range::Step>::forward_unchecked::h02c39580454f767e+0x14> @ imm = #-0x2
 8002f56:      	ldr	r0, [sp]
 8002f58:      	add	sp, #0x18
 8002f5a:      	bx	lr

08002f5c <core::mem::replace::h72615fb81a221ee1>:
 8002f5c:      	push	{r7, lr}
 8002f5e:      	mov	r7, sp
 8002f60:      	sub	sp, #0x18
 8002f62:      	str	r1, [sp]
 8002f64:      	str	r0, [sp, #0x4]
 8002f66:      	str	r0, [sp, #0xc]
 8002f68:      	str	r1, [sp, #0x10]
 8002f6a:      	bl	0x80017c4 <core::ptr::read::h09a838f1685a8af6> @ imm = #-0x17aa
 8002f6e:      	mov	r1, r0
 8002f70:      	str	r1, [sp, #0x8]
 8002f72:      	str	r0, [sp, #0x14]
 8002f74:      	b	0x8002f76 <core::mem::replace::h72615fb81a221ee1+0x1a> @ imm = #-0x2
 8002f76:      	ldr	r1, [sp]
 8002f78:      	ldr	r0, [sp, #0x4]
 8002f7a:      	bl	0x800184c <core::ptr::write::h4d097dd63c367c95> @ imm = #-0x1732
 8002f7e:      	b	0x8002f80 <core::mem::replace::h72615fb81a221ee1+0x24> @ imm = #-0x2
 8002f80:      	ldr	r0, [sp, #0x8]
 8002f82:      	add	sp, #0x18
 8002f84:      	pop	{r7, pc}

08002f86 <core::slice::<impl [T]>::as_ptr::hedc91984c6906495>:
 8002f86:      	sub	sp, #0x8
 8002f88:      	str	r0, [sp]
 8002f8a:      	str	r1, [sp, #0x4]
 8002f8c:      	add	sp, #0x8
 8002f8e:      	bx	lr

08002f90 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE>:
 8002f90:      	sub	sp, #0x8
 8002f92:      	strb.w	r0, [sp, #0x2]
 8002f96:      	ldrb.w	r1, [sp, #0x2]
 8002f9a:      	lsls	r0, r1, #0x1f
 8002f9c:      	cbz	r0, 0x8002fa4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x14> @ imm = #0x4
 8002f9e:      	b	0x8002fa0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x10> @ imm = #-0x2
 8002fa0:      	b	0x8002fac <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x1c> @ imm = #0x8
 8002fa2:      	trap
 8002fa4:      	movs	r0, #0x1
 8002fa6:      	strb.w	r0, [sp, #0x3]
 8002faa:      	b	0x8002fb4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x24> @ imm = #0x6
 8002fac:      	movs	r0, #0x0
 8002fae:      	strb.w	r0, [sp, #0x3]
 8002fb2:      	b	0x8002fb4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x24> @ imm = #-0x2
 8002fb4:      	ldrb.w	r0, [sp, #0x2]
 8002fb8:      	lsls	r0, r0, #0x1f
 8002fba:      	cbnz	r0, 0x8002fc6 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x36> @ imm = #0x8
 8002fbc:      	b	0x8002fbe <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x2e> @ imm = #-0x2
 8002fbe:      	ldrb.w	r0, [sp, #0x3]
 8002fc2:      	add	sp, #0x8
 8002fc4:      	bx	lr
 8002fc6:      	b	0x8002fbe <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h09df750ff349679cE+0x2e> @ imm = #-0xc

08002fc8 <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::h09f6d5f62c01798b>:
 8002fc8:      	sub	sp, #0x4
 8002fca:      	str	r0, [sp]
 8002fcc:      	add	sp, #0x4
 8002fce:      	bx	lr

08002fd0 <core::sync::atomic::compiler_fence::h7125b59ad90b6b32>:
 8002fd0:      	push	{r7, lr}
 8002fd2:      	mov	r7, sp
 8002fd4:      	sub	sp, #0x8
 8002fd6:      	strb	r0, [r7, #-1]
 8002fda:      	ldrb	r0, [r7, #-1]
 8002fde:      	str	r0, [sp]
 8002fe0:      	ldr	r1, [sp]
 8002fe2:      	tbb	[pc, r1]

08002fe6 <$d.1>:
 8002fe6:	04 10 11 12	.word	0x12111004
 8002fea:	13 00		.short	0x0013

08002fec <$t.2>:
 8002fec:      	trap
 8002fee:      	movw	r0, #0x36d4
 8002ff2:      	movt	r0, #0x800
 8002ff6:      	movw	r2, #0x3758
 8002ffa:      	movt	r2, #0x800
 8002ffe:      	movs	r1, #0x32
 8003000:      	bl	0x80019f8 <core::panicking::panic::h322418c4dc3a4e35> @ imm = #-0x160c
 8003004:      	trap
 8003006:      	b	0x800300e <$t.2+0x22>   @ imm = #0x4
 8003008:      	b	0x800300e <$t.2+0x22>   @ imm = #0x2
 800300a:      	b	0x800300e <$t.2+0x22>   @ imm = #0x0
 800300c:      	b	0x800300e <$t.2+0x22>   @ imm = #-0x2
 800300e:      	add	sp, #0x8
 8003010:      	pop	{r7, pc}

08003012 <memset>:
 8003012:      	push	{r4, r6, r7, lr}
 8003014:      	add	r7, sp, #0x8
 8003016:      	cbz	r2, 0x8003058 <memset+0x46> @ imm = #0x3e
 8003018:      	subs	r3, r2, #0x1
 800301a:      	and	r12, r2, #0x3
 800301e:      	cmp	r3, #0x3
 8003020:      	bhs	0x8003026 <memset+0x14> @ imm = #0x2
 8003022:      	movs	r2, #0x0
 8003024:      	b	0x800304a <memset+0x38> @ imm = #0x22
 8003026:      	bic	r2, r2, #0x3
 800302a:      	add.w	lr, r0, #0x1
 800302e:      	rsbs	r3, r2, #0
 8003030:      	mvn	r2, #0x3
 8003034:      	add.w	r4, lr, r2
 8003038:      	adds	r2, #0x4
 800303a:      	strb	r1, [r4, #0x6]
 800303c:      	strb	r1, [r4, #0x5]
 800303e:      	strb	r1, [r4, #0x4]
 8003040:      	strb	r1, [r4, #0x3]
 8003042:      	adds	r4, r3, r2
 8003044:      	adds	r4, #0x4
 8003046:      	bne	0x8003034 <memset+0x22> @ imm = #-0x16
 8003048:      	adds	r2, #0x4
 800304a:      	cmp.w	r12, #0x0
 800304e:      	itt	ne
 8003050:      	strbne	r1, [r0, r2]
 8003052:      	cmpne.w	r12, #0x1
 8003056:      	bne	0x800305a <memset+0x48> @ imm = #0x0
 8003058:      	pop	{r4, r6, r7, pc}
 800305a:      	add	r2, r0
 800305c:      	cmp.w	r12, #0x2
 8003060:      	strb	r1, [r2, #0x1]
 8003062:      	it	ne
 8003064:      	strbne	r1, [r2, #0x2]
 8003066:      	pop	{r4, r6, r7, pc}

08003068 <__aeabi_memset>:
 8003068:      	mov	r3, r1
 800306a:      	mov	r1, r2
 800306c:      	mov	r2, r3
 800306e:      	b.w	0x8003012 <memset>      @ imm = #-0x60

08003072 <__aeabi_memset4>:
 8003072:      	push	{r4, r6, r7, lr}
 8003074:      	add	r7, sp, #0x8
 8003076:      	mov	r3, r2
 8003078:      	uxtb	r2, r2
 800307a:      	cmp	r1, #0x4
 800307c:      	blo	0x80030f2 <__aeabi_memset4+0x80> @ imm = #0x72
 800307e:      	lsls	r4, r2, #0x10
 8003080:      	sub.w	lr, r1, #0x4
 8003084:      	orr.w	r3, r4, r3, lsl #24
 8003088:      	movs	r4, #0x1
 800308a:      	orr.w	r3, r3, r2, lsl #8
 800308e:      	add.w	r4, r4, lr, lsr #2
 8003092:      	add	r3, r2
 8003094:      	ands	r4, r4, #0x3
 8003098:      	beq	0x80030b0 <__aeabi_memset4+0x3e> @ imm = #0x14
 800309a:      	mov	r12, r0
 800309c:      	cmp	r4, #0x1
 800309e:      	str	r3, [r12], #4
 80030a2:      	bne	0x80030b8 <__aeabi_memset4+0x46> @ imm = #0x12
 80030a4:      	mov	r1, lr
 80030a6:      	mov	r0, r12
 80030a8:      	cmp.w	lr, #0xc
 80030ac:      	bhs	0x80030e2 <__aeabi_memset4+0x70> @ imm = #0x32
 80030ae:      	b	0x80030ca <__aeabi_memset4+0x58> @ imm = #0x18
 80030b0:      	cmp.w	lr, #0xc
 80030b4:      	bhs	0x80030e2 <__aeabi_memset4+0x70> @ imm = #0x2a
 80030b6:      	b	0x80030ca <__aeabi_memset4+0x58> @ imm = #0x10
 80030b8:      	cmp	r4, #0x2
 80030ba:      	str	r3, [r0, #0x4]
 80030bc:      	bne	0x80030d4 <__aeabi_memset4+0x62> @ imm = #0x14
 80030be:      	adds	r0, #0x8
 80030c0:      	subs	r1, #0x8
 80030c2:      	mov	r12, r0
 80030c4:      	cmp.w	lr, #0xc
 80030c8:      	bhs	0x80030e2 <__aeabi_memset4+0x70> @ imm = #0x16
 80030ca:      	mov	r0, r12
 80030cc:      	pop.w	{r4, r6, r7, lr}
 80030d0:      	b.w	0x8003068 <__aeabi_memset> @ imm = #-0x6c
 80030d4:      	str	r3, [r0, #0x8]
 80030d6:      	adds	r0, #0xc
 80030d8:      	subs	r1, #0xc
 80030da:      	mov	r12, r0
 80030dc:      	cmp.w	lr, #0xc
 80030e0:      	blo	0x80030ca <__aeabi_memset4+0x58> @ imm = #-0x1a
 80030e2:      	subs	r1, #0x10
 80030e4:      	strd	r3, r3, [r0]
 80030e8:      	strd	r3, r3, [r0, #8]
 80030ec:      	adds	r0, #0x10
 80030ee:      	cmp	r1, #0x3
 80030f0:      	bhi	0x80030e2 <__aeabi_memset4+0x70> @ imm = #-0x12
 80030f2:      	mov	r12, r0
 80030f4:      	mov	r0, r12
 80030f6:      	pop.w	{r4, r6, r7, lr}
 80030fa:      	b.w	0x8003068 <__aeabi_memset> @ imm = #-0x96

080030fe <HardFaultTrampoline>:
 80030fe:      	mov	r0, lr
 8003100:      	movs	r1, #0x4
 8003102:      	tst	r0, r1
 8003104:      	bne	0x800310c <HardFaultTrampoline+0xe> @ imm = #0x4
 8003106:      	mrs	r0, msp
 800310a:      	b	0x8003112 <HardFault_>  @ imm = #0x4
 800310c:      	mrs	r0, psp
 8003110:      	b	0x8003112 <HardFault_>  @ imm = #-0x2

08003112 <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 8003112:      	push	{r7, lr}
 8003114:      	mov	r7, sp
 8003116:      	sub	sp, #0x8
 8003118:      	str	r0, [sp, #0x4]
 800311a:      	b	0x800311c <HardFault_+0xa> @ imm = #-0x2
 800311c:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 800311e:      	strb	r0, [r7, #-5]
 8003122:      	ldrb	r0, [r7, #-5]
 8003126:      	bl	0x8001618 <core::sync::atomic::compiler_fence::hc68a20670b780be0> @ imm = #-0x1b12
 800312a:      	b	0x800311c <HardFault_+0xa> @ imm = #-0x12
